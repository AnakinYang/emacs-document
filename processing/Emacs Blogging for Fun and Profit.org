#+TITLE: Emacs Blogging for Fun and Profit
#+URL: https://loomcom.com/blog/0110_emacs_blogging_for_fun_and_profit.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2019年 07月 08日 星期一 17:08:55 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
You may notice something quite different about this blog if you've
如果你读过这个博客，你可能会注意到它的一些不同之处
been here before. The look and feel is different, yes, but it's more
以前来过这里。外观和感觉是不同的，是的，但更多
than just skin deep.
而不是肤浅的。

For the last nine years, I've kept my blog in WordPress, a very
在过去的九年里，我一直用WordPress写博客
capable blogging platform. But, starting today, I've switched my
博客平台能力。但是，从今天开始，我改变了我的
entire website to a technology from the 1970s: Emacs, the venerable
整个网站都采用了上世纪70年代的技术:Emacs，备受尊敬
text editor.
文本编辑器。

Am I crazy? No, I just think it suits my workflow better.
我是疯了吗?不，我只是觉得它更适合我的工作流程。

* Background
*背景
:PROPERTIES:
属性:
:CUSTOM_ID: orgaf8ffa8
:CUSTOM_ID orgaf8ffa8
:END:
结束:

I've been an Emacs user for many years. Emacs is more than just a text
多年来我一直是Emacs的用户。Emacs不仅仅是一个文本
editor: It's a swiss army knife, an extensible tool made of other
编者:这是一把瑞士军刀，可扩展的工具
tools. One of those tools is Org Mode, a mode that lets you organize
工具。其中一个工具是Org模式，一种允许您组织的模式
thoughts, write outlines, keep notes, do budgets, keep agendas and
思考，写大纲，做笔记，做预算，做议程
timelines, write documentation, and much more.
时间表、编写文档，等等。

Org Mode is so powerful that many people who have come to Emacs in
Org模式非常强大，很多人都是在Emacs中访问它的
recent years have done so specifically because they wanted to use Org
最近几年他们这么做是因为他们想要使用Org
Mode. [[https://orgmode.org/manual/index.html][The on-line manual]] and [[https://orgmode.org/worg/][user-written docs]] are comprehensive and
模式。[[https://orgmode.org/manual/index.html][在线手册]]和[[https://orgmode.org/worg/][用户编写的文档]]是全面和
give a full sense of Org Mode's capabilities.
全面了解Org模式的功能。

One thing that Org Mode is especially good at is /writing
Org模式特别擅长的一点是/writing
documentation/. Once a document has been captured in Org Mode,
文档/。在Org模式下捕获文档后，
complete with markup and links, it can be exported to an HTML document
完成标记和链接后，可以将其导出到HTML文档
(or a LaTeX document, or a PDF, or...)
(或者乳胶文档，或者PDF文档，或者……)

* Setup
*设置
:PROPERTIES:
属性:
:CUSTOM_ID: orgf2c958a
:CUSTOM_ID orgf2c958a
:END:
结束:

Each page on this site, including all the blog entries, is in its own
这个站点的每个页面，包括所有的博客条目，都是独立的
file. They're all published together with a single setup and a single
文件。它们都是通过一个单独的设置和一个单独的程序一起发布的
command, using the =org-publish= feature of Org Mode.
命令，使用Org模式的= Org -publish=特性。

You can see the source code in its entirety [[https://github.com/sethm/loomcom/][here on GitHub]].
你可以看到完整的源代码[[https://github.com/sethm/loomcom/][这里在GitHub]]。

Configuration wasn't too difficult. Basically, the whole config is in
配置并不难。基本上，整个配置都在
one elisp file that I load into my master =init.el= file. I keep the
一个elisp文件，我加载到我的主=init。el =文件。我保持
entire site checked out into a working directory,
整个网站检出到一个工作目录，
=~/Projects/loomcom=.
= ~ /项目/ loomcom =。

I'll go through my config bit by bit, but first, I must acknowledge
我将一点一点地浏览我的配置，但首先，我必须承认
Dennis Ogbe's website ([[https://ogbe.net/]]), and his blog post [[https://ogbe.net/blog/blogging_with_org.html][“Blogging
Dennis Ogbe的网站([[https://ogbe.net/])和他的博客文章[[https://ogbe.net/blog/blogging_with_org.html]["博客
using org-mode (and nothing else)”]], for being the inspiration for my
使用组织模式(而不是其他)”]]，作为我的灵感
setup.
设置。

** Emacs Config
* * Emacs配置
:PROPERTIES:
属性:
:CUSTOM_ID: orgd821461
:CUSTOM_ID orgd821461
:END:
结束:

The first thing I do is define a symbol, =loomcom/project-dir=, that
我要做的第一件事是定义一个符号，=loomcom/project-dir=， that
I'll use elsewhere. This is the parent folder, where my website is
我将使用在其他地方。这是我的网站所在的父文件夹
checked out from GitHub.
从GitHub退房。

#+BEGIN_EXAMPLE
(setq loomcom/project-dir "~/Projects/loomcom/")
#+END_EXAMPLE

Then I set up org-publish to use a local directory for caching, so it
然后我设置了org-publish来使用一个本地目录进行缓存
doesn't pollute my home directory. I conveniently put this directory
不会污染我的主目录。我很方便地把这个目录放进去
into my =.gitignore= file.
进我的=。gitignore =文件。

#+BEGIN_EXAMPLE
(setq org-publish-timestamp-directory (concat loomcom/project-dir "cache/"))
#+END_EXAMPLE

Next, I set another symbol, =loomcom/extra-head=. I'll use this below
接下来，我设置另一个符号=loomcom/extra-head=。我将在下面使用它
to set an extra bit of HTML set in each page's =<head>...</head>=
在每个页面中设置额外的HTML位=<head>…</head>=
element. This bit just says that it should load CSS from the
元素。这一点只是说，它应该加载CSS从
=/res/style.css= resource.
= / res /风格。css =资源。

#+BEGIN_EXAMPLE
(setq loomcom/extra-head
"<link rel="stylesheet" type="text/css" href="/res/style.css">")
#+END_EXAMPLE

Then I define two more symbols, =loomcom/header-file= and
然后我再定义两个符号，=loomcom/header-file=和
=loomcom/footer=, that inject two blocks of HTML: The first is a
=loomcom/footer=，它注入了两个HTML块:第一个是
static snippet file that gets injected before the content, and the
在内容之前注入的静态代码段文件，以及
second is in the form of a string that gets injected after the
第二个是字符串的形式，它在。之后被注入
content.
内容。

#+BEGIN_EXAMPLE
(setq loomcom/header-file
(concat loomcom/project-dir "pages/header.html"))

(setq loomcom/footer
(concat
"<div id="footer">n"
"<p>Seth Morabito</p>n"
"<p>Proudly published with "
"<a href="https://www.gnu.org/software/emacs/">Emacs</a> and "
"<a href="https://orgmode.org/">Org Mode</a>"
"</div>"))
#+END_EXAMPLE

Then I turn on the HTML5 fancy variable, so that Org Mode will use
然后我打开HTML5花式变量，这样Org模式就可以使用了
new HTML5 features.
新的HTML5特性。

#+BEGIN_EXAMPLE
(setq org-html-html5-fancy t)
#+END_EXAMPLE

Now we get into the good stuff.
现在我们进入正题。

On my blog, I don't want to render every /full/ post all on one page.
在我的博客上，我不想在一个页面上呈现所有的内容。
Instead, I'd like to include just a preview, and offer readers the
相反，我只想包括一个预览，并向读者提供
ability to click on a /“Read More...”/ link if they wish to link to
点击/“阅读更多…”/如果他们希望链接到
the full post and read the rest. To do this, I define a function,
全文和阅读其余部分。为此，我定义了一个函数，
=loomcom/get-preview=, that returns just the part of each blog
=loomcom/get-preview=，它只返回每个博客的一部分
document that should be shown on the main blog page.
应该显示在主博客页面上的文档。

Org Mode has no built-in facility for this, so I had to roll my own.
Org模式没有内置的功能，所以我只能自己滚动。
Since there's no built-in syntax, I use a special (but meaningless)
由于没有内置的语法，我使用了一个特殊的(但毫无意义的)
org-mode block in any blog post that I want to use just a snippet of
组织模式块在任何博客文章，我想使用只是一个片段
on the front page, using the syntax:
在首页，使用语法:

#+BEGIN_EXAMPLE
#+BEGIN_more
#+END_more
#+END_EXAMPLE

The function below opens the file, looks for this marker, and returns
下面的函数打开文件，查找这个标记，然后返回
only the blog text between the header and the the marker. If there's
只有标题和标记之间的博客文本。如果有
no marker, it will return the whole post.
没有标记，它会返回整个帖子。

It also returns a little bit of metadata: A boolean indicating whether
它还返回一点元数据:一个指示是否的布尔值
the /“Read More...”/ link should be rendered or not.
/“阅读更多…/链接是否应该被渲染。

#+BEGIN_EXAMPLE
(defun loomcom/get-preview (filename)
"Returns a list: '(<needs-more> <preview-string>) where
<needs-more> is t or nil, indicating whether a "Read More..."
link is needed."
(with-temp-buffer
(insert-file-contents (concat loomcom/project-dir "blog/" filename))
(goto-char (point-min))
(let ((content-start (or
;; Look for the first non-keyword line
(and (re-search-forward "^[^#]" nil t)
(match-beginning 0))
;; Failing that, assume we're malformed and
;; have no content
(buffer-size)))
(marker (or
(and (re-search-forward "^#\+BEGIN_more$" nil t)
(match-beginning 0))
(buffer-size))))
;; Return a pair of '(needs-more preview-string)
(list (not (= marker (buffer-size)))
(buffer-substring content-start marker)))))
#+END_EXAMPLE

Next is the function that actually generates the main blog page.
接下来是实际生成主博客页面的函数。
Org Mode's publish functionality refers to this as a “Site Map”,
Org模式的发布功能称之为“站点地图”，
but for the purposes of my site, it's a blog page.
但是对于我的网站来说，它是一个博客页面。

By default, Org Mode will publish the entries as a bulleted list.
默认情况下，Org模式将以项目符号列表的形式发布条目。
We don't want that, so we override the default publishing function.
我们不希望这样，所以我们覆盖了默认的发布函数。
All it does is put a title on the page and return each entry separated
它所做的就是在页面上放置一个标题并返回每个单独的条目
by =nn=.
= nn =。

#+BEGIN_EXAMPLE
(defun loomcom/sitemap (title list)
"Generate the sitemap (Blog Main Page)"
(concat "#+TITLE: " title "n" "--------n"
(string-join (mapcar #'car (cdr list)) "nn")))
#+END_EXAMPLE

Then, I define a function that generates each entry for the sitemap /
然后，我定义一个函数来为sitemap /生成每个条目
blog page.
博客页面。

This function takes a file name, passes it to =(loomcom/get-preview)=
该函数接受一个文件名，并将其传递给=(loomcom/get-preview)=
to get the preview text, adds a /“Read More...”/ link if needed, and
要获得预览文本，添加/“阅读更多…”/链接，如果需要，和
returns the Org Mode markup for the entry.
返回条目的Org模式标记。

#+BEGIN_EXAMPLE
(defun loomcom/sitemap-entry (entry style project)
"Sitemap (Blog Main Page) Entry Formatter"
(when (not (directory-name-p entry))
(format (string-join
'("* [[file:%s][%s]]n"
"#+BEGIN_publishedn"
"%sn"
"#+END_publishednn"
"%sn"
"--------n"))
entry
(org-publish-find-title entry project)
(format-time-string "%A, %B %_d %Y at %l:%M %p %Z" (org-publish-find-date entry project))
(let* ((preview (loomcom/get-preview entry))
(needs-more (car preview))
(preview-text (cadr preview)))
(if needs-more
(format
(concat
"%snn"
"#+BEGIN_morelinkn"
"[[file:%s][Read More...]]n"
"#+END_morelinkn")
preview-text entry)
(format "%s" preview-text))))))
#+END_EXAMPLE

Next I define a function to be used by org-publish to load the HTML
接下来，我定义一个由org-publish用来加载HTML的函数
header file snippet. This function just opens the header file in a
头文件片段。这个函数只打开a中的头文件
temp buffer and returns the contents.
临时缓冲区并返回内容。

#+BEGIN_EXAMPLE
(defun loomcom/header (arg)
(with-temp-buffer
(insert-file-contents loomcom/header-file)
(buffer-string)))
#+END_EXAMPLE

Finally, the meat of the matter. I set up the org-publish project
最后是问题的实质。我建立了org-publish项目
with the =org-publish-project-alist= variable.
使用=org-publish-project-alist= variable。

It defines four components:
它定义了四个组件:

- *blog* - The directory containing all blog entries
- *blog* -包含所有博客条目的目录
- *pages* - Static pages that define the rest of the site
- *页面* -定义站点其余部分的静态页面
- *res* - Resources like CSS and JavaScript files
- *res* -资源，如CSS和JavaScript文件
- *images* - Static images
- *图像*静态图像

#+BEGIN_EXAMPLE
(setq org-publish-project-alist
`(("loomcom"
:components ("blog" "pages" "res" "images"))
("blog"
:base-directory ,(concat loomcom/project-dir "blog/")
:base-extension "org"
:publishing-directory ,(concat loomcom/project-dir "www/blog/")
:publishing-function org-html-publish-to-html
:with-author t
:with-creator nil
:with-date t
:section-numbers nil
:with-title t
:with-toc nil
:with-drawers t
:with-sub-superscript nil
:html-doctype "html5"
:html-link-home "/"
:html-head nil
:html-head-extra ,loomcom/extra-head
:html-head-include-default-style nil
:html-head-include-scripts nil
:html-viewport nil
:html-link-up ""
:html-link-home ""
:html-preamble loomcom/header
:html-postamble ,loomcom/footer
:auto-sitemap t
:sitemap-function loomcom/sitemap
:sitemap-format-entry loomcom/sitemap-entry
:sitemap-filename "index.org"
:sitemap-title "A Weblog"
:sitemap-sort-files anti-chronologically)
("pages"
:base-directory ,(concat loomcom/project-dir "pages/")
:base-extension "org"
:publishing-directory ,(concat loomcom/project-dir "www/")
:publishing-function org-html-publish-to-html
:section-numbers nil
:recursive t
:with-title t
:with-toc nil
:with-drawers t
:with-sub-superscript nil
:html-link-home "/"
:html-head nil
:html-doctype "html5"
:html-head-extra ,loomcom/extra-head
:html-head-include-default-style nil
:html-head-include-scripts nil
:html-link-up ""
:html-link-home ""
:html-preamble loomcom/header
:html-postamble ,loomcom/footer
:html-viewport nil)
("res"
:base-directory ,(concat loomcom/project-dir "res/")
:base-extension ".*"
:publishing-directory ,(concat loomcom/project-dir "www/res/")
:publishing-function org-publish-attachment)
("images"
:base-directory ,(concat loomcom/project-dir "images/")
:base-extension ".*"
:publishing-directory ,(concat loomcom/project-dir "www/images/")
:publishing-function org-publish-attachment)))
#+END_EXAMPLE

Whew. That's all there is to it.
唷。就是这样。
