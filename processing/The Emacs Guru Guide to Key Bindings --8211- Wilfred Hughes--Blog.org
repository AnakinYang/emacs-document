#+TITLE: The Emacs Guru Guide to Key Bindings &#8211; Wilfred Hughes::Blog
#+URL: http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 03月 12日 星期一 16:05:47 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* The Emacs Guru Guide to Key Bindings
* Emacs古鲁密钥绑定指南

#+BEGIN_QUOTE
# + BEGIN_QUOTE
Imagine that you hold Control and type your name into Emacs. Can you
假设您按住Control键并在Emacs中输入您的名字。你能
describe what will happen?
描述将会发生什么?

-- The ‘Emacs Guru Test'
——“Emacs大师测试”
#+END_QUOTE
# + END_QUOTE

Emacs shortcuts (known as ‘key bindings') can seem ridiculous to
Emacs快捷方式(称为“键绑定”)可能看起来很可笑
beginners. Some Emacs users even argue you should change them as soon
初学者。一些Emacs用户甚至认为应该尽快更改它们
as you start using Emacs.
当您开始使用Emacs时。

They are wrong. In this post, I'll describe the logic behind the Emacs
他们错了。在这篇文章中，我将描述Emacs背后的逻辑
key bindings. Not only will you be closer to passing the guru test,
键绑定。你不仅会更接近于通过导师考试，
but you might even find you like some of the defaults!
但是你可能会发现你喜欢一些默认设置!

** There Are /How/ Many?
有/多少/有多少?
:PROPERTIES:
属性:
:CUSTOM_ID: there-are-how-many
:CUSTOM_ID:有多少
:END:
结束:

Emacs has a /ton/ of key bindings.
Emacs有大量的键绑定。

#+BEGIN_EXAMPLE
ELISP> (length global-map)
143
#+END_EXAMPLE

Emacs is a modal editor, so most key bindings are
Emacs是一个模态编辑器，所以大多数键绑定都是
mode-specific. However, my current Emacs instance has well over a
使用模式特定。但是，我当前的Emacs实例远远超过了a
hundred global shortcuts that work everywhere.
全球百种快捷方式，无处不在。

(Keymaps are nested data structures, so this actually undercounts! For
(键映射是嵌套的数据结构，所以这实际上是少算了!为
example, =C-h C-h= and =C-h f= are not counted separately.)
例如，=C-h C-h=和=C-h f=不单独计算。)

Even that is a drop in the bucket compared with how many commands we
与我们使用的命令数量相比，这只是沧海一粟
could define key bindings for.
可以定义密钥绑定。

#+BEGIN_EXAMPLE
ELISP> (let ((total 0))
(mapatoms
(lambda (sym)
(when (commandp sym)
(setq total (1+ total)))))
total)
8612
#+END_EXAMPLE

How can we possibly organise all these commands?
我们怎么可能组织所有这些命令呢?

** Mnemonic Key Bindings
**助记键绑定
:PROPERTIES:
属性:
:CUSTOM_ID: mnemonic-key-bindings
:CUSTOM_ID mnemonic-key-bindings
:END:
结束:

Basic commands are often given key bindings based on their name. You'll
基本命令通常根据键绑定的名称进行绑定。你会
encounter all of these important commands in the Emacs tutorial.
在Emacs教程中遇到所有这些重要的命令。

| Command                      | Key Binding   |
命令|键绑定|
|------------------------------+---------------|
| e*X*ecute-extended-command   | M-x           |
| e*X*扩展命令| M-x |
| *N*ext-line                  | C-n           |
| *N*ext-line | C-n |
| *P*revious-line              | C-p           |
| *P*复兴线| C-p |
| *F*orward-char               | C-f           |
| *F*orward-char | C-f |
| *B*ackward-car               | C-b           |
| *B*收银车| C-b |
| i*S*earch-forward            | C-s           |
| i*S*earch-forward | C-s |

Mnemonics are a really effective way of memorising things. If you can
记忆术是一种非常有效的记忆方法。如果你能
remember the name of the command, you can probably remember the
记住命令的名称，您可能还记得
key binding too.
密钥绑定。

** Organised Key Bindings
**有组织的密钥绑定
:PROPERTIES:
属性:
:CUSTOM_ID: organised-key-bindings
:CUSTOM_ID organised-key-bindings
:END:
结束:

Many Emacs movement commands are laid out in a consistent pattern.
许多Emacs移动命令以一致的模式布局。

For example, movement by certain amount:
例如，一定数量的移动:

| Command        | Key Binding   |
命令|键绑定|
|----------------+---------------|
| forward-char   | C-f           |
|正向char | C-f |
| forward-word   | M-f           |
前向字| M-f |
| forward-sexp   | C-M-f         |
|前向sexp | C-M-f |

Moving to the end of something:
移动到某事的结尾:

| Command            | Key Binding   |
命令|键绑定|
|--------------------+---------------|
| move-end-of-line   | C-e           |
|移动行尾| C-e |
| forward-sentence   | M-e           |
前向句| M-e |
| end-of-defun       | C-M-e         |
|无趣结束| C-M-e |

Transposing, which swaps text either side of the cursor:
换位，交换文本的任何一边的光标:

| Command           | Key Binding   |
命令|键绑定|
|-------------------+---------------|
| transpose-chars   | C-t           |
起草了| transpose-chars | |
| transpose-words   | M-t           |
|转置单词| M-t |
| transpose-sexps   | C-M-t         |
| transpose-sexps | C-M-t |

Killing text:
杀死文字:

| Command         | Key Binding   |
命令|键绑定|
|-----------------+---------------|
| kill-line       | C-k           |
|杀线| C-k |
| kill-sentence   | M-k           |
杀句| M-k |
| kill-sexp       | C-M-k         |
| kill-sexp | C-M-k |

Have you spotted the pattern?
你发现这个模式了吗?

The pattern here is that =C-whatever= commands are usually
这里的模式是=C-whatever=命令
small, dumb text operations. =M-whatever= commands are larger, and
小型、简单的文本操作。=M-whatever=命令更大，并且
usually operate on words.
通常是文字。

=C-M-whatever= commands are slightly magical. These commands
=C-M-whatever=命令有点神奇。这些命令
understand the code they're looking at, and operate on whole
理解他们正在查看的代码，并进行整体操作
expressions. Emacs uses the term ‘sexp' (s-expression), but these
表达式。Emacs使用术语“sexp”(s-expression)，但是这些
commands usually work in any programming language!
命令通常适用于任何编程语言!

** Discovering Key Bindings
发现密钥绑定
:PROPERTIES:
属性:
:CUSTOM_ID: discovering-key-bindings
:CUSTOM_ID discovering-key-bindings
:END:
结束:

What happens when you press =C-a=? Emacs can tell you. =C-h k C-a=
按下=C-a=会发生什么?Emacs可以告诉你。=碳氢键k c - a =
will show you exactly what command is run.
将准确地显示运行的命令。

[[/assets/describe_key.png]]
[[/资产/ describe_key.png]]

If you use a command without its key binding, Emacs will helpfully
如果您使用一个没有键绑定的命令，Emacs将会很有帮助
remind you there's a shortcut available.
提醒你有捷径可走。

[[/assets/emacs_hint.png]]
[[/资产/ emacs_hint.png]]

You can even do this backwards! If Emacs has done something neat or
你甚至可以倒着做!如果Emacs做了什么
unexpected, you might wonder what command ran. =C-h l= will reveal
出乎意料之外，您可能想知道运行了什么命令。=C-h l=将揭示
what the command was, and exactly which keys triggered it.
命令是什么，以及触发它的键是什么。

[[/assets/view_lossage.png]]
[[/资产/ view_lossage.png]]

** Room For Emacs
Emacs的空间
:PROPERTIES:
属性:
:CUSTOM_ID: room-for-emacs
:CUSTOM_ID room-for-emacs
:END:
结束:

Why are Emacs key bindings different from conventional shortcuts? Why
为什么Emacs键绑定不同于传统的快捷键?为什么
doesn't =C-c= copy text to the clipboard, like many other programs?
不=C-c=复制文本到剪贴板，像许多其他程序?

Emacs uses mnemonics for its clipboard commands: you ‘kill' and ‘yank'
Emacs对其剪贴板命令使用助记符:“杀死”和“拔出”
text, so the key bindings are are =C-k= and =C-y=. If you really want,
因此，键绑定是=C-k=和=C-y=。如果你真的想，
you can use
您可以使用
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][cua-mode]] so
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html] [cua-mode]]
=C-x= acts as you expect.
=C-x=如你所愿。

The problem is that Emacs commands are too versatile, too general to
问题是Emacs命令太通用了，太通用了
fit in the usual =C-x=, =C-c=, =C-v=. Emacs has /four/ clipboard
符合一般=C-x=， =C-c=， =C-v=。Emacs有/四个/剪贴板
commands:
命令:

1. =kill=: remove text and insert it into the kill-ring. This is like
1. =kill=:删除文本并将其插入杀死环。这就像
clipboard cut, but you can do it multiple times and Emacs will
剪贴板剪切，但你可以做多次，Emacs会
/remember every item in your clipboard/.
/记住剪贴板上的每一项。
2. =kill-ring-save=: copy the selected text into the kill-ring. This
2. =kill-ring-save=:将选择的文本复制到kill-ring中。这
is like clipboard copy, but you can also do this multiple times.
类似于剪贴板复制，但也可以复制多次。
3. =yank=: insert text from the kill-ring. This is like clipboard
3.=yank=:从终止环中插入文本。这就像剪贴板
paste.
粘贴。
4. =yank-pop=: replace the previously yanked text with the next item
4. =yank-pop=:用下一项替换前面的文本
in the kill ring. There is no equivalent in a single-item clipboard!
在杀戮场。在单个项目剪贴板中没有相同的内容!

The generality of Emacs means that it's hard to find a key binding for
Emacs的通用性意味着很难找到键绑定
everything. Key bindings tend to be slightly longer as a result:
一切。键绑定会稍微长一些:
opening a file is =C-x C-f=, an additional keystroke over the =C-o= of
打开一个文件是=C-x C-f=，在=C-o=上的另一个按键
other programs.
其他程序。

** Room For You
**你的房间
:PROPERTIES:
属性:
:CUSTOM_ID: room-for-you
:CUSTOM_ID room-for-you
:END:
结束:

With all these key bindings already defined, what bindings should
既然已经定义了所有这些键绑定，那么应该使用哪些绑定呢
you use for your personal favourite commands?
你最喜欢的命令是什么?

Much like IP addresses =192.168.x.x= is reserved for private use,
很像IP地址=192.168.x。x=为私人使用，
Emacs has
Emacs有
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][keys that are reserved]] for
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/keybinding-convention .html][保留的键]]
user configuration. All the sequences =C-c LETTER=, such as =C-c a=,
用户配置。所有的序列=C-c字母=，如=C-c a=，
are reserved for your usage, as are =<F5>= through to =<F9>=.
保留给您使用，如=<F5>= through to =<F9>=。

For example, if you find yourself using =imenu= a lot, you might bind
例如，如果您发现自己经常使用=imenu=，您可能需要绑定
=C-c i=:
我= =碳碳:

#+BEGIN_EXAMPLE
(global-set-key (kbd "C-c i") #'imenu)
#+END_EXAMPLE

** You Make The Rules
你制定规则
:PROPERTIES:
属性:
:CUSTOM_ID: you-make-the-rules
:CUSTOM_ID:您制定的规则
:END:
结束:

This doesn't mean that you should never modify key bindings. Emacsers
这并不意味着永远不要修改键绑定。Emacsers
create
创建
[[https://github.com/chrisdone/god-mode][weird]] [[http://melpa.milkbox.net/#/key-chord][and]] [[https://github.com/abo-abo/hydra][wonderful]] ways
[[https://github.com/chrisdone/god-mode][weird]] [[http://melpa.milkbox.net/#/keychord][and]] [[https://github.com/abo-abo/hydra][wonderful]]方法
of mapping keys all the time.
映射键。

Emacs will even try to accommodate this. If you open the tutorial
Emacs甚至会尝试适应这一点。如果你打开教程
after changing a basic key binding, it will update accordingly!
在更改了基本的密钥绑定之后，它将相应地进行更新!

[[/assets/emacs_tutorial.png]]
[[/资产/ emacs_tutorial.png]]

The secret to mastering Emacs is to remember everything is
掌握Emacs的秘诀是要记住一切
self-documenting. Learn the help commands to find out which commands
自我记录。学习帮助命令，找出哪些命令
have default key bindings. Consider /following/ the existing patterns
有默认的键绑定。考虑/遵循/现有的模式
when you define new key bindings or override existing
定义新的键绑定或覆盖现有的键绑定时
ones. =org-mode=, for example, redefines =C-M-t= to transpose org
的人。例如，重新定义=C-M-t=转置org
elements.
元素。

Once you understand the patterns, you'll know when to follow and when
一旦你理解了这些模式，你就会知道什么时候该遵循，什么时候该遵循
to break them. You'll also be much closer to passing that guru test!
打破他们。你也会更接近通过大师测试!
