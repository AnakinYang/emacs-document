#+TITLE: A Brief Introduction to Literate Analytics With org-babel
#+URL: http://ul.io/nb/2018/04/30/literate-analytics-with-org-babel/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 06月 05日 星期二 14:13:05 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

As an engineer on an analytics and data infrastructure team, I spend
作为一名分析和数据基础设施团队的工程师，我花费了
quite a bit of time exploring and performing ad-hoc analyses of data
花了不少时间来研究和执行数据的特别分析
scattered across SQL databases; Hive and Spark clusters; and blob
分散在SQL数据库中;蜂箱和火花塞;和团
storage. These investigations can be a chore -- a single instance might
存储。这些调查可能是一件苦差事——单个实例就可能
involve a half dozen ETL steps, ad-hoc querying to assess whether data
包括6个ETL步骤，特别查询以评估数据是否
needs to be cleaned, and moving code between a REPL and a program
需要清理，并在REPL和程序之间移动代码
destined for production.
注定要生产。

Once an initial conclusion has been reached, I need to go back and
一旦初步的结论已经达成，我需要回去和
document my process for posterity, remembering exactly what worked along
为子孙后代记录我的过程，准确地记住是什么起了作用
the way. This is a recipe for mistakes and omissions, so why not
的方式。这是一个错误和疏忽的处方，所以为什么不
document as you go?
随走随取?

What I need to do is:
我需要做的是:

1. Log each command
1. 记录每个命令
2. Document what it does and why it's necessary
2. 记录它做了什么，为什么有必要做
3. Execute and examine the results as I go
3.执行并检查结果

=org-mode= and =org-babel= provide an amazing environment for this sort
=org-mode=和=org-babel=为这种类型提供了一个令人惊奇的环境
of polyglot, multi-modal series of tasks. Prose and code can be freely
多语言，多模式的一系列任务。散文和代码可以自由使用
intermingled in a [[https://en.wikipedia.org/wiki/Literate_programming][literate
混杂在一个[[https://en.wikipedia.org/wiki/Literate_programming][读写
programming]] style,
编程]]的风格,
any references used during the process can be cited, and the final
在此过程中使用的任何引用都可以被引用，并且是最终引用
product can be exported into human- or machine-readable formats. If
产品可以导出为人类或机器可读的格式。如果
you're keen to see the final product of an analysis, [[https://gist.github.com/nickbarnwell/917c8d8bbde173ef5ad94e40ba5fa01f][here's an
你渴望看到分析的最终结果，[[https://gist.github.com/nickbarnwell/917c8d8bbde173ef5ad94e40ba5fa01f][这里有一个
example]]
例]]
I recently created for [[http://www.teawithstrangers.com/][Tea With
我最近为[[http://www.teawithstrangers.com/][Tea With
Strangers]], reporting on growth in
陌生人]]，报告增长
recent months that demonstrates these capabilities.
最近几个月的情况证明了这些能力。

* Getting Started
*开始
:PROPERTIES:
属性:
:CUSTOM_ID: getting-started
:CUSTOM_ID:开始
:END:
结束:

As I typically begin my explorations with a SQL-like datastore, I'll
由于我通常以类似sql的数据存储开始我的探索，我将
begin my examples there. =sql-mode= and =ob-sql= ship with =emacs=, so
从这里开始我的例子。=sql模式= and =ob-sql= ship with =emacs=，所以
all you have to do is allow for execution of SQL =src= blocks in the
您所要做的就是允许执行SQL =src=块
=org-babel= environment; to do this, add the following to your
= org-babel =环境;为此，请将以下内容添加到您的
=init.el=:
= init.el =:

#+BEGIN_EXAMPLE
1
2
3
4
5
6
7
#+END_EXAMPLE

#+BEGIN_EXAMPLE
(add-to-list 'org-babel-load-languages '(sql . t))
;;If you also want to disable confirmation for SQL blocks:
(setq org-confirm-babel-evaluate
(lambda (lang body)
(not (string= lang "sql"))))
;;or disable it for all blocks
(setq org-confirm-babel-evaluate nil)
#+END_EXAMPLE

#+BEGIN_QUOTE
# + BEGIN_QUOTE
n.b. If you'd like to learn more about how =babel=‘s evaluation
注意:如果你想了解更多关于如何=巴别塔=的评价
works, its =info= page is very complete; call =(info "(org) Evaluating code blocks")= to view .
作品，其=info=页面非常完整;调用=(info "(org) code blocks")=查看。
#+END_QUOTE
# + END_QUOTE

Now that =org-babel= is configured, it's time create a new =org= buffer
配置了=org-babel=之后，就可以创建一个新的=org=缓冲区了
and add some properties that will configure our SQL environment. =src=
并添加一些属性来配置我们的SQL环境。= src =
blocks accept a variety of arguments that control the behaviour of their
块接受控制其行为的各种参数
output and export.
产出和出口。

- =#+PROPERTY: header-args:sql :session literate-analytics :engine postgresql=
- =#+属性:header-args:sql:session literal -analytics:engine postgresql=

- This line adds two default arguments to any =sql= =src= blocks:
-这一行添加两个默认参数到任何=sql= =src=块:
=:session= and =:engine=. The former enables [[https://orgmode.org/worg/org-contrib/babel/intro.html#org98c324c][session-based
= =和= =:会话:引擎。前者使[[https://orgmode.org/worg/org-contrib/babel/intro.html#org98c324c][基于会话
evaluation for our SQL
SQL的计算
blocks]],
街区]]
the latter tells =sql-mode= that =postgresql= is the backend
后者告诉=sql-mode= that =postgresql=是后端
we're working against; this is equivalent to using
我们正在反对;这相当于使用
=sql-set-product= in a =sql-mode= buffer.
=sql-set-product= in a =sql-mode= buffer。

- =#+PROPERTY: header-args:sql+ :exports results :database tws_dev=
- =#+属性:header-args:sql+:导出结果:数据库tws_dev=

- The =+= after =sql= enables appending to existing arguments
- =+= after =sql=允许附加到现有参数
instead of overriding them. =:exports results= includes the
而不是覆盖它们。=:导出结果=包括
output of =src= blocks will be included in the output of an
块的输出将包含在an的输出中
=org-export= backend by default. Finally, =:database= is the
=org-export=默认后端。最后，=:database=是
connection string that will be passed to our SQL client.
将被传递到我们的SQL客户端的连接字符串。

Now add a =src= block in =sql-mode= by typing =<s TAB sql=. Contents of
现在，通过键入=<s选项卡sql=，在=sql模式=中添加一个=src=块。的内容
this block will be syntax highlighted as if they were in their own
这个块将语法高亮显示，就好像它们在自己的块中一样
buffer, and you can edit its contents inline or in an indirect buffer
您可以在内联或间接缓冲区中编辑它的内容
using the appropriate major mode by typing =C-c '= while your point is
通过键入=C-c '=来使用适当的主模式
over the block.
在块中。

Your buffer should now look like
您的缓冲区现在应该是这样的
this:
这样的:

#+BEGIN_EXAMPLE
1
2
3
4
5
6
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+PROPERTY: header-args:sql :session literate-analytics :engine postgresql
#+PROPERTY: header-args:sql+ :exports results :database tws_dev

#+BEGIN_SRC sql
SELECT COUNT(*) FROM users;
#+END_SRC
#+END_EXAMPLE

Now, place your point inside the =src= block and call
现在，将您的点放在=src=块中并调用
=org-babel-execute-src-block= with =C-c C-c=. If everything's configured
=org-babel-execute-src-block= with =C-c C-c=。如果所有的配置
correctly, a =RESULT= block should be inserted below:
正确的，一个=RESULT=块应该插入如下:

#+BEGIN_EXAMPLE
1
2
3
4
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+RESULTS:
| count |
|-------|
| 5 |
#+END_EXAMPLE

Results are automatically coerced into an =org= table, which can be
结果将自动强制转换为=org=表，可以这样做
quite helpful if you want to perform some tabulation or filtering with
非常有用，如果你想执行一些表格或过滤
=elisp=, or simply want to export the results later via =org-export=.
=elisp=，或者只是希望稍后通过=org-export=导出结果。

* Using Remote Resources via TRAMP
*通过TRAMP使用远程资源
:PROPERTIES:
属性:
:CUSTOM_ID: using-remote-resources-via-tramp
:CUSTOM_ID using-remote-resources-via-tramp
:END:
结束:

Since it's rare you'll be interacting exclusively with local resources,
由于你很少只与当地资源互动，
it's quite useful to be able to run commands on other machines. For
能够在其他机器上运行命令非常有用。为
example, we frequently =ssh= into our Hadoop cluster head nodes to
例如，我们经常=ssh=到我们的Hadoop集群头节点
rename, move, or find files in HDFS. Fortunately, =babel= is tightly
在HDFS中重命名、移动或查找文件。幸运的是，=babel=关系紧密
integrated with [[https://www.gnu.org/software/tramp/][TRAMP]].
集成了[[https://www.gnu.org/software/tramp/](流浪汉)]。

The =:dir= property on =src= blocks accepts a TRAMP reference; execution
=:dir= property on =src= blocks接受一个TRAMP引用;执行
of the block will then occur on the remote machine, e.g.:
的块，然后将发生在远程机器上，例如:

#+BEGIN_EXAMPLE
1
2
3
4
5
6
7
8
9
10
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+BEGIN_SRC sh :dir /ssh:spark: :results output list
hdfs dfs -ls $hdfsPath/ServiceInterface
#+END_SRC

#+RESULTS:
: - Found 5 items
: - drwxrwxrwx+ - ... 0 2018-04-25 17:06 $hdfsPath/ServiceInterface/Delinked
: - drwxrwxrwx+ - ... 0 2018-04-25 16:43 $hdfsPath/ServiceInterface/PartialValidated
: - drwxrwxrwx+ - ... 0 2018-04-23 19:58 $hdfsPath/ServiceInterface/PreValidated
: - drwxrwxrwx+ - ... 0 2018-04-25 21:24 $hdfsPath/ServiceInterface/Unvalidated
#+END_EXAMPLE

If you're going to be executing multiple commands on the same remote
如果要在同一个远程上执行多个命令
machine, you can use the =:session= header arg to keep the connection
，您可以使用=:session= header参数来保持连接
open. See [[https://orgmode.org/manual/session.html][the info page for
开放。参见[[https://orgmode.org/manual/session.html]][信息页
:session]] for details.
详情:会话]]。

* Further Reading
*进一步阅读
:PROPERTIES:
属性:
:CUSTOM_ID: further-reading
:CUSTOM_ID:进一步阅读
:END:
结束:

I've only covered a fraction of what =org-babel= is capable of, but
我只谈到了=org-babel=所能做到的一小部分，但是
hopefully it'll give you some ideas. For further reading, I recommend
希望它能给你一些想法。对于进一步的阅读，我推荐
watching [[https://www.youtube.com/watch?v=dljNabciEGg][Howard Abram's Literate DevOps with emacs
看[[https://www.youtube.com/watch?霍华德·亚伯兰的《与emacs一起的识字DevOps》
talk]] and perusing the
谈话]]和细读
=info= manual for =babel=.
=info=手册=babel=。
