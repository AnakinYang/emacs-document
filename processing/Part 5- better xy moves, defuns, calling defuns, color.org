#+TITLE: Part 5: better xy moves, defuns, calling defuns, color
#+URL: http://dantorop.info/project/emacs-animation/lisp5.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 10日 星期一 10:05:24 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Continued from [[/project/emacs-animation/lisp4.html][Emacs Lisp programming pt. 4]].

To edit Lisp code in its own buffer, create a buffer, giving it a name something like =mycode.el=. To make sure Emacs realizes you are editing Lisp, you can type =M-x= @lisp-mode@. You should now see =(Lisp)= on the status line at the bottom of the screen. Now type away your code. When you're happy with it, type =M-x= @eval-buffer@ to load your code into Emacs. Then create another test buffer in which to run your code (via =C-x 5 b= as described at the start of the [[/project/emacs-animation/lisp4.html][last examples]]. When you're in the test buffer, type =M-:= to get a Lisp prompt at the bottom of the window with which you can run a defun by typing the defun's name in parentheses.

*** A helper routine to draw at a given screen position
    :PROPERTIES:
    :CUSTOM_ID: a-helper-routine-to-draw-at-a-given-screen-position
    :END:

#+BEGIN_EXAMPLE
  (defun drawxy (x y sprite)
   (erase-buffer)
   (dotimes (j y)
   (newline))
   (dotimes (i x)
   (insert " "))
   (insert sprite))
#+END_EXAMPLE

=sprite= is the text to draw.

*** Using the helper function to draw
    :PROPERTIES:
    :CUSTOM_ID: using-the-helper-function-to-draw
    :END:

#+BEGIN_EXAMPLE
  (defun liner ()
   (dotimes (x 20)
   (drawxy x x "!")
   (sit-for 0.1)))
#+END_EXAMPLE

*** More elaborate drawing, based on Peter's code
    :PROPERTIES:
    :CUSTOM_ID: more-elaborate-drawing-based-on-peters-code
    :END:

#+BEGIN_EXAMPLE
  (defun oVeR-sine ()
   (dotimes (y 777)
   (erase-buffer)
   (drawxy (round (+ 10 (* 10 (sin (/ y 10.0)))))
       (round (+ 10 (* 10 (sin (/ y 13.0)))))
       "--->)")
   (sit-for 0.1)))
#+END_EXAMPLE

*** Make a background grid
    :PROPERTIES:
    :CUSTOM_ID: make-a-background-grid
    :END:

#+BEGIN_EXAMPLE
  (defun background (width height)
   (erase-buffer)
   (dotimes (i height)
   (dotimes (j width)
   (insert "."))
   (newline)))
#+END_EXAMPLE

*** Revised =drawxy= to draw on the grid
    :PROPERTIES:
    :CUSTOM_ID: revised-drawxy-to-draw-on-the-grid
    :END:

#+BEGIN_EXAMPLE
  (defun drawxy2 (x y sprite)
   (goto-char (point-min))
   (forward-line y)
   (forward-char x)
   (delete-region (point) (+ (point) (length sprite)))
   (insert sprite))
#+END_EXAMPLE

*** Draw two lines on grid at same time
    :PROPERTIES:
    :CUSTOM_ID: draw-two-lines-on-grid-at-same-time
    :END:

#+BEGIN_EXAMPLE
  (defun liner2 ()
   (background 80 40)
   (dotimes (x 20)
   (drawxy2 x x "&")
   (drawxy2 (- 20 x) x "*")
   (sit-for 0.1)))
#+END_EXAMPLE

*** Using color:
    :PROPERTIES:
    :CUSTOM_ID: using-color
    :END:

#+BEGIN_EXAMPLE
  (insert (propertize "foreground color test" 'face '(:foreground "red")))
  (insert (propertize "gray background test" 'face '(:background "gray30")))
  (insert (propertize "color with hex code" 'face '(:foreground "#33AAFF")))
  (insert (propertize "lots of color" 'face '(:foreground "orange" :background "purple")))
#+END_EXAMPLE

To make color work in =ielm=, first type =M-x font-lock-mode=. You should see a message at the bottom of the screen =Font-Lock mode disabled= (if it says =enabled=, type =M-x font-lock-mode= again). Or just work in a test buffer which you've created.

Continued in [[/project/emacs-animation/lisp6.html][Emacs Lisp programming pt. 6]].
