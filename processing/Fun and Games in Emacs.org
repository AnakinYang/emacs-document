#+TITLE: Fun and Games in Emacs
#+URL: https://www.masteringemacs.org/article/fun-games-in-emacs
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 12月 28日 星期五 16:40:00 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
* Fun and Games in Emacs
* Emacs中的乐趣和游戏
:PROPERTIES:
属性:
:CUSTOM_ID: fun-and-games-in-emacs
:CUSTOM_ID fun-and-games-in-emacs
:CLASS: text-center
类:text-center
:END:
结束:

[[/static/img/fleuron2.gif]]
[[/ static / img / fleuron2.gif]]

It's yet another Monday and you're hard at work on those [[https://en.wikipedia.org/wiki/Office_Space][TPS reports]] for your boss, Lumbergh. Why not play Emacs's Zork-like text adventure game to take your mind off the tedium of work?
又是一个周一，你正在为你的老板Lumbergh努力工作。为什么不玩Emacs的类似zork的文本冒险游戏来让你的大脑从单调的工作中解脱出来呢?

But seriously, yes, there are both games and quirky playthings in Emacs. Some you have probably heard of or played before. The only thing they have in common is that most of them were added a long time ago: some are rather odd inclusions (as you'll see below) and others were clearly written by bored employees or graduate students. What they all have in common is a whimsy and a casualness that I rarely see in Emacs today. Emacs is Serious Business now in a way that it probably wasn't back in the 1980s when some of these games were written.
但说真的，Emacs中既有游戏，也有古怪的玩物。有些你可能听过或玩过。它们唯一的共同点是，它们中的大多数都是很久以前添加的:有些是相当奇怪的包含(如您将在下面看到的)，而其他的显然是由无聊的员工或研究生编写的。它们的共同之处在于一种奇思妙想和随意性，这在今天的Emacs中是很少见的。Emacs现在是一个严肃的行业，在某种程度上，它可能并不是在20世纪80年代那些游戏被编写出来的时候。

** Tower of Hanoi
**河内塔
:PROPERTIES:
属性:
:CUSTOM_ID: tower-of-hanoi
:CUSTOM_ID tower-of-hanoi
:END:
结束:

The [[https://en.wikipedia.org/wiki/Tower_of_Hanoi][Tower of Hanoi]] is an ancient mathematical puzzle game and one that is probably familiar to some of us as it is often used in Computer Science as a teaching aid because of its recursive and iterative solutions.
[[https://en.wikipedia.org/wiki/Tower_of_Hanoi][河内之塔]]是一款古老的数学益智游戏，我们有些人可能很熟悉它，因为它的递归和迭代解决方案经常被用作计算机科学的教学辅助工具。

[[/static/uploads/hanoi.png]]
[[/静态/上传/ hanoi.png]]

In Emacs there are three commands you can run to trigger the Tower of Hanoi puzzle: =M-x hanoi= with a default of 3 discs; =M-x hanoi-unix= and =M-x hanoi-unix-64= uses the unix timestamp, making a move each second in line with the clock, and with the latter pretending it uses a 64-bit clock.
在Emacs中，您可以运行三个命令来触发河内塔谜题:=M-x Hanoi =默认为3个磁盘;=M-x hanoi-unix=和=M-x hanoi-unix-64=使用unix时间戳，每秒钟根据时钟移动一次，而后者假装使用64位时钟。

The Tower of Hanoi implementation in Emacs dates from the mid 1980s --- an awful long time ago indeed. There are a few Customize options (=M-x customize-group RET hanoi RET=) such as enabling colorized discs. And when you exit the Hanoi buffer or type a character you are treated to a sarcastic goodbye message (see above.)
Emacs中河内塔的实现可以追溯到20世纪80年代中期——确实是一个可怕的很久以前。有一些自定义选项(=M-x自定义组RET hanoi RET=)，如启用彩色光盘。当你离开河内缓冲区或输入一个字符，你会收到一个讽刺的告别信息(见上文)。

** 5x5
* * 5 x5
:PROPERTIES:
属性:
:CUSTOM_ID: x5
:CUSTOM_ID x5
:END:
结束:

[[/static/uploads/5x5.png]] The 5x5 game is a logic puzzle: you are given a 5x5 grid with a central cross already filled-in; your goal is to fill all the cells by toggling them on and off in the right order to win. It's not as easy as it sounds!
[[/静态/上传/ 5 x5。5x5的游戏是一个逻辑难题:你有一个5x5的网格，其中的十字已经填满了;你的目标是通过按正确的顺序开关它们来填充所有的单元格，从而获得胜利。这并不像听起来那么容易!

To play, type =M-x 5x5=, and with an optional digit argument you can change the size of the grid. What makes this game interesting is its rather complex ability to suggest the next move and attempt to solve the game grid. It uses Emacs's very own, and very cool, symbolic RPN calculator =M-x calc= (and in [[/article/fun-emacs-calc][Fun with Emacs Calc]] I use it to solve a simple problem.)
输入=M-x 5x5=，使用可选的数字参数可以改变网格的大小。这款游戏的有趣之处在于它的复杂功能，即建议下一步行动并尝试解决游戏网格。它使用了Emacs自己的非常酷的符号RPN计算器=M-x calc=(在[[/article/ Fun - Emacs -calc][Fun with Emacs calc]]中，我使用它来解决一个简单的问题。)

So what I like about this game is that it comes with a very complex solver -- really, you should read the source code with =M-x find-library RET 5x5= -- and a “cracker” that attempts to brute force solutions to the game.
所以我喜欢这个游戏的原因是它提供了一个非常复杂的解算器——实际上，你应该阅读源代码=M-x find-library RET 5x5=——和一个试图强力破解游戏的“破解者”。

Try creating a bigger game grid, such as =M-10 M-x 5x5=, and then run one of the =crack= commands below. The crackers will attempt to iterate their way to the best solution. This runs in real time and is fun to watch:
尝试创建一个更大的游戏网格，例如=M-10 M-x 5x5=，然后运行下面的=crack=命令之一。破坏者将尝试迭代他们的方式以获得最佳解决方案。这是运行在实时和有趣的观看:

- =M-x 5x5-crack-mutating-best= :: Attempt to crack 5x5 by mutating the best solution.
- =M-x 5x5-crack-mutating-best=::试图通过改变最佳解决方案来破解5x5。

- =M-x 5x5-crack-mutating-current= :: Attempt to crack 5x5 by mutating the current solution.
- =M-x 5x5-crack-mutating-current=::试图通过改变当前解决方案来破解5x5。

- =M-x 5x5-crack-randomly= :: Attempt to crack 5x5 using random solutions.
- =M-x 5x5-crack-random =::尝试使用随机解破解5x5。

- =M-x 5x5-crack-xor-mutate= :: Attempt to crack 5x5 by xoring the current and best solution.
- =M-x 5x5-crack-xor-mutate=::尝试通过xoring the current and best solution破解5x5。

** Text Animation
* *文本动画
:PROPERTIES:
属性:
:CUSTOM_ID: text-animation
:CUSTOM_ID:文本动画
:END:
结束:

You can display a fancy birthday present animation by running =M-x animate-birthday-present= and giving it your name. It looks rather cool!
您可以通过运行=M-x animation -birthday-present=并给出您的名字来显示一个奇特的生日礼物动画。它看起来很酷!

[[//imgs.xkcd.com/comics/real_programmers.png]]
[[/ /imgs.xkcd.com/comics/real_programmers.png]]

The =animate= package is also used by =M-x butterfly= command, a command added to Emacs as an homage to the [[http://www.xkcd.com][XKCD]] strip above. Of course the Emacs command in the strip is teeechnically not valid but the humor more than makes up for it.
=animate=包也由=M-x butterfly=命令使用，该命令添加到Emacs中，以向上面的[[http://www.xkcd.com][XKCD]]条致敬。当然，漫画中的Emacs命令在技术上是无效的，但它的幽默足以弥补这一点。

** Blackbox
* *黑箱
:PROPERTIES:
属性:
:CUSTOM_ID: blackbox
:CUSTOM_ID:黑箱
:END:
结束:

The objective of this game I am going to quote literally:
这款游戏的目标我将从字面上引用:

#+BEGIN_QUOTE
# + BEGIN_QUOTE
The object of the game is to find four hidden balls by shooting rays into the black box. There are four possibilities: 1) the ray will pass thru the box undisturbed, 2) it will hit a ball and be absorbed, 3) it will be deflected and exit the box, or 4) be deflected immediately, not even being allowed entry into the box.
游戏的目标是通过向黑盒子发射光线来找到四个隐藏的球。有四种可能:1)射线将通过盒子不受干扰，2)它将击中一个球并被吸收，3)它将偏转并退出盒子，或4)立即偏转，甚至不被允许进入盒子。
#+END_QUOTE
# + END_QUOTE

So, it's a bit like the [[https://en.wikipedia.org/wiki/Battleship_(game)][Battleship]] most of us played as kids but... for people with advanced degrees in physics?
所以，这有点像我们小时候玩的[[https://en.wikipedia.org/wiki/Battleship_(游戏)][Battleship]]，但是……物理专业高学历的人?

It's another game that was added back in the 1980s. I suggest you read the extensive documentation on how to play by typing =C-h f blackbox=.
这是另一款添加于20世纪80年代的游戏。我建议你阅读大量关于如何通过键入=C-h f blackbox=来玩游戏的文档。

** Bubbles
* *泡沫
:PROPERTIES:
属性:
:CUSTOM_ID: bubbles
:CUSTOM_ID:泡沫
:END:
结束:

[[/static/uploads/bubbles.png]]
[[/静态/上传/ bubbles.png]]

The =M-x bubbles= game is rather simple: you must clear out as many “bubbles” as you can in as few moves as possible. When you remove bubbles the other bubbles drop and stick together. It's a fun game that, as an added bonus, comes with graphics if you use Emacs's GUI. It also works with your mouse.
=M-x bubble =游戏相当简单:你必须在尽可能少的移动中清除尽可能多的“泡泡”。当你移除气泡时，其他气泡会掉落并粘在一起。这是一款有趣的游戏，如果你使用Emacs的图形用户界面，它还会为你带来额外的好处。它也适用于你的鼠标。

You can configure the difficulty of the game by calling =M-x bubbles-set-game-<difficulty>= where =<difficulty>= is one of: =easy=, =medium=, =difficult=, =hard=, or =userdefined=. Furthermore, you can alter the graphics, grid size and colors using Customize: =M-x customize-group bubbles=.
您可以通过调用=M-x bubbles-set-game-<难度>= where =<难度>=是其中之一:=easy=， =medium=， =difficult=， =hard=， or =userdefined=。此外，您可以使用Customize: =M-x custom -group bubbles=来更改图形、网格大小和颜色。

For its simplicity and fun factor, this ranks as one of my favorite games in Emacs.
由于它的简单和有趣的因素，这是Emacs中我最喜欢的游戏之一。

** Fortune & Cookie
幸运饼干
:PROPERTIES:
属性:
:CUSTOM_ID: fortune-cookie
:CUSTOM_ID:签
:END:
结束:

I like the =fortune= command. Snarky, unhelpful and often sarcastic “advice” mixed in with literature and riddles brightens up my day whenever I launch a new shell.
我喜欢这个=fortune=命令。每当我推出一款新外壳时，夹杂着文学和谜语的刻薄、无益、常常带有讽刺意味的“建议”就会点亮我的一天。

Rather confusingly there are two packages in Emacs that does more-or-less the same thing: =fortune= and =cookie1=. The former is geared towards putting fortune cookie messages in email signatures and the latter is just a simple reader for the fortune format.
令人困惑的是，Emacs中有两个包或多或少做了相同的事情:=fortune=和=cookie1=。前者主要用于在电子邮件签名中添加幸运饼消息，而后者只是一个简单的财富格式阅读器。

Anyway, to use Emacs's =cookie1= package you must first tell it where to find the file by customizing the variable =cookie-file= with =customize-option RET cookie RET=.
无论如何，要使用Emacs的=cookie1=包，您必须首先通过自定义变量=cookie-file= with =customize-option RET cookie RET=来告诉它在哪里找到文件。

If you're on Ubuntu you will have to install the =fortune= package first. The files are found in the =/usr/share/games/fortunes/= directory.
如果你使用Ubuntu，你必须先安装=fortune=软件包。这些文件可以在=/usr/share/games/fortune /=目录中找到。

You can then call =M-x cookie= or, should you want to do this, find all matching cookies with =M-x cookie-apropos=.
然后您可以调用=M-x cookie=，或者，如果您希望这样做，查找所有与=M-x cookie-apropos=匹配的cookie。

** Decipher
* *破译
:PROPERTIES:
属性:
:CUSTOM_ID: decipher
:CUSTOM_ID:破译
:END:
结束:

This package perfectly captures the utilitarian nature of Emacs: it's a package to help you break simple substitution ciphers (like cryptogram puzzles) using a helpful user interface. You just know that -- more than twenty years ago -- someone really had a dire need to break a lot of basic ciphers. It's little things like this module that makes me overjoyed to use Emacs: a module of scant importance to all but a few people and, yet, should you need it -- there it is.
这个包完美地抓住了Emacs的实用本质:它是一个使用有用的用户界面帮助您打破简单替换密码(如密码谜题)的包。你只知道，二十多年前，有人确实迫切需要破解很多基本的密码。正是像这个模块这样的小事让我非常高兴地使用Emacs:除了少数人之外，这个模块对所有人来说都不重要，但是，如果您需要它，它就在那里。

So how do you use it then? Well, let's consider the “rot13” cipher: rotating characters by 13 places in a 26-character alphabet. It's an easy thing to try out in Emacs with =M-x ielm=, Emacs's REPL for [[/article/evaluating-elisp-emacs][Evaluating Elisp]]:
那么如何使用它呢?那么，让我们考虑一下“rot13”密码:在26个字符的字母表中，将字符旋转13个位置。这是一个简单的事情尝试在Emacs与=M-x ielm=， Emacs的REPL为[[/文章/评价- Elisp Emacs][评价Elisp]]:

#+BEGIN_EXAMPLE
*** Welcome to IELM 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh Type (describe-mode) for help.
ELISP> (rot13 "Hello, World")
"Uryyb, Jbeyq"
ELISP> (rot13 "Uryyb, Jbeyq")
"Hello, World"
ELISP>
#+END_EXAMPLE

Simply put, you rotate your plaintext 13 places and you get your ciphertext; you rotate is another 13 and you end up where you started. This is the sort of thing this package can help you solve.
简单地说，你把明文旋转13个位置，就得到了密文;你再旋转13次，就会回到开始的地方。这就是这个程序包可以帮助您解决的问题。

So how can the decipher module help us here? Well, create a new buffer =test-cipher= and type in your cipher text (in my case =Uryyb, Jbeyq=)
那么，解码模块如何帮助我们呢?那么，创建一个新的缓冲区=test-cipher=并输入您的密码文本(在我的例子中是=Uryyb, Jbeyq=)

[[/static/uploads/cipher.png]]
[[/静态/上传/ cipher.png]]

You're now presented with a rather complex interface. You can now place the point on any of the characters in the ciphertext on the purple line and guess what the character might be: Emacs will update the rest of the plaintext guess with your choices and tell you how the characters in the alphabet have been allocated thus far.
您现在面对的是一个相当复杂的接口。你现在可以把点的任何字符在密文紫色线,猜猜这个角色可能是:Emacs将更新其他的明文,猜你的选择和告诉你字母表中的人物是迄今为止的分配。

You can then start winnowing down the options using various helper commands to help infer which cipher characters might correspond to which plaintext character:
然后，您可以使用各种辅助命令开始筛选选项，以帮助推断哪些密码字符可能对应于哪些明文字符:

- =D= :: Shows a list of digrams (two-character combinations from the cipher) and their frequency
- =D=::显示数字符号(来自密码的两个字符组合)及其频率的列表

- =F= :: Shows the frequency of each ciphertext letter
- =F=::表示每个密文字母的频率

- =N= :: Shows adjacency of characters. I am not entirely sure how this works.
- =N=::显示字符的邻接。我不完全确定这是怎么回事。

- =M= and =R= :: Save and restore a checkpoint, allowing you to branch your work and explore different ways of cracking the cipher.
- =M=和=R=::保存和恢复一个检查点，允许您分支您的工作和探索破解密码的不同方法。

All in all, for such an esoteric task, this package is rather impressive! If you regularly solve cryptograms maybe this package can help?
总而言之，对于这样一个深奥的任务，这个包是相当令人印象深刻的!如果你经常破解密码，也许这个程序包能帮上忙?

** Doctor
* *医生
:PROPERTIES:
属性:
:CUSTOM_ID: doctor
:CUSTOM_ID:医生
:END:
结束:

[[/static/uploads/doctor.png]]
[[/静态/上传/ doctor.png]]

Ah, the Emacs doctor. Based on the original [[https://en.wikipedia.org/wiki/ELIZA][ELIZA]] the “Doctor” tries to psychoanalyze what you say and attempts to repeat the question back to you. Rather fun, for a few minutes, and one of the more famous Emacs oddities. You can run it with =M-x doctor=.
Emacs医生。基于最初的[[https://en.wikipedia.org/wiki/ELIZA][ELIZA]]，“医生”试图对你说的话进行心理分析，并试图把问题复述给你。这几分钟相当有趣，是Emacs中最著名的怪事之一。您可以使用=M-x doctor=运行它。

** Dunnet
* * Dunnet
:PROPERTIES:
属性:
:CUSTOM_ID: dunnet
:CUSTOM_ID dunnet
:END:
结束:

Emacs's very own Zork-like text adventure game. To play it, type =M-x dunnet=. It's rather good, if short, but it's another rather famous Emacs game that too few have actually played through to the end.
Emacs的非常自己的佐克一样的文本冒险游戏。要玩这个游戏，输入=M-x dunnet=。这是一款相当不错的游戏，虽然时间不长，但它是另一款非常著名的Emacs游戏，很少有人真正玩到最后。

If you find yourself with time to kill between your TPS reports then it's a great game with a built-in “boss screen” as it's text-only.
如果你发现自己有时间打发你的TPS报告，那么这是一个伟大的游戏，内置“老板屏幕”，因为它是纯文本。

Oh, and, don't try to eat the CPU card :)
哦，还有，不要试图吃掉CPU卡:)

** Gomoku
* *五子棋
:PROPERTIES:
属性:
:CUSTOM_ID: gomoku
:CUSTOM_ID:五子棋
:END:
结束:

[[/static/uploads/gomoku.png]]
[[/静态/上传/ gomoku.png]]

Another game written in the 1980s. You have to connect 5 squares, tic-tac-toe style. You can play against Emacs with =M-x gomoku=. The game also supports the mouse, which is rather handy. You can customize the group =gomoku= to adjust the size of the grid.
另一款写于20世纪80年代的游戏。你必须连接5个方块，井字游戏风格。您可以使用=M-x gomoku=来对抗Emacs。游戏还支持鼠标，非常方便。您可以自定义group =gomoku=来调整网格的大小。

** Game of Life
人生的游戏
:PROPERTIES:
属性:
:CUSTOM_ID: game-of-life
:CUSTOM_ID:中
:END:
结束:

[[https://en.wikipedia.org/wiki/Conway's_Game_of_Life][Conway's Game of Life]] is a famous example of cellular automata. The Emacs version comes with a handful of starting patterns that you can (programmatically with elisp) alter by adjusting the =life-patterns= variable.
[[https://en.wikipedia.org/wiki/Conway's _game_of_life][Conway's Game of Life]]是细胞自动机的一个著名例子。Emacs版本提供了一些启动模式，您可以(通过elisp编程)通过调整=life-patterns=变量来更改这些模式。

You can trigger a game of life with =M-x life=. The fact that the whole thing, display code, comments and all, come in at less than 300 characters is also rather impressive.
你可以用=M-x life=触发一个life游戏。事实上，所有的东西，显示代码，注释和所有的东西，都少于300个字符，这也让人印象深刻。

** Pong, Snake and Tetris
乒乓，蛇和俄罗斯方块
:PROPERTIES:
属性:
:CUSTOM_ID: pong-snake-and-tetris
:CUSTOM_ID pong-snake-and-tetris
:END:
结束:

[[/static/uploads/tetris.png]]
[[/静态/上传/ tetris.png]]

These classic games are all implemented using the Emacs package =gamegrid=, a generic framework for building grid-based games like Tetris and Snake. The great thing about the gamegrid package is its compatibility with both graphical and terminal Emacs: if you run Emacs in a GUI you get fancy graphics; if you don't, you get simple ASCII art.
这些经典游戏都是使用Emacs包=gamegrid=实现的，这是一个用于构建基于网格的游戏(如俄罗斯方块和贪吃蛇)的通用框架。gamegrid包的伟大之处在于它与图形化和终端Emacs的兼容性:如果你在GUI中运行Emacs，你会得到精美的图形;如果你没有，你得到简单的ASCII艺术。

You can run the games by typing =M-x pong=, =M-x snake=, or =M-x tetris=.
你可以通过输入=M-x pong=， =M-x snake=，或=M-x tetris=来运行游戏。

The Tetris game in particular is rather faithfully implemented, having both gradual speed increase and the ability to slide blocks into place. And given you have the code to it, you can finally remove that annoying =Z=-shaped piece no one likes!
特别是俄罗斯方块游戏是相当忠实的执行，有逐渐增加的速度和能力滑块到位。如果你已经有了代码，你就可以移除那个讨厌的Z形块，没人喜欢它!

** Solitaire
* *孤独
:PROPERTIES:
属性:
:CUSTOM_ID: solitaire
:CUSTOM_ID:纸牌
:END:
结束:

[[/static/uploads/solitaire.png]]
[[/静态/上传/ solitaire.png]]

This is not the card game, unfortunately. But a peg-based game where you have to end up with just one stone on the board, by taking a stone (the =o=) and “jumping” over an adjacent stone into the hole (the =.=), removing the stone you jumped over in the process. Rinse and repeat until the board is empty.
不幸的是，这不是纸牌游戏。但在一个基于peg的游戏中，你必须在棋盘上留下一块石头，你可以选择一块石头(=o=)并“跳过”相邻的石头进入洞中(=.=)，在这个过程中移除你跳过的石头。冲洗并重复直到板是空的。

There is a handy solver built in called =M-x solitaire-solve= if you get stuck.
有一个方便的解决方案内置称为=M-x solitire -solve=如果你卡住了。

** Zone
* *区
:PROPERTIES:
属性:
:CUSTOM_ID: zone
:CUSTOM_ID:区
:END:
结束:

Another of my favorites. This time's it's a screensaver -- or rather, a series of screensavers.
我的另一个爱好。这一次它是一个屏幕保护程序——或者更确切地说，是一系列的屏幕保护程序。

Type =M-x zone= and watch what happens to your screen!
类型=M-x区域=，然后看看屏幕上发生了什么!

You can configure a screensaver idle time by running =M-x zone-when-idle= (or calling it from elisp) with an idle time in seconds. You can turn it off with =M-x zone-leave-me-alone=.
您可以通过运行=M-x zone-when-idle=(或从elisp调用它)来配置屏幕保护程序空闲时间，空闲时间以秒为单位。您可以使用=M-x zone-leave-me-alone=关闭它。

This one's guaranteed to make your coworkers freak out if it kicks off while they are looking.
如果它在你的同事注意的时候被踢开，你的同事肯定会抓狂。

** Multiplication Puzzle
* *乘法拼图
:PROPERTIES:
属性:
:CUSTOM_ID: multiplication-puzzle
:CUSTOM_ID multiplication-puzzle
:END:
结束:

[[/static/uploads/mpuz.png]]
[[/静态/上传/ mpuz.png]]

This is another brain-twisting puzzle game. When you run =M-x mpuz= you are given a multiplication puzzle where you have to replace the letters with numbers and ensure the numbers add (multiply?) up.
这是另一个脑筋急转弯的益智游戏。当您运行=M-x mpuz=时，您将面临一个乘法难题，您必须将字母替换为数字，并确保数字相加(相乘?)

You can run =M-x mpuz-show-solution= to solve the puzzle if you get stuck.
如果遇到难题，可以运行=M-x mpuz-show-solution=来解决。

** Miscellaneous
* *杂项
:PROPERTIES:
属性:
:CUSTOM_ID: miscellaneous
:CUSTOM_ID:杂项
:END:
结束:

There are more, but they're not the most useful or interesting:
还有更多，但它们不是最有用或最有趣的:

- You can translate a region into morse code with =M-x morse-region= and =M-x unmorse-region=.
-你可以将一个区域翻译成莫尔斯电码=M-x莫尔斯区域=和=M-x非莫尔斯区域=。
- The Dissociated Press is a very simple command that applies something like a random walk markov-chain generator to a body of text in a buffer and generates nonsensical text from the source body. Try it with =M-x dissociated-press=.
-解离Press是一个非常简单的命令，它将类似随机游动markov链生成器的东西应用到缓冲区中的文本体，并从源体生成无意义的文本。试一下=M-x解离-press=。
- The Gamegrid package is a generic framework for building grid-based games. So far only Tetris, Pong and Snake use it. It's called =gamegrid=.
- Gamegrid包是构建基于网格的游戏的通用框架。到目前为止，只有俄罗斯方块，乒乓和蛇使用它。它叫做= gamegrid =。
- The =gametree= package is a complex way of notating and tracking chess games played via email.
- =gametree=软件包是一个通过电子邮件记录和跟踪国际象棋游戏的复杂方法。
- The =M-x spook= command inserts random words (usually into emails) designed to confuse/overload the “NSA trunk trawler” -- and keep in mind this module dates from the 1980s and 1990s -- with various words the spooks are supposedly listening for. Of course, even ten years ago that would've seemed awfully paranoid and quaint but not so much any more...
- =M-x spook=命令插入随机单词(通常是在电子邮件中)，目的是混淆/超载“NSA主干拖网渔船”——记住，这个模块可以追溯到20世纪80年代和90年代——间谍们应该在监听各种单词。当然，即使是在十年前，这也会显得非常偏执和古怪，但现在已经不那么奇怪了……

** Conclusion
* *的结论
:PROPERTIES:
属性:
:CUSTOM_ID: conclusion
结论:CUSTOM_ID:
:END:
结束:

I love the games and playthings that ship with Emacs. A lot of them date from, well, let's just call a different era: an era where whimsy was allowed or perhaps even encouraged. Some are known classics (like Tetris and Tower of Hanoi) and some of the others are fun variations on classics (like blackbox) --- and yet I love that they ship with Emacs after all these years. I wonder if any of these would make it into Emacs's codebase today; well, they probably wouldn't --- they'd be relegated to the package manager where, in a clean and sterile world, they no doubt belong.
我喜欢Emacs附带的游戏和玩具。他们中的许多人，嗯，我们姑且称之为一个不同的时代:一个允许或甚至鼓励奇思妙想的时代。有些是已知的经典(如俄罗斯方块和河内塔)，有些是经典的有趣变种(如黑盒)——但我喜欢他们与Emacs这么多年后。我想知道这些是否会成为今天Emacs的代码库;嗯，它们可能不会——它们将被归入包管理器，而在一个干净而贫瘠的世界中，它们无疑属于包管理器。

There's a mandate in Emacs to move things not essential to the Emacs experience to ELPA, the package manager. I mean, as a developer myself, that does make sense, but... surely for every package removed and exiled to ELPA we chip away the essence of what defines Emacs?
Emacs要求将对Emacs体验不重要的内容转移到包管理器ELPA。我的意思是，作为一个开发者，这是有道理的，但是……当然，对于每一个被移出并流放到ELPA的包，我们都在蚕食Emacs的精髓。
