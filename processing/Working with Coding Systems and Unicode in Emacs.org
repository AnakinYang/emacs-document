#+TITLE: Working with Coding Systems and Unicode in Emacs
#+URL: https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2019年 06月 14日 星期五 18:27:58 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
* Working with Coding Systems and Unicode in Emacs
*在Emacs中使用编码系统和Unicode
:PROPERTIES:
属性:
:CUSTOM_ID: working-with-coding-systems-and-unicode-in-emacs
:CUSTOM_ID working-with-coding-systems-and-unicode-in-emacs
:CLASS: text-center
类:text-center
:END:
结束:

[[https://www.masteringemacs.org/static/img/fleuron2.gif]]
[[https://www.masteringemacs.org/static/img/fleuron2.gif]]

Dealing with unicode in Emacs is a daily task for me. Unfortunately, I don't have the luxury of sticking to just =UTF-8= or =iso-8859-1=; my work involves a lot of fidgeting with a lot of coding systems local to particular regions, so I need a flexible editor that has the right defaults that will cover my most common use-cases. Unsurprisingly, Emacs is more than capable of fulfilling that role.
在Emacs中处理unicode是我每天的任务。不幸的是，我不能仅仅坚持=UTF-8=或=iso-8859-1=;我的工作涉及到对许多特定区域的编码系统的大量摆弄，所以我需要一个灵活的编辑器，它具有正确的默认设置，可以覆盖我最常用的用例。毫不奇怪，Emacs完全有能力胜任这一角色。

Emacs has facilities in place for changing the coding system for a variety of things, such as processes, buffers and files. You can also force Emacs to invoke a command with a certain coding system, a concept I will get to in a moment.
Emacs提供了一些工具，用于更改各种事物的编码系统，比如进程、缓冲区和文件。您还可以强制Emacs使用特定的编码系统调用命令，稍后我将介绍这个概念。

The most important change (for me, anyway) is to force Emacs to default to =UTF-8=. It's practically a standard, at least in the West, as it is dominant on the Web; has a one-to-one mapping with ASCII; and is flexible enough to represent any unicode character, making it a world-readable format. But enough nattering about that. The biggest issue is convincing Emacs to treat files as UTF-8 by default, when no information in the file explicitly says it is.
(对我来说)最重要的更改是强制Emacs默认为=UTF-8=。它实际上是一个标准，至少在西方是这样，因为它在网络上占主导地位;与ASCII有一对一的映射;它足够灵活，可以表示任何unicode字符，使其成为世界可读的格式。但这已经是老生常谈了。最大的问题是说服Emacs在默认情况下将文件视为UTF-8，因为文件中没有明确说明它是UTF-8。

I use the following code snippet to enforce UTF-8 as the default coding system for all files, comint processes and buffers. You're free to replace =utf-8= below with your own preferred coding system.
我使用以下代码片段强制将UTF-8作为所有文件、comint进程和缓冲区的默认编码系统。您可以使用自己喜欢的编码系统替换=utf-8= below。

#+BEGIN_SRC lisp
# + BEGIN_SRC口齿不清
(prefer-coding-system 'utf-8)
(prefer-coding-system的utf - 8)
(set-default-coding-systems 'utf-8)
(set-default-coding-systems的utf - 8)
(set-terminal-coding-system 'utf-8)
(set-terminal-coding-system的utf - 8)
(set-keyboard-coding-system 'utf-8)
(set-keyboard-coding-system的utf - 8)
;; backwards compatibility as default-buffer-file-coding-system
;;作为默认缓冲文件编码系统的向后兼容性
;; is deprecated in 23.2.
;;在23.2中被弃用。
(if (boundp 'buffer-file-coding-system)
(如果(boundp buffer-file-coding-system)
(setq-default buffer-file-coding-system 'utf-8)
(setq-default buffer-file-coding-system utf - 8)
(setq default-buffer-file-coding-system 'utf-8))
(setq default-buffer-file-coding-system utf - 8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
;;首先将剪贴板输入视为UTF-8字符串;然后复合文本，等等。
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
# + END_SRC

Once evaluated, Emacs will treat new files, buffers, processes, and so on as though they are UTF-8. Emacs will *still* use a different coding system if the file has a file-local variable like this =-*- coding: euc-tw -*-= near the top of the file. (See =48.2.4 Local Variables in Files= in the Emacs manual.)
一旦求值，Emacs将处理新文件、缓冲区、进程等，就好像它们是UTF-8一样。如果文件有一个像这样的文件本地变量=-*- coding: euc-tw -*-=接近文件顶部，Emacs将*仍然*使用不同的编码系统。(见=48.2.4文件中的局部变量= Emacs手册)

OK, so Emacs will default to UTF-8 for everything. That's great, but not everything is in UTF-8; how do you deal with cases where it isn't? How do you make an exception to the proverbial rule? Well, Emacs has got it covered. The command =M-x universal-coding-system-argument=, bound to the handy =C-x RET c=, takes as an argument the coding system you want to use, and a command to execute it with. That makes it possible to open files, shells or run Emacs commands as though you were using a different coding system. Very, very useful. This command is a must-have if you have to deal with stuff encoded in strange coding systems.
Emacs会默认为UTF-8。这很好，但并不是所有的东西都是UTF-8;你如何处理不是这样的情况?你如何打破这个众所周知的规则?Emacs已经解决了这个问题。与方便的= c -x RET c=绑定的命令=M-x通用编码系统-参数=，将您希望使用的编码系统作为参数，并使用命令执行它。这使得打开文件、shell或运行Emacs命令成为可能，就像使用不同的编码系统一样。非常,非常有用。如果您必须处理用奇怪的编码系统编码的内容，那么这个命令是必需的。

One problem with the universal coding system argument is that it only cares about Emacs's settings, not those of your shell or system. That's a problem, because tools like Python use the environment variable =PYTHONIOENCODING= to set the coding system for the Python interpreter.
通用编码系统参数的一个问题是，它只关心Emacs的设置，而不关心shell或系统的设置。这是一个问题，因为像Python这样的工具使用环境变量=PYTHONIOENCODING=来设置Python解释器的编码系统。

I have written the following code that advises the =universal-coding-system-argument= function so it also, temporarily for just that command, sets a user-supplied list of environment variables to the coding system.
我编写了下面的代码，它建议使用=universal- codingsystem -argument=函数，因此它也临时地为编码系统设置用户提供的环境变量列表。

#+BEGIN_SRC lisp
# + BEGIN_SRC口齿不清
(defvar universal-coding-system-env-list '("PYTHONIOENCODING")
(defvar universal-coding-system-env-list”(“PYTHONIOENCODING”)
"List of environment variables \[universal-coding-system-argument] should set")
环境变量列表[universal-coding-system-argument]

(defadvice universal-coding-system-argument (around provide-env-handler activate)
(defadvice通用编码系统参数(围绕提供-env-handler激活)
"Augments \[universal-coding-system-argument] so it also sets environment variables
增加[通用编码系统参数]，所以它也设置环境变量

Naively sets all environment variables specified in
天真地设置所有指定的环境变量
`universal-coding-system-env-list' to the literal string
' universal-coding-system-env-list'到文字字符串
representation of the argument `coding-system'.
参数“编码系统”的表示。

No guarantees are made that the environment variables set by this advice support
不能保证这个通知设置的环境变量得到支持
the same coding systems as Emacs."
与Emacs相同的编码系统。”
(let ((process-environment (copy-alist process-environment)))
((流程-环境(复制-流程-环境)))
(dolist (extra-env universal-coding-system-env-list)
(dolist (extra-env universal-coding-system-env-list)
(setenv extra-env (symbol-name (ad-get-arg 0))))
(字符串输入)
ad-do-it))
广告的背上)
#+END_SRC
# + END_SRC

Insert the code into your emacs file and evaluate it, and now Emacs will also set the environment variables listed in =universal-coding-system-env-list=. One important thing to keep in mind is that Python and Emacs do not share a one-to-one correspondence of coding systems. There will probably be instances where obscure coding systems exist in one and not the other, or that the spelling or punctuation differ; the mapping of such names is left as an exercise to the reader.
将代码插入emacs文件并对其进行计算，现在emacs还将设置在=universal- codingsystem -env-list=中列出的环境变量。需要记住的重要一点是，Python和Emacs并不共享编码系统的一对一对应关系。可能会出现这样的情况，一个系统中存在模糊的编码系统，而另一个系统中不存在，或者拼写或标点符号不同;这些名称的映射留给读者作为练习。
