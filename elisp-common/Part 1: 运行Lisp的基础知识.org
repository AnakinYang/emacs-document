#+TITLE: Part 1: 运行Lisp的基础知识
#+URL: http://dantorop.info/project/emacs-animation/lisp1.html
#+AUTHOR: lujun9972
#+TAGS: elisp-common
#+DATE: [2020年 02月 10日 星期一 10:09:51 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
* 输入 =M-x ielm= 进入交互式Lisp模式
:PROPERTIES:
:CUSTOM_ID: type-m-x-ielm-to-get-into-the-interactive-lisp-mode
:END:

你应该看到类似这样的东西:

#+BEGIN_EXAMPLE
  ,*** Welcome to IELM *** Type (describe-mode) for help.
  ELISP>
#+END_EXAMPLE

* 来测试一下
:PROPERTIES:
:CUSTOM_ID: to-test-it-out
:END:

在引号中输入一个数字或一些文本，它应该会回显给你:

#+BEGIN_EXAMPLE
ELISP> 23
23
ELISP> "testing"
"testing"
ELISP>
#+END_EXAMPLE

* 使用=setq=设置变量
:PROPERTIES:
:CUSTOM_ID: setting-variables-with-setq
:END:

#+BEGIN_EXAMPLE
ELISP> (setq foo 25)
25
ELISP> (+ foo 1)
26
ELISP> foo
25
ELISP> (setq foo (+ foo 1))
26
ELISP> foo
26
ELISP>
#+END_EXAMPLE

* 使用 =while= 循环(from scratch)
:PROPERTIES:
:CUSTOM_ID: looping-with-while-from-scratch
:END:

#+BEGIN_EXAMPLE
ELISP> (setq foo 10)
10
ELISP> (while (> foo 0)
(insert "testing")
(newline)
(setq foo (- foo 1)))
nil
ELISP> testing
testing
testing
testing
testing
testing
testing
testing
testing
testing
#+END_EXAMPLE

* 使用=dotimes=循环打印 
:PROPERTIES:
:CUSTOM_ID: printing-with-loops-within-loops-with-dotimes
:END:

#+BEGIN_EXAMPLE
ELISP> (dotimes (outer-count 10)
(dotimes (inner-count outer-count)
(insert "?"))
(insert "! "))
nil
ELISP> ! ?! ??! ???! ????! ?????! ??????! ???????! ????????! ?????????!
#+END_EXAMPLE

* 请求答复
:PROPERTIES:
:CUSTOM_ID: asking-for-a-response
:END:

#+BEGIN_EXAMPLE
ELISP> (setq foo (read))
#+END_EXAMPLE

* 使用 =defun=
:PROPERTIES:
:CUSTOM_ID: using-defun
:END:

#+BEGIN_EXAMPLE
ELISP> (defun repeater (num-times print-what)
(dotimes (counter num-times)
(insert print-what)))
repeater
ELISP> (repeater 10 "!?")
nil
ELISP> !?!?!?!?!?!?!?!?!?!?
#+END_EXAMPLE

要在 =ielm= 外部运行 =defun= 或其他Lisp，请输入 =M-:= 会在屏幕底部显示Lisp提示符，然后输入所需的Lisp。按向上箭头键查找以前键入的命令。

如果Emacs报告了一个错误，您将看到一个 =Backtrace= buffer出现，它的顶部一行写着 =Debugger entered=. 键入 =q= 退出，然后重试。
