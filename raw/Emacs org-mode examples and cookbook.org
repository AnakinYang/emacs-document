#+TITLE: Emacs org-mode examples and cookbook
#+URL: http://ehneilsen.net/notebook/orgExamples/org-examples.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 02月 14日 星期三 10:32:08 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


* 1 Introduction
* 1介绍
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1
:CUSTOM_ID sec-1
:END:
结束:

This document provides examples of different things that can be done
本文档提供了可以执行的不同操作的示例
in =emacs= =org-mode= files. This is *not* intended to be a
在=emacs= =组织模式=文件。这“不是”打算成为一个
tutorial. The examples should provide a clue of what you need to look
教程。这些示例应该提供了您需要查看的内容的线索
up in the [[http://orgmode.org/#docs][org-mode manual]].
在[[http://orgmode.org/#docs][org-mode手册]]中。

* 2 Header
* 2头
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2
:CUSTOM_ID sec-2
:END:
结束:

The first set of lines of an =org-mode= file, each starting with =#+=,
=org-mode=文件的第一组行，每一行以=#+=开头，
configure =org-mode='s interpretation of the remainder of the file.
configure =org-mode=对文件其余部分的解释。

** 2.1 General metadata
** 2.1通用元数据
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-1
:CUSTOM_ID sec-2-1
:END:
结束:

An initial group sets the metadata used in any title pages, headers,
初始组设置任何标题页、标题、
footers, etc. used by the various exporters:
各出口商使用的页脚等:

#+BEGIN_EXAMPLE
#+TITLE: Emacs org-mode examples
#+AUTHOR: Eric H. Neilsen, Jr.
#+EMAIL: neilsen@fnal.gov
#+END_EXAMPLE

** 2.2 Common export parameters
** 2.2常用的导出参数
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-2
:CUSTOM_ID sec-2-2
:END:
结束:

Configue the =org-mode= tags for forcing inclusion of exclusion of
设置=org-mode=标签，强制包含排除
sections in exported documents
导出文件中的部分

#+BEGIN_EXAMPLE
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+END_EXAMPLE

Additional options handle interpretation of special characters in the
中的特殊字符的解释
buffer, numbering of headings, etc.
缓冲区、标题编号等。

#+BEGIN_EXAMPLE
#+OPTIONS: H:2 num:nil toc:nil n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+END_EXAMPLE

** 2.3 =emacs= options
** 2.3 =emacs=选项
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-3
:CUSTOM_ID sec-2-3
:END:
结束:

THE =STARTUP= keyword sets how the buffer is displayed when the file
=STARTUP=关键字设置文件显示缓冲区的方式
is opened in =emacs=:
在=emacs=:中打开

#+BEGIN_EXAMPLE
#+STARTUP: showall
#+END_EXAMPLE

** 2.4 HTML export options
** 2.4 HTML导出选项
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-4
:CUSTOM_ID sec-2-4
:END:
结束:

A few other are used exclusively by the =html= exporter:
其他一些是专门用于=html=出口商:

#+BEGIN_EXAMPLE
#+LANGUAGE: en
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js
#+LINK_HOME: http://ehneilsen.net
#+LINK_UP: http://ehneilsen.net/notebook
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/notebook.css" />
#+END_EXAMPLE

The =LANGUAGE= keyword sets the =lang= option in the =html=
关键字=LANGUAGE=设置=html=中的=lang=选项
declaration.
声明。

The =INFOJS_OPT= keyword configures the [[http://orgmode.org/manual/JavaScript-support.html][org-info.js]], javascript used
=INFOJS_OPT=关键字配置[[http://orgmode.org/manual/JavaScript-support.html][org-info.js]]，使用javascript
to assist navigation of =org-mode= generated pages.
帮助导航=org-mode=生成的页面。

** 2.5 LaTeX export options
** 2.5乳胶出口选项
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-5
:CUSTOM_ID sec-2-5
:END:
结束:

The LaTeX class and any LaTeX commands to be included at the head of
的头部包含LaTeX类和任何LaTeX命令
exported LaTeX files. For example, on my laptop the header looks like this:
乳胶出口文件。例如，在我的笔记本电脑的标题看起来像这样:

#+BEGIN_EXAMPLE
#+LaTeX_CLASS: smarticle
#+LaTeX_HEADER: pdfmapfile{/home/neilsen/texmf/fonts/map/dvips/libertine/libertine.map}
#+LaTeX_HEADER: usepackage[ttscale=.875]{libertine}
#+LaTeX_HEADER: usepackage{sectsty}
#+LaTeX_HEADER: sectionfont{normalfontscshape}
#+LaTeX_HEADER: subsectionfont{normalfontitshape}
#+END_EXAMPLE

It looks a little different in my account on the DES cluster:
它看起来有点不同，在我的帐户DES集群:

#+BEGIN_EXAMPLE
#+LaTeX_CLASS: smarticle
#+LaTeX_HEADER: pdfmapfile{/home/s1/neilsen/texmf/fonts/map/dvips/libertine/libertine.map}
#+LaTeX_HEADER: usepackage{sectsty}
#+LaTeX_HEADER: usepackage{libertine}
#+LaTeX_HEADER: usepackage[T1]{fontenc}
#+LaTeX_HEADER: sectionfont{normalfontscshape}
#+LaTeX_HEADER: subsectionfont{normalfontitshape}
#+END_EXAMPLE

Of course, LaTeX should be installed, and for the above to work, so
当然，乳胶应安装，并为上述工作，所以
must the libertine package, and the pdfmapfile must be set.
必须设置libertine包和pdfmapfile。

LaTeX installaction instruction can be found [[http://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages][here]].
LaTeX installaction指令可以找到[[http://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages][这里]]。

** 2.6 An example full header
** 2.6一个完整的标题示例
:PROPERTIES:
属性:
:CUSTOM_ID: sec-2-6
:CUSTOM_ID sec-2-6
:END:
结束:

A typical header that I use for =org-mode= files:
一个典型的头，我使用=组织模式=文件:

#+BEGIN_EXAMPLE
#+TITLE: Emacs org-mode examples
#+AUTHOR: Eric H. Neilsen, Jr.
#+EMAIL: neilsen@fnal.gov
#+LANGUAGE: en
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js
#+LINK_HOME: http://ehneilsen.net
#+LINK_UP: http://ehneilsen.net/notebook
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/notebook.css" />
#+LaTeX_CLASS: smarticle
#+LaTeX_HEADER: pdfmapfile{/home/neilsen/texmf/fonts/map/dvips/libertine/libertine.map}
#+LaTeX_HEADER: usepackage[ttscale=.875]{libertine}
#+LaTeX_HEADER: usepackage{sectsty}
#+LaTeX_HEADER: sectionfont{normalfontscshape}
#+LaTeX_HEADER: subsectionfont{normalfontitshape}
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:2 num:nil toc:nil n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP: showall
#+END_EXAMPLE

* 3 Setting per-file =emacs= variables
* 3设置每个文件=emacs=变量
:PROPERTIES:
属性:
:CUSTOM_ID: sec-3
:CUSTOM_ID sec-3
:END:
结束:

Follow the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][instructions in the emacs manual]]; begin the file with a
遵循[[http://www.gnu.org/software/emacs/manual/html_node/emacs/specifying-filables.html][emacs手册中的说明]];以a开头
line of the form:
表格的横线:

#+BEGIN_EXAMPLE
# -*- foo: "bar"; baz: "ham" -*-
#+END_EXAMPLE

For example, to set the "Up" and "Home" links for an org-mode file,
例如，要为一个组织模式文件设置“Up”和“Home”链接，
begin it with:
开始用:

#+BEGIN_EXAMPLE
# -*- org-html-link-up: "http://decam03.fnal.gov:8080/notes/neilsen/"; org-html-link-home: "http://ehneilsen.net" -*-
#+END_EXAMPLE

* 4 Subversion headers and introduction
* 4 Subversion头文件和介绍
:PROPERTIES:
属性:
:CUSTOM_ID: sec-4
:CUSTOM_ID sec-4
:END:
结束:

If you wish to have subversion keyword substitution, it can be done like this:
如果你希望有subversion关键字替换，可以这样做:

#+BEGIN_EXAMPLE
- Revision :: $Revision: 1.3 $
- Date :: $Date: 2013/05/17 15:19:53 $
- Source :: $Source: /Users/neilsen/Documents/CTIOTime/RCS/ctio_time.org,v $
#+END_EXAMPLE

The result looks like this:
结果是这样的:

-  Revision  :: $Revision: 1.3 $
-修改:$修改:1.3 $
-  Date  :: $Date: 2013/05/17 15:19:53 $
-日期:$日期:2013/05/17 15:19:53 $
-  Source  :: $Source: /Users/neilsen/Documents/CTIOTime/RCS/ctio_time.org,v $
-来源::$来源:/Users/neilsen/Documents/CTIOTime/RCS/ctio_time.org,v $

* 5 =ditaa= figures
* 5 =ditaa=图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-5
:CUSTOM_ID sec-5
:END:
结束:

** 5.1 About =ditaa=
** 5.1 About =ditaa=
:PROPERTIES:
属性:
:CUSTOM_ID: sec-5-1
:CUSTOM_ID sec-5-1
:END:
结束:

=dataa= generates figures from ASCII "art". Examples of =ditaa= syntax
=dataa=从ASCII“art”生成数字。=ditaa=语法的例子
can be found [[http://ditaa.sourceforge.net/][here]].
可以找到[[http://ditaa.sourceforge.net/][此处]]。

** 5.2 Simple boxes
** 5.2简单的盒子
:PROPERTIES:
属性:
:CUSTOM_ID: sec-5-2
:CUSTOM_ID sec-5-2
:END:
结束:

#+BEGIN_EXAMPLE
#+begin_src ditaa :file ditaa-simpleboxes.png
+---------+
| |
| Foo |
| |
+----+----+---+
|Bar |Baz |
| | |
+----+--------+
#+end_src
#+END_EXAMPLE

[[file:ditaa-simpleboxes.png]]
[[文件:ditaa-simpleboxes.png]]

** 5.3 Unseparated boxes
** 5.3未分隔的盒子
:PROPERTIES:
属性:
:CUSTOM_ID: sec-5-3
:CUSTOM_ID sec-5-3
:END:
结束:

#+BEGIN_EXAMPLE
#+begin_src ditaa :file ditaa-simpleboxes-unsep.png :cmdline -E
+---------+
| |
| Foo |
| |
+----+----+---+
|Bar |Baz |
| | |
+----+--------+
#+end_src
#+END_EXAMPLE

[[file:ditaa-simpleboxes-unsep.png]]
[[文件:ditaa-simpleboxes-unsep.png]]

** 5.4 Connected elements with colors
** 5.4颜色关联元素
:PROPERTIES:
属性:
:CUSTOM_ID: sec-5-4
:CUSTOM_ID sec-5-4
:END:
结束:

#+BEGIN_EXAMPLE
#+begin_src ditaa :file ditaa-seqboxes.png
+------+ +-----+ +-----+ +-----+
|{io} | |{d} | |{s} | |cBLU |
| Foo +---+ Bar +---+ Baz +---+ Moo |
| | | | | | | |
+------+ +-----+ +--+--+ +-----+
|
/----- | +------+
| | | | c1AB |
| Goo +------+---=--+ Shoo |
-----/ | |
+------+
#+end_src
#+END_EXAMPLE

[[file:ditaa-seqboxes.png]]
[[文件:ditaa-seqboxes.png]]

* 6 UML diagrams with =PlantUML=
* 6个带有=PlantUML=的UML图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-6
:CUSTOM_ID sec-6
:END:
结束:

** 6.1 Class diagrams
** 6.1类图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-6-1
:CUSTOM_ID sec-6-1
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+begin_src plantuml :file class_diagram.png
skinparam monochrome true
FitsHdu <|-- PrimaryHdu
FitsHdu <|-- ExtensionHdu

FitsHdu : header
FitsHdu : getHeaderKeyword()

ExtensionHdu <|-- ImageHdu
ImageHdu : image
ImageHdu : getPixel(row, column)

ExtensionHdu <|-- BinaryTableHdu
BinaryTableHdu : table
BinaryTableHdu : getRow(row)
BinaryTableHdu : getColumn(column)
#+end_src
#+END_EXAMPLE

gives this:
给:

[[file:class_diagram.png]]
[[文件:class_diagram.png]]

** 6.2 Sequences diagrams
** 6.2序列图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-6-2
:CUSTOM_ID sec-6-2
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+begin_src plantuml :file sequence_diagram.png
skinparam monochrome true
Foo -> Bar: synchronous call
Foo ->> Bar: asynchronous call
#+end_src
#+END_EXAMPLE

results in this:
结果:

[[file:sequence_diagram.png]]
[[文件:sequence_diagram.png]]

* 7 Symbolic algebra with =GNU calc=
* 7带=GNU calc=的符号代数
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7
:CUSTOM_ID sec-7
:END:
结束:

Full documentation on how to use =GNU calc= can be found
可以找到关于如何使用=GNU calc=的完整文档
[[http://www.gnu.org/software/emacs/manual/html_node/calc/Algebra.html][here]]. Same examples:
[[http://www.gnu.org/software/emacs/manual/html_node/calc/Algebra.html][这]]。同样的例子:

** 7.1 Calculation using a formula
** 7.1使用公式计算
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-1
:CUSTOM_ID sec-7-1
:END:
结束:

Starting with this:
开始:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :var x=5 :var y=2
2+a*x**y
#+END_SRC
#+END_EXAMPLE

If you place the cursor on the =#+BEGIN_SRC= and hit ctrl-c /twice/,
如果你把光标放在=#+BEGIN_SRC=上，然后按ctrl-c / 2次/，
it will produce a "results" section thus:
它将产生一个“结果”部分如下:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :var x=5 :var y=2
2+a*x**y
#+END_SRC

#+RESULTS:
: 25 a + 2
#+END_EXAMPLE

Which results in this if the exported document
如果导出的文档会导致什么结果

#+BEGIN_EXAMPLE
2+a*x**y
#+END_EXAMPLE

** 7.2 Exporting GNU calc input as well as output
** 7.2导出GNU calc的输入和输出
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-2
:CUSTOM_ID sec-7-2
:END:
结束:

If you want the original formula in the exported document, you need to
如果您想要导出文档中的原始公式，您需要这样做
add an =:exports both= flag, thus:
添加一个=:exports both= flag，这样:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
x*2+x=4
#+END_SRC

#+results:
: 3 x = 4
#+END_EXAMPLE

Which results in this:
结果是:

#+BEGIN_EXAMPLE
x*2+x=4
#+END_EXAMPLE

#+BEGIN_EXAMPLE
3 x = 4
#+END_EXAMPLE

** 7.3 Solving formula
7.3求解公式
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-3
:CUSTOM_ID sec-7-3
:END:
结束:

=GNU calc= has many additional capabilities. It can be used to solve formula:
=GNU calc=有许多附加的功能。可用于求解公式:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
fsolve(x*2+x=4,x)
#+END_SRC

#+results:
: x = 1.33333333333
#+END_EXAMPLE

which exports to:
出口:

#+BEGIN_EXAMPLE
fsolve(x*2+x=4,x)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
x = 1.33333333333
#+END_EXAMPLE

** 7.4 Solving systems of equations
** 7.4求解方程组
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-4
:CUSTOM_ID sec-7-4
:END:
结束:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc
fsolve([x + y = a, x - y = b],[x,y])
#+END_SRC

#+RESULTS:
: [x = a + (b - a) / 2, y = (a - b) / 2]
#+END_EXAMPLE

** 7.5 Inverting equations
** 7.5反相方程
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-5
:CUSTOM_ID sec-7-5
:END:
结束:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
finv(sqrt(x),x)
#+END_SRC

#+results:
: x^2
#+END_EXAMPLE

** 7.6 Differentials
* * 7.6差异
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-6
:CUSTOM_ID sec-7-6
:END:
结束:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
deriv(sqrt(x),x)
#+END_SRC

#+RESULTS:
: 0.5 / sqrt(x)
#+END_EXAMPLE

** 7.7 Integration
* * 7.7集成
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-7
:CUSTOM_ID sec-7-7
:END:
结束:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
integ(x**2,x)
#+END_SRC

#+RESULTS:
: x^3 / 3
#+END_EXAMPLE

** 7.8 Taylor series
** 7.8泰勒级数
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-8
:CUSTOM_ID sec-7-8
:END:
结束:

#+BEGIN_EXAMPLE
#+BEGIN_SRC calc :exports both
taylor(sin(x),x,6)
#+END_SRC

#+RESULTS:
: 0.0174532925199 x - 8.86096155693e-7 x^3 + 1.34960162314e-11 x^5
#+END_EXAMPLE

** 7.9 Applying a formula repeatedly in =org-mode=
** 7.9在=org-mode=中反复应用公式
:PROPERTIES:
属性:
:CUSTOM_ID: sec-7-9
:CUSTOM_ID sec-7-9
:END:
结束:

#+BEGIN_EXAMPLE
#+name: myformula
#+BEGIN_SRC calc
2+a*x**y
#+END_SRC

#+BEGIN_SRC calc :noweb yes :var x=5 :var y=2
<<myformula>>
#+END_SRC

#+RESULTS:
: 25 a + 2

#+BEGIN_SRC calc :noweb yes :var x=10 :var y=2
<<myformula>>
#+END_SRC

#+RESULTS:
: 100 a + 2
#+END_EXAMPLE

You can accomplish roughtly the same thing like this:
你可以大致完成这样的事情:

#+BEGIN_EXAMPLE
#+NAME: mynewformula
#+BEGIN_SRC calc
2+a*x**y
#+END_SRC

#+CALL: mynewformula(x=10,y=2)

#+RESULTS:
: 100 a + 2
#+END_EXAMPLE

#+BEGIN_EXAMPLE
2+a*x**y
#+END_EXAMPLE

#+BEGIN_EXAMPLE
100 a + 2
#+END_EXAMPLE

The first mechanism is somewhat more versatile, as you can combine
第一种机制更加灵活，您可以组合使用
multiple code blocks.
多个代码块。

* 8 Using =org-mode= as a spread sheet
* 8使用=org-mode=作为电子表格
:PROPERTIES:
属性:
:CUSTOM_ID: sec-8
:CUSTOM_ID sec-8
:END:
结束:

** 8.1 Define one column using a formula in terms of others
** 8.1根据一个公式定义一个列
:PROPERTIES:
属性:
:CUSTOM_ID: sec-8-1
:CUSTOM_ID sec-8-1
:END:
结束:

#+BEGIN_EXAMPLE
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
| 1.3 | 0.95 | 1.1119612 |
| 1.3 | 1.0 | 1.1704854 |
| 1.3 | 1.1 | 1.2875340 |
| 1.3 | 1.2 | 1.4045825 |
| 1.3 | 1.25 | 1.4631068 |
| 1.3 | 1.3 | 1.5216311 |
| 1.3 | 1.5 | 1.7557281 |
| 1.3 | 1.8 | 2.1068738 |
| 1.2 | 1.8 | 2.0080811 |
| 1.3 | 2.0 | 2.3409709 |
#+TBLFM: $3=$2*($1**0.6)
#+END_EXAMPLE

results in this in the output:
结果在输出:

| airmass   | zenith_seeing   | delivered_seeing   |
空气团|，天顶观测|，发射观测|
|-----------+------------------+---------------------|
| 1.3       | 0.95             | 1.1119612           |
| 1.3       | 1.0              | 1.1704854           |
| 1.3       | 1.1              | 1.2875340           |
| 1.3       | 1.2              | 1.4045825           |
| 1.3       | 1.25             | 1.4631068           |
| 1.3       | 1.3              | 1.5216311           |
| 1.3       | 1.5              | 1.7557281           |
| 1.3       | 1.8              | 2.1068738           |
| 1.2       | 1.8              | 2.0080811           |
| 1.3       | 2.1              | 2.4580194           |

To recalculate the column, put the cursor on the =#+TBLFM= column and
要重新计算列，请将光标放在=#+TBLFM=列上并
hit ctrl-c /twice/.
点击ctrl - c / /两倍。

** 8.2 Using an arbitrary code block as a table formula
** 8.2使用任意代码块作为表公式
:PROPERTIES:
属性:
:CUSTOM_ID: sec-8-2
:CUSTOM_ID sec-8-2
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+NAME: sampformula
#+BEGIN_SRC python :var angle=90 :var r=2 :exports none
from math import radians, cos
result = r*cos(radians(angle))
return result
#+END_SRC

| angle | r | x |
|-------+----+---------------|
| 30 | 10 | 8.66025403784 |
| 45 | 10 | 7.07106781187 |
| 60 | 10 | 5.0 |
#+TBLFM: $3='(org-sbe "sampformula" (angle $1) (r $2))
#+END_EXAMPLE

Results in this:
结果:

| angle   | r    | x               |
| | | | x r角
|---------+------+-----------------|
| 30      | 10   | 8.66025403784   |
| 45      | 10   | 7.07106781187   |
| 60      | 10   | 5.0             |

* 9 LaTeX equations
* 9 LaTeX公式
:PROPERTIES:
属性:
:CUSTOM_ID: sec-9
:CUSTOM_ID sec-9
:END:
结束:

** 9.1 Inline equations
** 9.1内联方程
:PROPERTIES:
属性:
:CUSTOM_ID: sec-9-1
:CUSTOM_ID sec-9-1
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
Foo bar (f(x) = frac{x^3}{n}) chicken checken.
#+END_EXAMPLE

renders as this:
显示为:

Foo bar (f(x) = frac{x^3}{n}) chicken checken.
傅酒吧(f (x) = frac {x ^ 3 {n)鸡肉检查。

** 9.2 Simple equations
** 9.2简单方程
:PROPERTIES:
属性:
:CUSTOM_ID: sec-9-2
:CUSTOM_ID sec-9-2
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
Our best estimate of F(nu) will be
[
hat{F}(nu) = frac{G(nu)}{H(nu)}.
]
#+END_EXAMPLE

renders as this:
显示为:

Our best estimate of F(ν) will be
我们的最佳估计F(ν)
[
hat{F}(nu) = frac{G(nu)}{H(nu)}.
时间过的很快
]

** 9.3 Aligned sets of equations
** 9.3对齐的方程组
:PROPERTIES:
属性:
:CUSTOM_ID: sec-9-3
:CUSTOM_ID sec-9-3
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
begin{eqnarray*}
hat{f}(x) & propto & sum_{nu} frac{|F(nu)H(nu)|^2}{|N(nu)|^2}
frac{G(nu)}{H(nu)} e^{frac{2 pi i nu x}{N}}\
& propto & sum_{nu} frac{|F(nu)|^2}{|N(nu)|^2} H(nu) H^*(nu)
frac{G(nu)}{H(nu)} e^{frac{2 pi i nu x}{N}}\
& propto & sum_{nu} H^*(nu) G(nu) e^{frac{2 pi i nu x}{N}}
end{eqnarray*}
#+END_EXAMPLE

renders as this:
显示为:

begin{eqnarray*}
开始{eqnarray *}
hat{f}(x) & propto & sum_{nu} frac{|F(nu)H(nu)|^2}{|N(nu)|^2}
帽子}{f (x) & propto & sum_{ν}压裂{| f(ν)H(ν)| ^ 2}{N(ν)| | ^ 2}
frac{G(nu)}{H(nu)} e^{frac{2 pi i nu x}{N}}\
& propto & sum_{nu} frac{|F(nu)|^2}{|N(nu)|^2} H(nu) H^*(nu)
& propto & sum_{ν}压裂{| F(ν)| ^ 2}{N(ν)| | ^ 2}H(ν)H ^ *(ν)
frac{G(nu)}{H(nu)} e^{frac{2 pi i nu x}{N}}\
& propto & sum_{nu} H^*(nu) G(nu) e^{frac{2 pi i nu x}{N}}
& propto & sum_{ν}H ^ *(ν)G(ν)e ^{压裂{2πνx} {N}}
end{eqnarray*}
结束{eqnarray *}

* 10 Inline formula
* 10行内公式
:PROPERTIES:
属性:
:CUSTOM_ID: sec-10
:CUSTOM_ID sec-10
:END:
结束:

=org-mode= can have automatically calcualted inline formula. For
=org-mode=可以自动计算内联公式。为
example, this:
的例子中,这个:

#+BEGIN_EXAMPLE
The scaling for 1.3 airmasses is src_R{format(1.3**(3.0/5.0),digits=3)} =1.17=

The scaling for 1.3 airmasses is src_calc{round(1.3**(3.0/5.0),4)} =1.1705=

The scaling for 1.3 airmasses is src_python{return "%4.1f" % (1.3**(3.0/5.0))} =1.2=
#+END_EXAMPLE

produces this:
生产:

The scaling for 1.3 airmasses is =1.17=
1.3个气团的比例是=1.17=

The scaling for 1.3 airmasses is =1.1705=
1.3个气团的比例是=1.1705=

The scaling for 1.3 airmasses is =1.2=
1.3个气团的比例是=1.2=

Calculations can be repeated by putting the cursor on the formula and
将光标放在公式上，可以重复计算
hitting ctrl-c twice.
按ctrl - c两次。

* 11 Figures and tables with captions and labels
* 11图和表，有标题和标签
:PROPERTIES:
属性:
:CUSTOM_ID: sec-11
:CUSTOM_ID sec-11
:END:
结束:

#+BEGIN_EXAMPLE
#+CAPTION: This was the ditaa example
#+LABEL: fig:ditaaex
#+ATTR_LaTeX: width=5cm,angle=90
file:ditaa-simpleboxes.png

This is some sample text in which I reference ref{fig:ditaaex}.
#+END_EXAMPLE

[[file:ditaa-simpleboxes.png]]
[[文件:ditaa-simpleboxes.png]]

Figure 6: This was the ditaa example
图6:这是ditaa示例

This is some sample text in which I reference ref{fig:ditaaex}.
这是我引用参考文献{fig:ditaaex}的一些示例文本。

(The reference works in LaTeX, but not html export.)
(该引用适用于LaTeX，但不适用于html导出。)

More elaborate LaTeX attributes can be used:
可以使用更复杂的乳胶属性:

#+BEGIN_EXAMPLE
#+ATTR_LaTeX: width=0.38textwidth wrap placement={r}{0.4textwidth}
#+END_EXAMPLE

Captions and references can also be applied to tables.
标题和引用也可以应用到表中。

* 12 Figures and tables spanning multiple text columns
*跨越多个文本列的12个图和表
:PROPERTIES:
属性:
:CUSTOM_ID: sec-12
:CUSTOM_ID sec-12
:END:
结束:

Images, plots, code listings, and tables often need to span multiple
图像、绘图、代码清单和表通常需要跨越多个空间
text columns to fit when exporting to multi-column latex styles. This
当导出到多列latex样式时，适合的文本列。这
can be done by preceeding the relevant block with
可以先做相应的区块吗
a =#+ATTR_LATEX: :float multicolumn= line, for example:
a =#+ATTR_LATEX::float multiolumn = line，例如:

#+BEGIN_EXAMPLE
#+CAPTION: This is a wide table
#+ATTR_LATEX: :float multicolumn
| A | B | C | D | E | F | G | H |
|---------+------------+---------+------------+---------+------------+---------+------------|
| foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle |
| foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle |
| foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle | foo bar | baz boggle |
#+END_EXAMPLE

or
或

#+BEGIN_EXAMPLE
#+CAPTION: Here is my python code.
#+ATTR_LATEX: :float multicolumn
#+BEGIN_SRC python
print "This is a longish line of code that needs to span multiple columns in a latex export"
#+END_SRC
#+END_EXAMPLE

* 13 Verbatim examples
* 13个逐字的例子
:PROPERTIES:
属性:
:CUSTOM_ID: sec-13
:CUSTOM_ID sec-13
:END:
结束:

Verbatim example code can be marked. For example, this:
可以标记逐字示例代码。例如,这个:

#+BEGIN_EXAMPLE
#+BEGIN_EXAMPLE
Last login: Mon Dec 2 08:44:25 on ttys000
argos:~ neilsen$ echo "foo"
foo
argos:~ neilsen$
#+END_EXAMPLE
#+END_EXAMPLE
# + END_EXAMPLE

results in this:
结果:

#+BEGIN_EXAMPLE
Last login: Mon Dec 2 08:44:25 on ttys000
argos:~ neilsen$ echo "foo"
foo
argos:~ neilsen$
#+END_EXAMPLE

* 14 Code examples
* 14代码示例
:PROPERTIES:
属性:
:CUSTOM_ID: sec-14
:CUSTOM_ID sec-14
:END:
结束:

Source code can be displayed using the native modes in =emacs=. For
源代码可以使用=emacs=中的本机模式显示。为
example, this:
的例子中,这个:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python
def times_two(x):
y = x*2
return y

print times_two(5)
#+END_SRC
#+END_EXAMPLE

produces this:
生产:

#+BEGIN_EXAMPLE
def times_two(x):
y = x*2
return y

print times_two(5)
#+END_EXAMPLE

* 15 Running code, returning raw output
* 15运行代码，返回原始输出
:PROPERTIES:
属性:
:CUSTOM_ID: sec-15
:CUSTOM_ID sec-15
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python :results output :exports both
def times_two(x):
y = x*2
return y

print times_two(5)
#+END_SRC

#+RESULTS:
: 10
#+END_EXAMPLE

produces this:
生产:

#+BEGIN_EXAMPLE
def times_two(x):
y = x*2
return y

print times_two(5)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
10
#+END_EXAMPLE

* 16 Running code, return =org-mode= tables
* 16运行代码，返回=org-mode=表
:PROPERTIES:
属性:
:CUSTOM_ID: sec-16
:CUSTOM_ID sec-16
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python :exports both
a = ('b', 200)
b = ('x', 10)
c = ('q', -42)
return (a, b, c)
#+END_SRC

#+RESULTS:
| b | 200 |
| x | 10 |
| q | -42 |
#+END_EXAMPLE

produces this:
生产:

#+BEGIN_EXAMPLE
a = ('b', 200)
b = ('x', 10)
c = ('q', -42)
return (a, b, c)
#+END_EXAMPLE

| b   | 200   |
| b | 200 |
| x   | 10    |
| x | 10 |
| q   | -42   |
| q | -42 |

By removing the =:exports both=, you can export just the code and not
通过删除=:exports both=，您可以只导出代码，而不导出代码
the output. By replaceing it with =:exports results=, you can export
输出。通过使用=:exports results=替换它，您可以导出
the output without the source.
没有源的输出。

* 17 Running code remotely
* 17远程运行代码
:PROPERTIES:
属性:
:CUSTOM_ID: sec-17
:CUSTOM_ID sec-17
:END:
结束:

Adding appropriate =:dir= parameters runs the code in other working
添加适当的=:dir=参数将在其他工作中运行代码
direcories, or even on remote machines:
目录，甚至远程机器:

#+BEGIN_EXAMPLE
#+BEGIN_SRC sh :results output :exports both
echo $PWD
echo $HOSTNAME
#+END_SRC

#+RESULTS:
: /Users/neilsen/Notebook/org/orgExamples
: argos.dhcp.fnal.gov

#+BEGIN_SRC sh :results output :exports both :dir /tmp
echo $PWD
echo $HOSTNAME
#+END_SRC

#+RESULTS:
: /private/tmp
: argos.dhcp.fnal.gov

#+BEGIN_SRC sh :results output :exports both :dir :dir /ssh:neilsen@decam03.fnal.gov:/home/neilsen
echo $PWD
echo $HOSTNAME
#+END_SRC

#+RESULTS:
: /home/neilsen
: decam03.fnal.gov
#+END_EXAMPLE

* 18 Running C code
* 18运行C代码
:PROPERTIES:
属性:
:CUSTOM_ID: sec-18
:CUSTOM_ID sec-18
:END:
结束:

C code is handled a little differently, as it must be compiled and run.
C代码的处理略有不同，因为它必须编译和运行。

This block:
这个块:

#+BEGIN_EXAMPLE
#+HEADERS: :includes <math.h> :flags -lm
#+HEADERS: :var x=1.0 :var y=4.0 :var z=10.0
#+BEGIN_SRC C :exports both
double pi = 4*atan(1);
double r, theta, phi;
r = sqrt(x*x+y*y+z*z);
theta = acos(z/r) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
phi = atan2(y,x) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
printf("%f %f %f", r, theta, phi);
#+END_SRC
#+END_EXAMPLE

Generates, compiles, and runs this C code:
生成，编译和运行这个C代码:

#+BEGIN_EXAMPLE
#include <math.h>

double x = 1.000000;
double y = 4.000000;
double z = 10.000000;
int main() {
double pi = 4*atan(1);
double r, theta, phi;
r = sqrt(x*x+y*y+z*z);
theta = acos(z/r) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
phi = atan2(y,x) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
printf("%f %f %f", r, theta, phi);
return 0;
}
#+END_EXAMPLE

which results in:
结果:

#+BEGIN_EXAMPLE
#+RESULTS:
: 10.816654 22.406871 75.963757
#+END_EXAMPLE

So the final result looks like this when evaluated and exported:
因此，最终的结果看起来是这样的评价和出口:

#+BEGIN_EXAMPLE
double pi = 4*atan(1);
double r, theta, phi;
r = sqrt(x*x+y*y+z*z);
theta = acos(z/r) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
phi = atan2(y,x) 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh urls_checker.sh 180.0/pi;
printf("%f %f %f", r, theta, phi);
#+END_EXAMPLE

#+BEGIN_EXAMPLE
10.816654 22.406871 75.963757
#+END_EXAMPLE

There is a trick to multiple includes: they must be passed as elisp lists, for example:
有一个技巧，多个包括:他们必须通过elisp列表，例如:

#+BEGIN_EXAMPLE
#+BEGIN_SRC C :includes '(<math.h> <time.h>)
#+END_EXAMPLE

* 19 Running java code
* 19运行java代码
:PROPERTIES:
属性:
:CUSTOM_ID: sec-19
:CUSTOM_ID sec-19
:END:
结束:

Java code can be evaluated as well, for example:
Java代码也可以评估，例如:

#+BEGIN_EXAMPLE
#+HEADERS: :classname HelloWorld :cmdline "-cp ."
#+begin_src java :results output :exports both
public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World");
}
}
#+end_src

#+RESULTS:
: Hello, World
#+END_EXAMPLE

This exports to:
出口:

#+BEGIN_EXAMPLE
public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World");
}
}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Hello, World
#+END_EXAMPLE

* 20 Margin notes in LaTeX
* 20个胶乳边注
:PROPERTIES:
属性:
:CUSTOM_ID: sec-20
:CUSTOM_ID sec-20
:END:
结束:

Margin notes can be generated for the latex export, but not in a way
可以为乳胶出口生成边注，但不是以某种方式生成
portable to other export methods (like html):
可移植到其他导出方法(如html):

#+BEGIN_EXAMPLE
#+BEGIN_LaTeX
marginpar{color{blue} tiny raggedright
vspace{18pt}
In the Molly 23 layout, not all tilings have the same numbers of
hexes (pointings); the offsets for each tiling can push different hexes into or
out of the footprint.}
#+END_LaTeX
#+END_EXAMPLE

The vspace help tweak the placement to put it next the text you want
vspace帮助调整位置，把它放在你想要的文本旁边
it next to.
它的旁边。

Note that you can use the same trick with figure. If you use the
注意，您可以对figure使用相同的技巧。如果你使用
=capt-of= latex package, you can even get the figure numbered
=cap -of= latex包，你甚至可以得到数字编号
correctly. For example,
正确。例如,

#+BEGIN_EXAMPLE
#+BEGIN_LATEX
marginpar{
includegraphics[width=marginparwidth]{test_img.png}
captionof{figure}{This is a test figure}label{testimg}
}
#+END_LATEX
#+END_EXAMPLE

If you have fiddled with the margins using the LaTeX =geometry=
如果你用LaTeX修改了页边距=geometry=
package, be sure to set the =marginparwidth= parameter in your
包中，请确保设置=marginparwidth=参数
=geometry= statement.
=几何=声明。

* 21 Querying a =PostgreSQL= database
*查询a =PostgreSQL=数据库
:PROPERTIES:
属性:
:CUSTOM_ID: sec-21
:CUSTOM_ID sec-21
:END:
结束:

Provided your account is configured with appropriate passwords, this:
如果你的帐户配置了适当的密码，这:

#+BEGIN_EXAMPLE
#+BEGIN_SRC sql :engine postgresql :exports results :cmdline -p 5443 -h des20.fnal.gov -U decam_reader -d decam_prd
SELECT date, ra, declination FROM exposure.exposure LIMIT 10
#+END_SRC
#+END_EXAMPLE

Results in this:
结果:

| date                            | ra           | declination   |
|日期| ra |赤纬|
|---------------------------------+--------------+---------------|
| 2013-06-04 21:48:01.54791+00    | 271.125446   | -31.316167    |
| 2013-06-04 21:48:38.329063+00   | 271.125446   | -31.316167    |
| 2013-04-25 00:09:21.976324+00   | 144.404229   | 15.058917     |
| 2013-01-11 03:16:40.700054+00   | 111.02375    | -1.490556     |
| 2013-03-17 19:36:44.482928+00   | 200.013333   | -20.65        |
| 2013-06-24 07:12:00.531216+00   | 9.5          | -43.998       |
| 2013-06-12 01:42:20.851991+00   | 269.261287   | -27.892739    |
| 2013-06-24 07:15:49.054427+00   | 9.5          | -43.998       |
| 2013-09-02 20:25:33.523124+00   | 50           | 0             |
| 2013-09-02 20:26:24.503093+00   | 50           | 0             |

* 22 Interacting with =R=
* 22与=R=交互
:PROPERTIES:
属性:
:CUSTOM_ID: sec-22
:CUSTOM_ID sec-22
:END:
结束:

** 22.1 Using an =org-mode= table as an R data frame
** 22.1使用=org-mode= table作为R数据帧
:PROPERTIES:
属性:
:CUSTOM_ID: sec-22-1
:CUSTOM_ID sec-22-1
:END:
结束:

If you have an =org-mode= table with a name:
如果你有一个=org-mode= table的名称:

#+BEGIN_EXAMPLE
#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
| 1.3 | 0.95 | 1.1119612 |
| 1.3 | 1.0 | 1.1704854 |
| 1.3 | 1.1 | 1.2875340 |
| 1.3 | 1.2 | 1.4045825 |
#+TBLFM: $3=$2*($1**0.6)
#+END_EXAMPLE

you can use it from within =R= code as a data frame:
你可以使用它从=R=代码作为一个数据帧:

#+BEGIN_EXAMPLE
#+begin_src R :results output :var delsee=delsee
summary(delsee)
#+end_src

#+RESULTS:
: airmass zenith_seeing delivered_seeing
: Min. :1.3 Min. :0.9500 Min. :1.112
: 1st Qu.:1.3 1st Qu.:0.9875 1st Qu.:1.156
: Median :1.3 Median :1.0500 Median :1.229
: Mean :1.3 Mean :1.0625 Mean :1.244
: 3rd Qu.:1.3 3rd Qu.:1.1250 3rd Qu.:1.317
: Max. :1.3 Max. :1.2000 Max. :1.405
#+END_EXAMPLE

** 22.2 Generate a plot in your document using =R=
** 22.2使用=R=在文档中生成一个绘图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-22-2
:CUSTOM_ID sec-22-2
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
| 1.3 | 0.95 | 1.1119612 |
| 1.3 | 1.0 | 1.1704854 |
| 1.3 | 1.1 | 1.2875340 |
| 1.3 | 1.2 | 1.4045825 |
#+TBLFM: $3=$2*($1**0.6)

#+begin_src R :exports both :results output graphics :var delsee=delsee :file delsee-r.png :width 400 :height 300
library(ggplot2)
p <- ggplot(delsee, aes(zenith_seeing, delivered_seeing))
p <- p + geom_point()
p
#+end_src

#+RESULTS:
file:delsee-r.png
#+END_EXAMPLE

Results in this:
结果:

| airmass   | zenith_seeing   | delivered_seeing   |
空气团|，天顶观测|，发射观测|
|-----------+------------------+---------------------|
| 1.3       | 0.95             | 1.1119612           |
| 1.3       | 1.0              | 1.1704854           |
| 1.3       | 1.1              | 1.2875340           |
| 1.3       | 1.2              | 1.4045825           |

#+BEGIN_EXAMPLE
library(ggplot2)
p <- ggplot(delsee, aes(zenith_seeing, delivered_seeing))
p <- p + geom_point()
p
#+END_EXAMPLE

[[file:delsee-r.png]]
[[file: delsee-r.png]]

** 22.3 Generating an =org-mode= table from an =R= data frame
** 22.3从=R=数据帧生成=org-mode=表
:PROPERTIES:
属性:
:CUSTOM_ID: sec-22-3
:CUSTOM_ID sec-22-3
:END:
结束:

The simple way is just to return the value of the data frame:
简单的方法就是返回数据帧的值:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :colnames yes
d <- data.frame(foo=c('a','b','n'), bar=c(1.0/3.0,22,32))
d
#+END_SRC

#+RESULTS:
| foo | bar |
|-----+-------------------|
| a | 0.333333333333333 |
| b | 22 |
| n | 32 |
#+END_EXAMPLE

To limit significant figures, use the =ascii= =R= package. For
要限制有效数字，使用=ascii= =R= package。为
example, this:
的例子中,这个:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :results output raw :exports both
d <- data.frame(foo=c('a','b','n'), bar=c(1.0/3.0,22,32))

library(ascii)
options(asciiType="org")
ascii(d,format=c('s','f'),digits=c(5,4),include.rownames=FALSE)
#+END_SRC

#+RESULTS:
| foo | bar |
|-----+---------|
| a | 0.3333 |
| b | 22.0000 |
| n | 32.0000 |
#+END_EXAMPLE

produces this:
生产:

#+BEGIN_EXAMPLE
d <- data.frame(foo=c('a','b','n'), bar=c(1.0/3.0,22,32))

library(ascii)
options(asciiType="org")
ascii(d,format=c('s','f'),digits=c(5,4),include.rownames=FALSE)
#+END_EXAMPLE

| foo   | bar       |
foo | bar |
|-------+-----------|
| a     | 0.3333    |
| a | 0.3333 |
| b     | 22.0000   |
| b | 22.0000 |
| n     | 32.0000   |
| n | 32.0000 |

* 23 Interacting with =python=
* 23与=python=交互
:PROPERTIES:
属性:
:CUSTOM_ID: sec-23
:CUSTOM_ID sec-23
:END:
结束:

** 23.1 Using an =org-mode= table in python
** 23.1在python中使用=org-mode=表
:PROPERTIES:
属性:
:CUSTOM_ID: sec-23-1
:CUSTOM_ID sec-23-1
:END:
结束:

#+BEGIN_EXAMPLE
#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
| 1.3 | 0.95 | 1.1119612 |
| 1.3 | 1.0 | 1.1704854 |
| 1.3 | 1.1 | 1.2875340 |
| 1.3 | 1.2 | 1.4045825 |
#+TBLFM: $3=$2*($1**0.6)

#+BEGIN_SRC python :var delsee=delsee :results output
print delsee
#+END_SRC

#+RESULTS:
: [[1.3, 0.95, 1.1119612], [1.3, 1.0, 1.1704854], [1.3, 1.1, 1.287534], [1.3, 1.2, 1.4045825]]
#+END_EXAMPLE

** 23.2 Plotting with python
** 23.2使用python绘图
:PROPERTIES:
属性:
:CUSTOM_ID: sec-23-2
:CUSTOM_ID sec-23-2
:END:
结束:

This:
这样的:

#+BEGIN_EXAMPLE
#+tblname: delsee
| airmass | zenith_seeing | delivered_seeing |
|---------+---------------+------------------|
| 1.3 | 0.95 | 1.1119612 |
| 1.3 | 1.0 | 1.1704854 |
| 1.3 | 1.1 | 1.2875340 |
| 1.3 | 1.2 | 1.4045825 |
#+TBLFM: $3=$2*($1**0.6)

#+BEGIN_SRC python :var fname="delseepy.png" :var delsee=delsee :results file
import matplotlib.pyplot as plt

x, y, z = zip(*delsee)

fig = plt.figure()
axes = fig.add_subplot(1,1,1)
axes.plot(y, z, marker='o')
fig.savefig(fname)

return fname
#+END_SRC

#+RESULTS:
file:delseepy.png
#+END_EXAMPLE

Results in this:
结果:

[[file:delseepy.png]]
[[文件:delseepy.png]]

* 24 Setting environment variables (like =PYTHONPATH=)
* 24设置环境变量(如=PYTHONPATH=)
:PROPERTIES:
属性:
:CUSTOM_ID: sec-24
:CUSTOM_ID sec-24
:END:
结束:

Create an =emacs-lisp= code block that looks like this:
创建一个=emacs-lisp=代码块，如下所示:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp
(setenv "PYTHONPATH" "/Users/neilsen/Development/obswatch-trunk/common/python")
#+END_SRC
#+END_EXAMPLE

Execute it, and it changes the environment accordingly.
执行它，它相应地更改环境。

Note that you can also append to environment variables like this:
注意，你也可以像这样附加环境变量:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp
(setenv "PYTHONPATH" (concat (getenv "PYTHONPATH") ":" (getenv "DQSTATS_DIR")))
#+END_SRC
#+END_EXAMPLE

* 25 Writing literate =python= code
* 25编写文字=python=代码
:PROPERTIES:
属性:
:CUSTOM_ID: sec-25
:CUSTOM_ID sec-25
:END:
结束:

** 25.1 Creating the high level structure of the file
** 25.1创建文件的高层结构
:PROPERTIES:
属性:
:CUSTOM_ID: sec-25-1
:CUSTOM_ID sec-25-1
:END:
结束:

Following the structure outlined in [[http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#module-structure][Code Like a Pythonista]], construct
按照[[http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#module-structure][类似Pythonista的代码]]中所概述的结构，构造
the python source file in sections:
python的源代码文件分为以下几部分:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python :noweb yes :tangle HelloWorld.py :exports none
"""This is a hello world example document"""

# imports
import sys
<<helloworld-main-imports>>

# constants

# exception classes

# interface functions

# classes
<<HelloWorld-defn>>

# internal functions & classes

<<helloworld-main>>

if __name__ == '__main__':
status = main()
sys.exit(status)
#+END_SRC
#+END_EXAMPLE

When =M-x org-babel-tangle= is run within =emacs=, the
当=M-x组织-babel-tangle=在=emacs=中运行时
=:tangle HelloWorld.py= line will cause it to generate a the file
=:纠结HelloWorld。将导致它生成一个文件
=HelloWorld.py= from the contents of the code blocks.
= HelloWorld。py=来自代码块的内容。

The bracketed lines (=helloworld-classes=, for example) are code
括号内的行(例如=helloworld-classes=)是代码
fragments that will be defined later. =org-mode= will automatically
稍后将定义的片段。= org-mode =会自动
substitute these blocks when createing the =HelloWorld.py= file.
在创建=HelloWorld时替换这些块。py =文件。

** 25.2 Generating functionality for =HelloWorld.py=
** 25.2为=HelloWorld.py=生成功能
:PROPERTIES:
属性:
:CUSTOM_ID: sec-25-2
:CUSTOM_ID sec-25-2
:END:
结束:

Define the =HelloWorld= class thus:
这样定义=HelloWorld= class:

#+BEGIN_EXAMPLE
#+NAME: HelloWorld-defn
#+BEGIN_SRC python
class HelloWorld(object):
def __init__(self, who):
self.who = who

def say_hello(self):
print "Hello %s" % self.who
#+END_SRC
#+END_EXAMPLE

In the org-mode document, it will look like this:
在组织模式的文件，它将看起来像这样:

#+BEGIN_EXAMPLE
class HelloWorld(object):
def __init__(self, who):
self.who = who

def say_hello(self):
print "Hello %s" % self.who
#+END_EXAMPLE

** 25.3 Generating a =main= function for =HelloWorld=
** 25.3为=HelloWorld=生成一个=main=函数
:PROPERTIES:
属性:
:CUSTOM_ID: sec-25-3
:CUSTOM_ID sec-25-3
:END:
结束:

It's usually a good idea to have an argument parser in =main=. Start
在=main=中使用参数解析器通常是一个好主意。开始
by creating a code block the performs the required imports:
通过创建一个代码块，执行所需的导入:

#+BEGIN_EXAMPLE
#+NAME: helloworld-main-imports
#+BEGIN_SRC python
from argparse import ArgumentParser
#+END_SRC
#+END_EXAMPLE

which comes out like this in the document:
在文件中是这样写的

#+BEGIN_EXAMPLE
from argparse import ArgumentParser
#+END_EXAMPLE

Then, define the =main= function itself:
然后，定义=main=函数本身:

#+BEGIN_EXAMPLE
#+NAME: helloworld-main
#+BEGIN_SRC python
def main():
parser = ArgumentParser(description="Say hi")
parser.add_argument("-w", "--who",
type=str,
default="world",
help="Who to say hello to")
args = parser.parse_args()

who = args.who

greeter = HelloWorld(who)
greeter.say_hello()

return 0
#+END_SRC
#+END_EXAMPLE

which comes out like this:
结果是这样的:

#+BEGIN_EXAMPLE
def main():
parser = ArgumentParser(description="Say hi")
parser.add_argument("-w", "--who",
type=str,
default="world",
help="Who to say hello to")
args = parser.parse_args()

who = args.who

greeter = HelloWorld(who)
greeter.say_hello()

return 0
#+END_EXAMPLE

** 25.4 Running main from bash
** 25.4从bash运行main
:PROPERTIES:
属性:
:CUSTOM_ID: sec-25-4
:CUSTOM_ID sec-25-4
:END:
结束:

Create a section to make it easy to run the generated code from within
创建一个部分，以便从内部轻松运行生成的代码
the orgmode document:
orgmode文档:

#+BEGIN_EXAMPLE
#+NAME: bashrun-helloworld
#+BEGIN_SRC sh :results output :exports none
python HelloWorld.py --w Eric 2>&1
true
#+END_SRC
#+END_EXAMPLE

The "true" command at the end of this shell script makes sure that the
shell脚本末尾的“true”命令确保
output gets incorportated into the =org-mode= buffer even if the code
即使是代码，输出也会不协调地进入=org-mode=缓冲区
crashes.
崩溃。

The output looks like this in your orgmode buffer:
输出是这样的在你的组织模式缓冲区:

#+BEGIN_EXAMPLE
python HelloWorld.py --w Eric 2>&1
true
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Hello Eric
#+END_EXAMPLE

* 26 Doing automated testing of literate =python= programs
做自动化测试的文字=python=程序
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26
:CUSTOM_ID sec-26
:END:
结束:

** 26.1 Making =test_HelloWorld.txt=
** 26.1 make =test_HelloWorld.txt=
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26-1
:CUSTOM_ID sec-26-1
:END:
结束:

Create interactive tests. It's a good idea to use the restructured
创建交互式测试。使用重组的是一个好主意
text mode in emacs, so that the result can be a ReStructuredText test
文本模式的emacs，使结果可以是一个重组的redtext测试
document, traditional to =python=.
文档，传统的to=python=。

Here is one, for example:
这里有一个例子:

#+BEGIN_EXAMPLE
#+NAME: doctest-foo
#+BEGIN_SRC rst
example foo::
>>> from HelloWorld import *
>>>
>>> foo = HelloWorld('foo')
>>> foo.say_hello()
Hello foo

#+END_SRC
#+END_EXAMPLE

and another:
另一个:

#+BEGIN_EXAMPLE
#+NAME: doctest-bar
#+BEGIN_SRC rst
example bar::
>>> from HelloWorld import *
>>>
>>> bar = HelloWorld('bar')
>>> bar.say_hello()
Hello bar

#+END_SRC
#+END_EXAMPLE

Create a document to "tangle" them into
创建一个文档来“纠结”它们

#+BEGIN_EXAMPLE
#+BEGIN_SRC text :noweb yes :tangle test_HelloWorld.txt :exports none
<<doctest-foo>>
<<doctest-bar>>
#+END_SRC
#+END_EXAMPLE

** 26.2 Running just the doctests
** 26.2只运行doctest
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26-2
:CUSTOM_ID sec-26-2
:END:
结束:

You can run the doctests from with =org-mode= with this bash code snippet:
您可以运行doctests从=组织模式=与此bash代码片段:

#+BEGIN_EXAMPLE
#+NAME: bashrun-helloworld-doctest
#+BEGIN_SRC sh :results output :exports both
python -m doctest test_HelloWorld.txt 2>&1
true
#+END_SRC
#+END_EXAMPLE

If the test succeeds, it will produce no output
如果测试成功，则不会产生任何输出

** 26.3 Defining =unittest= tests
** 26.3定义=单元测试=测试
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26-3
:CUSTOM_ID sec-26-3
:END:
结束:

Define the unit test like any other piece of =python= code:
定义单元测试像任何其他部分=python=代码:

#+BEGIN_EXAMPLE
#+NAME: unittest-foo
#+BEGIN_SRC python
class TestFoo(unittest.TestCase):
def test_foo(self):
greeter = HelloWorld('foo')
self.assertEqual(greeter.who, 'foo')
#+END_SRC
#+END_EXAMPLE

** 26.4 Making =TestHelloWorld.py=
** 26.4 make =TestHelloWorld.py=
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26-4
:CUSTOM_ID sec-26-4
:END:
结束:

Define the main testing module like this:
像这样定义主测试模块:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python :noweb yes :tangle TestHelloWorld.py :exports none
import sys
import unittest
from doctest import DocFileSuite
from HelloWorld import *

<<unittest-foo>>

def main():
suite = unittest.TestSuite()
suite.addTests( DocFileSuite('test_HelloWorld.txt') )
suite.addTests(
unittest.defaultTestLoader.loadTestsFromModule(sys.modules[__name__]))
unittest.TextTestRunner(verbosity=2).run(suite)
return 0

if __name__ == '__main__':
status = main()
sys.exit(status)
#+END_SRC
#+END_EXAMPLE

** 26.5 Running all tests
** 26.5运行所有测试
:PROPERTIES:
属性:
:CUSTOM_ID: sec-26-5
:CUSTOM_ID sec-26-5
:END:
结束:

Use this =bash= source block to run all tests:
使用这个=bash=源块运行所有测试:

#+BEGIN_EXAMPLE
#+NAME: bashrun-helloworld-alltest
#+BEGIN_SRC sh :results output :exports both
python -m doctest test_HelloWorld.py 2>&1
#+END_SRC
#+END_EXAMPLE

The output looks like this:
输出是这样的:

#+BEGIN_EXAMPLE
python TestHelloWorld.py 2>&1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
test_HelloWorld.txt
Doctest: test_HelloWorld.txt ... ok
test_foo (__main__.TestFoo) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.004s

OK
#+END_EXAMPLE

* 27 Generating an =org-mode= source block within an =org-mode= document
* 27在=org-mode=文档中生成=org-mode=源块
:PROPERTIES:
属性:
:CUSTOM_ID: sec-27
:CUSTOM_ID sec-27
:END:
结束:

This document often needs to quote org-mode code within org-mode,
这个文档经常需要在组织模式中引用组织模式代码，
which is slightly tricky, because you need to escape the =#+END_SRC=
这有点棘手，因为您需要转义=#+END_SRC=
block. Do this using a comma in the first line. So to get this:
块。在第一行使用逗号。所以得到这个:

#+BEGIN_EXAMPLE
#+BEGIN_SRC python
print "foo"
#+END_SRC
#+END_EXAMPLE

Do this:
这样做:

#+BEGIN_EXAMPLE
#+BEGIN_SRC org
#+BEGIN_SRC python
print "foo"
,#+END_SRC
#+END_SRC
#+END_EXAMPLE

Sometimes additional elements (particularly lines with special meaning
有时附加元素(特别是具有特殊意义的行)
in org-mode, like those starting with =#= or =*=) need escaping with a
在组织模式中，像那些以=#=或=*=)开头的需要用a进行转义
comma as well, but not always.
逗号也是，但不总是。

* 28 LaTeX presentations with beamer
* 28乳胶与beamer表示
:PROPERTIES:
属性:
:CUSTOM_ID: sec-28
:CUSTOM_ID sec-28
:END:
结束:

To generate a presentation PDF file using the beamer mode in LaTeX, do
要使用LaTeX中的beamer模式生成演示文稿PDF文件，请执行以下操作
something like this:
是这样的:

#+BEGIN_EXAMPLE
#+TITLE:
#+AUTHOR:
#+OPTIONS: H:1 toc:nil n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: default
#+BEAMER_FONT_THEME: default
#+BEAMER_COLOR_THEME: dove
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
#+STARTUP: beamer

* Slide one

- Foo
+ baz
+ qux
- Bar


* Next slide foo

- Foo
+ baz
+ qux
- Bar
#+END_EXAMPLE

The present =#+TITLE:= and =#+AUTHOR:= lines without values prevent
当前的=#+TITLE:=和=#+AUTHOR:=没有值阻止的行
the generation of a title page. If these have values, a title pages is
标题页的生成。如果它们有值，那么标题页就是
generated.
生成的。
