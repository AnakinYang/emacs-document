#+TITLE: Determining if the server is started, or the wonders of server-running-p
#+URL: http://emacshorrors.com/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 05日 星期四 17:12:02 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Trivia: How can you determine if the current Emacs instance has the
细节:如何确定当前Emacs实例是否具有
Emacs server running?
运行Emacs服务器吗?

A quick search gives us three potential candidates: =server-mode=,
快速搜索一下，我们可以得到三个可能的候选者:=server-mode=，
=(daemonp)= and =(server-running-p)=. That's way too much, but
= (daemonp) =和= (server-running-p) =。太过分了，但是
surely one of them is the right one, isn't it? Well, no. Because the
其中肯定有一个是对的，不是吗?嗯,没有。因为
real answer to this trivial question is: you can't.
对于这个琐碎的问题，真正的答案是:你不能。

- =server-mode= is =t= if, and only if, the server was started using the function with the same name. But there are other ways to run the server, like =M-x server-start= or =emacs --daemon=.
- =server-mode= is =t= if，且仅当服务器使用同名函数启动时。但是还有其他方法可以运行服务器，比如=M-x server-start=或=emacs——daemon=。
- =(daemonp)= returns t if, and only if, Emacs was started in daemon mode.
- =(daemonp)=返回t if，且仅当Emacs在守护进程模式下启动时。

What about =(server-running-p)=, then? Well, it may look friendly,
那么=(server-run -p)=呢?它看起来可能很友好，
but here be monsters.
但这里有怪物。

It starts by looking promising: after =M-x server-start=,
它开始看起来很有希望:after =M-x server-start=，
=(server-running-p)= now returns =t=! Do we have a winner? Not yet!
=(server-run -p)=现在返回=t=!我们有赢家吗?没有!
Let's pop a new Emacs instance and eval =(server-running-p)= without
让我们弹出一个新的Emacs实例，eval =(server-run -p)= without
starting the server. =t= again!
启动服务器。= t = !

What's happening? The truth is that =(server-running-p)= is not
发生什么事情了?事实是=(server-run -p)=不是
what it seems to be. Here's its complete source code:
它看起来是什么。以下是其完整的源代码:

#+BEGIN_EXAMPLE
(defun server-running-p (&optional name)
"Test whether server NAME is running.

Return values:
nil the server is definitely not running.
t the server seems to be running.
something else we cannot determine whether it's running without using
commands which may have to wait for a long time."
(unless name (setq name server-name))
(condition-case nil
(if server-use-tcp
(with-temp-buffer
(insert-file-contents-literally (expand-file-name name server-auth-dir))
(or (and (looking-at "127\.0\.0\.1:[0-9]+ \([0-9]+\)")
(assq 'comm
(process-attributes
(string-to-number (match-string 1))))
t)
:other))
(delete-process
(make-network-process
:name "server-client-test" :family 'local :server nil :noquery t
:service (expand-file-name name server-socket-dir)))
t)
(file-error nil)))
#+END_EXAMPLE

The horror starts as soon as the docstring. The =-p= suffix in the
文档一出现，恐怖就开始了。中的=-p=后缀
name promises a predicate, that is, a boolean function. But in
name承诺一个谓词，即一个布尔函数。但在
=server-running-p=, non-=nil= is not a loud and clear “Yes!”, it's a
=服务器-运行-p=， non-=nil=不是一个响亮和明确的“是!””,这是一个
mumbled “well, maybe, who knows?”. Ternary logic, because Emacs is
“嗯，也许吧，谁知道呢?”三元逻辑，因为Emacs是
above the law of excluded middle.
高于排中律。

But what does this function do? It tries to determine if a server
但是这个函数是做什么的呢?它试图确定一个服务器是否
called =NAME= is running, by assuming that this server would be
通过假设此服务器正在运行，从而调用=NAME=
configured exactly the same as the running instance. It may end up
与正在运行的实例配置完全相同。它可能会结束
looking at the socket file of the current server, or it may try to
查看当前服务器的套接字文件，或者尝试这样做
initiate a TCP connection, which is extremely expensive.
启动一个TCP连接，这是非常昂贵的。
=server-running-p= is the kind of function you may be tempted to
=server- run宁-p=可能是您想要的那种函数
call while building the mode line: try it, and get an instant and
在创建模式线时调用:尝试一下，得到一个瞬间和
unrecoverable Emacs freeze. What it's supposed to be useful for is
不可恢复的Emacs冻结。它应该是有用的是
extremely unclear. It's unable to determine if the running instance
非常不清楚。它无法确定正在运行的实例
has a server --- but it uses this server's config to search for a
有一个服务器——但是它使用这个服务器的配置来搜索
potentially completely different server.
可能是完全不同的服务器。
