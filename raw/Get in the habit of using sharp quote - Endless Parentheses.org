#+TITLE: Get in the habit of using sharp quote · Endless Parentheses
#+URL: https://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 19日 星期三 09:53:39 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


The sharp quote (or function quote, or simply =#'=) is an abbreviation for the [[https://doc.endlessparentheses.com/Fun/function][=function=]] form. It is essentially a version of [[https://doc.endlessparentheses.com/Fun/quote][=quote=]] (or ='=) which enables byte-compilation, but its actual usefulness has changed throughout the years.

A little over two decades ago, it was used to quote [[https://doc.endlessparentheses.com/Fun/lambda][=lambda=]] forms. You see, ='(lambda (x) (* x x))= was just a raw list to the byte-compiler, but =#'(lambda (x) (* x x))= was an actual function that could be compiled. Now-a-days---or rather, now-a-decades---the lambda form sharp-quotes itself, meaning a plain =(lambda (x) (* x x))= [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Anonymous-Functions.html][is identical]] to the =#'= version. In fact, you should /never/ quote your lambdas with either quotes.

On the other hand, just as you'd expect the sharp quote to become redundant for the elisp programmer, a new use arises for it. The compiler throws a warning whenever it notices you've used an undefined function, say =(not-defined "oops")=, but it can't do the same for something like =(mapcar 'not-defined some-list)= because it doesn't know that symbol is the name of a function. The sharp quote is a way of conveying that information to the compiler, so if it runs into =(mapcar #'not-defined some-list)=, it can throw a warning accordingly.

So it is always good practice to sharp quote every symbol that is the name of a function, whether it's going into a =mapcar=, an =apply=, a =funcall=, or anything else. Adhering to this actually unearthed a small bug in one of my packages.

And of course, we can make things more convenient.

#+BEGIN_EXAMPLE
  (defun endless/sharp ()
    "Insert #' unless in a string or comment."
    (interactive)
    (call-interactively #'self-insert-command)
    (let ((ppss (syntax-ppss)))
      (unless (or (elt ppss 3)
                  (elt ppss 4)
                  (eq (char-after) ?'))
        (insert "'"))))

  (define-key emacs-lisp-mode-map "#" #'endless/sharp)
#+END_EXAMPLE
