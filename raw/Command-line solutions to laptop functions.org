#+TITLE: Command-line solutions to laptop functions
#+URL: http://tech.toryanderson.com/2018/03/10/command-line-solutions-to-laptop-functions/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 04月 16日 星期一 11:14:26 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
*Edits & Additions:*
*编辑和添加:*

- 2018.03.28 I've supplemented the Network section since I now use nm-applet. I also added Alt+Tab buffer swapping and a copy of the exwm portion of my emacs.el.
- 2018.03.28自从我现在使用nm-applet后，我已经补充了网络部分。我还添加了Alt+Tab缓冲区交换和我的emacs.el的exwm部分的副本。

Trying to make the jump to exwm, which is a similar experience (though considerably less documented) than switching to i3wm, there are a number of core laptop functionalities that the heavier-weight window managers take care of for you. I'm using this on a laptop that is often used that way -- travelling, connecting to multiple different wifi networks daily, connecting to docking stations and extra monitors and devices, toggling touchpad, etc. In my quest to get this figured out, here are some of the major things I've dealt with.
尝试跳转到exwm，这与切换到i3wm是类似的体验(尽管文档记录较少)，有许多重量级窗口管理器为您处理的核心膝上型电脑功能。我把它用在笔记本电脑上，笔记本电脑经常被这样使用——旅行，每天连接多个不同的wifi网络，连接坞站和额外的显示器和设备，切换触摸板，等等。在我寻求解决这个问题的过程中，以下是我处理过的一些主要问题。

* Controlling the power key
*控制电源键
:PROPERTIES:
属性:
:CUSTOM_ID: controlling-the-power-key
:CUSTOM_ID controlling-the-power-key
:END:
结束:

The power button isn't handled by the window manager, it's handled by systemd
电源按钮不是由窗口管理器处理的，而是由systemd处理的

For example this is in my /etc/systemd/logind.conf
例如，这是在我的/etc/systemd/logind.conf中

#+BEGIN_EXAMPLE
[Login]
HandlePowerKey=hibernate
HandleLidSwitch=ignore
IdleAction=suspend
IdleActionSec=20min
#+END_EXAMPLE

* Toggling the touchpad
*切换触摸板
:PROPERTIES:
属性:
:CUSTOM_ID: toggling-the-touchpad
:CUSTOM_ID toggling-the-touchpad
:END:
结束:

This was solved by implementing the following shell script:
这是通过实现以下shell脚本解决的:

#+BEGIN_EXAMPLE
#!/bin/bash

declare -i ID
ID=`xinput list | grep -Eo 'Touchpads*id=[0-9]{1,2}' | grep -Eo '[0-9]{1,2}'`
declare -i STATE
STATE=`xinput list-props $ID|grep 'Device Enabled'|awk '{print $4}'`
if [ $STATE -eq 1 ]
then
xinput disable $ID
echo "Touchpad disabled."
# notify-send -a 'Touchpad' 'Disabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
else
xinput enable $ID
echo "Touchpad enabled."
# notify-send -a 'Touchpad' 'Enabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
fi
#+END_EXAMPLE

I then bound this to my desired key (since I'm using exwm, I bound it in my emacs.el, with =touchpad_toggle= being the name of the script I created above):
然后我将它绑定到我想要的键(因为我使用exwm，所以我将它绑定到我的emacs中。el， =touchpad_toggle=我在上面创建的脚本的名称):

#+BEGIN_EXAMPLE
(exwm-input-set-key (kbd "s-<f7>")
(lambda () (interactive)
(shell-command (executable-find "touchpad_toggle"))))
#+END_EXAMPLE

* Lock Screen
*锁定屏幕
:PROPERTIES:
属性:
:CUSTOM_ID: lock-screen
:CUSTOM_ID:锁定屏幕
:END:
结束:

xscreensaver took care of this. Once I'd installed xscreensaver from my repos -- including the extras to get the gl-slideshow that I wanted as my lockscreen -- I ran =xscreensaver-demo= to set it up to my desires. Then I created a one-liner that I named =lockscreen=, and bound it in my emacs file:
xscreensaver解决了这个问题。一旦我从我的repos安装了xscreensaver—包括额外的获得我想要的作为锁屏的gl-slideshow—我运行=xscreensaver-demo=来设置它。然后我创建了一个名为=lockscreen=的一行程序，并将它绑定到我的emacs文件中:

#+BEGIN_EXAMPLE
#!/bin/bash

xscreensaver-command -lock

(exwm-input-set-key (kbd "s-l") (lambda () (interactive) (shell-command (executable-find "lockscreen"))))
#+END_EXAMPLE

Then it was a matter of also locking on screen shutdown:
然后就是锁定屏幕关闭的问题:
[[https://unix.stackexchange.com/questions/81692/suspend-and-lock-screen-on-closing-lid-in-arch-systemd]]
[[https://unix.stackexchange.com/questions/81692/suspend-and-lock-screen-on-closing-lid-in-arch-systemd]]

* Battery Status
*电池状态
:PROPERTIES:
属性:
:CUSTOM_ID: battery-status
:CUSTOM_ID:电池状态
:END:
结束:

Simple with fancy-battery mode (it says it is unmaintained, but it works for me from melpa)
简单的幻想电池模式(它说它是未维护的，但它在melpa为我工作)

#+BEGIN_EXAMPLE
(use-package fancy-battery
:ensure t
(fancy-battery-mode))
#+END_EXAMPLE

* Simple Wifi management
*简单的Wifi管理
:PROPERTIES:
属性:
:CUSTOM_ID: simple-wifi-management
:CUSTOM_ID simple-wifi-management
:END:
结束:

nmtui is the simplest, a good text-interface to NetworkManager. The trick was in the fact that it isn't usable in any of the Emacs terminals, wich have been my shell solution for a long while.
nmtui是最简单的，一个很好的NetworkManager文本接口。问题是，它不能用于任何Emacs终端，这是我的shell解决方案已经有很长一段时间了。

Abandoning the CLI effort, I have found =nm-applet= to be good. The icon docks in the bottom of my screen and it has the password-remembering and auto-connecting I had hoped for.
放弃CLI工作，我发现=nm-applet=是好的。图标停靠在我屏幕的底部，它有我希望的密码记忆和自动连接功能。

* Simple Quick Transitions to Multiple Monitors
*简单快速过渡到多个监视器
:PROPERTIES:
属性:
:CUSTOM_ID: simple-quick-transitions-to-multiple-monitors
:CUSTOM_ID simple-quick-transitions-to-multiple-monitors
:END:
结束:

When I plug in an external monitor, under KDE it simply connects (though I might have to do some resolution tweaking). In my exwm setup, nothing happens. However, exwm has solutions for this, which go into my emacs.el file:
当我插入一个外部监视器时，在KDE下它只是简单地连接(尽管我可能需要做一些分辨率调整)。在我的exwm设置中，什么都没有发生。然而，exwm对此有解决方案，这些解决方案将进入我的emacs。el文件:

#+BEGIN_EXAMPLE
(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist '(0 "DP-1")) ;; DP-1 being the name of my new monitor as shown by `randr'
(add-hook 'exwm-randr-screen-change-hook
(lambda ()
(start-process-shell-command
"xrandr" nil "xrandr --output DP-1 --left-of eDP-1 --auto"))) ;; eDP-1 being the name of my original (laptop) monitor
(exwm-enable)
(exwm-randr-enable)
#+END_EXAMPLE

* Audio Volume
*音频音量
:PROPERTIES:
属性:
:CUSTOM_ID: audio-volume
:CUSTOM_ID:音频音量
:END:
结束:

I was lucky enough that I was already using Alsa for my sound, so didn't even have to install anything. In previous attempts on different devices sound was much harder to deal with. Here I could get it going with nothing but my exwm config.
我很幸运，因为我的声音已经使用了Alsa，所以甚至不需要安装任何东西。在以前不同设备上的尝试中，声音很难处理。在这里，我可以让它与任何东西，但我的exwm配置。

#+BEGIN_EXAMPLE
(exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
(lambda () (interactive) (shell-command "amixer set Master 5%-")))
(exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
(lambda () (interactive) (shell-command "amixer set Master 5%+")))
(exwm-input-set-key (kbd "<XF86AudioMute>")
(lambda () (interactive) (shell-command "amixer set Master 1+ toggle")))
#+END_EXAMPLE

* Screen Brightness
*屏幕的亮度
:PROPERTIES:
属性:
:CUSTOM_ID: screen-brightness
:CUSTOM_ID:屏幕的亮度
:END:
结束:

I have hardware keys that worked wonderfully under kde to dim and brighten my screen. How can I regain this functionality? The answer is in the light package (which works far more easily than xbacklight, which always told me ‘No outputs have backlight property'.
我有在kde下工作得很好的硬件键，可以使我的屏幕变暗或变亮。我怎样才能恢复这个功能?答案是light包(它比xbacklight容易得多，后者总是告诉我“没有输出具有backlight属性”)。

[[https://github.com/haikarainen/light]]
[[https://github.com/haikarainen/light]]

Following the instructions to install, I then set my keys appropriately:
按照安装说明，我然后设置我的钥匙适当:

#+BEGIN_EXAMPLE
(exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (shell-command "light -U 5; light")))
(exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (shell-command "light -A 5; light")))
#+END_EXAMPLE

* Screenshot
*截图
:PROPERTIES:
属性:
:CUSTOM_ID: screenshot
:CUSTOM_ID:截图
:END:
结束:

The last thing I realized I needed when writing this post was the ability to make a screenshot. My favorite screenshot tool is that which ships with KDE, *Spectacle*. Since it is already installed for me, I just bound it to my Printscreen key:
写这篇文章时，我意识到我最不需要的就是截屏。我最喜欢的截图工具是KDE自带的*Spectacle*。因为它已经为我安装，我只是绑定到我的打印屏幕键:

#+BEGIN_EXAMPLE
(exwm-input-set-key (kbd "<print>") (lambda () (interactive) (start-process-shell-command "spectacle" nil "spectacle")))
#+END_EXAMPLE

* Alt-Tab Buffer-swapping
*总管Buffer-swapping
:PROPERTIES:
属性:
:CUSTOM_ID: alt-tab-buffer-swapping
:CUSTOM_ID alt-tab-buffer-swapping
:END:
结束:

The library iflipb makes short work of regaining the =alt+tab= functionality that I work with heavily on every other system. Once it was downloaded, I just set the configuration:
库iflipb很快就恢复了=alt+tab=功能，我在其他所有系统上都大量使用这个功能。下载后，我只需要设置配置:

#+BEGIN_EXAMPLE
(exwm-input-set-key (kbd "M-<tab>") 'iflipb-next-buffer)
(exwm-input-set-key (kbd "M-<iso-lefttab>") 'iflipb-previous-buffer)
#+END_EXAMPLE

* My Full Setup
*我的全部设置
:PROPERTIES:
属性:
:CUSTOM_ID: my-full-setup
:CUSTOM_ID my-full-setup
:END:
结束:

use-package makes configuration easy and clean. Here's from my emacs.el, which includes a few snippets that I haven't described here:
use-package使配置变得简单和干净。这是我的电子邮件。其中包括一些我没有在这里描述的片段:

#+BEGIN_EXAMPLE
(use-package exwm
:ensure t
:init
(setq mouse-autoselect-window t
focus-follows-mouse t)
(use-package exwm-config)
(require 'exwm-randr)
(setq exwm-workspace-show-all-buffers t)
(setq exwm-layout-show-all-buffers t)
(setq exwm-randr-workspace-output-plist '(0 "DP1"))
(add-hook 'exwm-randr-screen-change-hook
(lambda ()
(start-process-shell-command
"xrandr" nil "xrandr --output DP1 --left-of eDP1 --auto")))
(exwm-enable)
(exwm-randr-enable) ; https://github.com/ch11ng/exwm/wiki
(require 'exwm-systemtray)
(exwm-systemtray-enable)
:config
(add-hook 'exwm-update-class-hook
(lambda () (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name) (string= "gimp" exwm-instance-name))
(exwm-workspace-rename-buffer exwm-class-name))))
(defun tsa/exwm-rename ()
(interactive)
(exwm-workspace-rename-buffer (concat exwm-class-name " : " exwm-title)))
(add-hook 'exwm-update-title-hook 'tsa/exwm-rename)
(setq tsa/default-simulation-keys
'(
;; move
([?C-b] . left)
([?M-b] . C-left)
([?C-f] . right)
([?M-f] . C-right)
([?C-p] . up)
([?C-n] . down)
([?M-<] . C-home)
([?M->] . C-end)
([?C-a] . home)
([?C-e] . end) ;; in spreadsheets: C-e C-p - go to top; C-e C-n - go to bottom
([?M-v] . prior)
([?C-v] . next)
;; delete
([?C-d] . delete)
([?C-k] . (S-end delete))
([?M-d] . (C-S-right delete))
;; cut/copy/paste.
;([?C-w] . ?C-x)
([?M-w] . ?C-c)
([?C-y] . ?C-v)
;; search
([?C-s] . ?C-f)
))
(exwm-input-set-simulation-keys tsa/default-simulation-keys)
(exwm-input-set-key (kbd "s-r") 'exwm-reset)
(exwm-input-set-key (kbd "s-n") 'tsa/exwm-rename)
(exwm-input-set-key (kbd "s-N") 'rename-buffer)
(exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
(exwm-input-set-key (kbd "s-f")
(lambda ()
(interactive)
(start-process-shell-command "firefox" nil "firefox")))
(exwm-input-set-key (kbd "s-t")
(lambda ()
(interactive)
(start-process-shell-command "Telegram" nil "Telegram")))
(exwm-input-set-key (kbd "s-<f7>") (lambda () (interactive) (shell-command (executable-find "touchpad_toggle"))))
(exwm-input-set-key (kbd "C-c o") 'hydra-global-org/body)
(exwm-input-set-key (kbd "C-M-o") 'hydra-window/body)
(exwm-input-set-key (kbd "s-l") (lambda () (interactive) (shell-command (executable-find "lockscreen"))))
(exwm-input-set-key (kbd "<f8>") 'tsa/go-or-make-agenda)
(exwm-input-set-key (kbd "<f11>") 'helm-org-capture-templates)
(exwm-input-set-key (kbd "<f9>") 'tsa/quick-gnus)
(exwm-input-set-key (kbd "<XF86AudioLowerVolume>") (lambda () (interactive) (shell-command "amixer set Master 2%-")))
(exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") (lambda () (interactive) (shell-command "amixer set Master 2%+")))
(exwm-input-set-key (kbd "<XF86AudioMute>") (lambda () (interactive) (shell-command "amixer set Master 1+ toggle")))
(exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (shell-command "light -U 5; light")))
(exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (shell-command "light -A 5; light")))
(exwm-input-set-key (kbd "<print>") (lambda () (interactive) (start-process-shell-command "spectacle" nil "spectacle")))
(exwm-input-set-key (kbd "s-<f9>") (lambda () (interactive) (shell-command "/home/torysa/bin/get-mail &" nil nil)))
(exwm-input-set-key (kbd "M-<tab>") 'iflipb-next-buffer)
(exwm-input-set-key (kbd "M-<iso-lefttab>") 'iflipb-previous-buffer))
#+END_EXAMPLE
