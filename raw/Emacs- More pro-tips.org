#+TITLE: Emacs: More pro-tips
#+URL: https://ambrevar.xyz/emacs2/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 10月 23日 星期二 10:14:06 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


This is a follow-up to my first [[../emacs/index.html][Emacs pro-tips]].
这是我第一次[[.. ./emacs/索引]的后续。html] [Emacs专业人员]]。

** Speed up initialization
**加快初始化
:PROPERTIES:
属性:
:CUSTOM_ID: org9520fb1
:CUSTOM_ID org9520fb1
:END:
结束:

If you don't use Emacs daemon or if you develop Emacs, you might find yourself
如果您不使用Emacs守护进程，或者您开发了Emacs，您可能会发现自己的问题
re-starting it a lot. In which case it may be useful to keep startup time to a
经常重新启动它。在这种情况下，保持启动时间为a可能是有用的
minimum.
最小值。

#+BEGIN_EXAMPLE
;;; Temporarily reduce garbage collection during startup. Inspect `gcs-done'.
(defun ambrevar/reset-gc-cons-threshold ()
(setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
(setq gc-cons-threshold (* 64 1024 1024))
(add-hook 'after-init-hook #'ambrevar/reset-gc-cons-threshold)

;;; Temporarily disable the file name handler.
(setq default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(defun ambrevar/reset-file-name-handler-alist ()
(setq file-name-handler-alist
(append default-file-name-handler-alist
file-name-handler-alist))
(cl-delete-duplicates file-name-handler-alist :test 'equal))
(add-hook 'after-init-hook #'ambrevar/reset-file-name-handler-alist)
#+END_EXAMPLE

** Avoid the pitfall of “loading old bytecode instead of newer source”
**避免“加载旧的字节码而不是新的源代码”的陷阱
:PROPERTIES:
属性:
:CUSTOM_ID: org66b55d4
:CUSTOM_ID org66b55d4
:END:
结束:

#+BEGIN_EXAMPLE
(setq load-prefer-newer t)
#+END_EXAMPLE

** Site Lisp folder for local packages and development
**用于本地包和开发的站点Lisp文件夹
:PROPERTIES:
属性:
:CUSTOM_ID: org718f681
:CUSTOM_ID org718f681
:END:
结束:

We need to roll out our own function since we want the local site folder first
我们需要推出自己的功能，因为我们想要的本地网站文件夹首先
in the =load-path=, while =normal-top-level-add-subdirs-to-load-path= appends it
在=load-path=中，而=normal-top-level-add-subdir -to-load-path=追加它
to the very end.
直到最后。

#+BEGIN_EXAMPLE
(defun ambrevar/package-refresh-load-path (path)
"Add every non-hidden sub-folder of PATH to `load-path'."
(when (file-directory-p path)
(dolist (dir (directory-files path t "^[^\.]"))
(when (file-directory-p dir)
(setq load-path (add-to-list 'load-path dir))
(dolist (subdir (directory-files dir t "^[^\.]"))
(when (file-directory-p subdir)
(setq load-path (add-to-list 'load-path subdir))))))))
(let ((site-lisp (expand-file-name "site-lisp/" "~/.local/share/emacs/")))
(add-to-list 'load-path site-lisp)
(ambrevar/package-refresh-load-path site-lisp))
#+END_EXAMPLE

** Flyspell and whitespace-mode
**飞行咒和空白模式
:PROPERTIES:
属性:
:CUSTOM_ID: orgba21dae
:CUSTOM_ID orgba21dae
:END:
结束:

#+BEGIN_EXAMPLE
(defun ambrevar/flyspell-and-whitespace-mode ()
"Toggle `flyspell-mode' and `whitespace-mode'."
(interactive)
(if (derived-mode-p 'prog-mode)
(flyspell-prog-mode)
(flyspell-mode)
(when flyspell-mode
(flyspell-buffer)))
(whitespace-mode 'toggle))

(global-set-key (kbd "<f9>") #'ambrevar/flyspell-and-whitespace-mode)
#+END_EXAMPLE

** Download video URL at point
**下载视频网址
:PROPERTIES:
属性:
:CUSTOM_ID: org04d4d10
:CUSTOM_ID org04d4d10
:END:
结束:

The following requires the =youtube-dl= program.
下面需要=youtube-dl=程序。

#+BEGIN_EXAMPLE
(defun ambrevar/youtube-dl-at-point (&optional url)
"Run 'youtube-dl' over the URL at point.
If URL is non-nil, use that instead."
(interactive)
(setq url (or url (thing-at-point-url-at-point)))
(let ((eshell-buffer-name "*youtube-dl*"))
(eshell)
(when (eshell-interactive-process)
(eshell t))
(eshell-interrupt-process)
(insert "cd ~/temp && youtube-dl " url)
(eshell-send-input)))
#+END_EXAMPLE

See also [[https://github.com/skeeto/youtube-dl-emacs][youtube-dl-emacs]].
参见[[https://github.com/skeeto/youtube-dl-emacs] [youtube-dl-emacs]]。

** List current minor modes
**列出当前次要模式
:PROPERTIES:
属性:
:CUSTOM_ID: org2f30f14
:CUSTOM_ID org2f30f14
:END:
结束:

#+BEGIN_EXAMPLE
(defun ambrevar/current-minor-modes ()
"Return the list of minor modes enabled in the current buffer."
(interactive)
(delq nil
(mapcar (lambda (mode)
(if (and (boundp mode) (symbol-value mode))
mode))
minor-mode-list)))
#+END_EXAMPLE

** Window management
* *窗口管理
:PROPERTIES:
属性:
:CUSTOM_ID: org9e799e0
:CUSTOM_ID org9e799e0
:END:
结束:

Since I use [[../emacs-everywhere/index.html][EXWM]] as a window manager, I can dedicate the =super= key to window
因为我使用[[.. ./emacs-everywhere/index]。作为一个窗口管理器，我可以把=super=键赋给窗口
management.
管理。

Some simple, yet efficient rules:
一些简单而有效的规则:

- =s-TAB=: Switch to last buffer.
- =s-TAB=:切换到最后一个缓冲区。
- =s-<arrows>= (or =s-<hjkl>= with Evil): select window in the chosen direction.
- =s-<箭头>=(或=s-<hjkl>= with Evil):在选定的方向上选择窗口。
- =S-s-<arrows>= (or =S-s-<hjkl>= with Evil): swap current window with window in
- =S-s-<arrows>= (or =S-s-<hjkl>= with Evil):交换当前窗口
the chosen direction.
选择的方向。
- =s-=: Toggle between horizontal and vertical splitting.
-= s-=:切换水平和垂直分裂。
- =s-o=: Toggle-hide all other windows.
- =s-o=:切换-隐藏所有其他窗口。

With Helm, I use =C-c o= (or my custom binding =S-RET=) to find a file or a
在Helm中，我使用=C-c o=(或我的自定义绑定=S-RET=)来查找文件或a
buffer in a new split window.
缓冲在一个新的分割窗口。

I need some extra functions to implement the above workflow:
我需要一些额外的功能来实现上述工作流程:

#+BEGIN_EXAMPLE
(defun ambrevar/swap-windows (&optional w1 w2)
"If 2 windows are up, swap them.
Else if W1 is a window, swap it with current window.
If W2 is a window too, swap both."
(interactive)
(unless (or (= 2 (count-windows))
(windowp w1)
(windowp w2))
(error "Ambiguous window selection"))
(let* ((w1 (or w1 (car (window-list))))
(w2 (or w2
(if (eq w1 (car (window-list)))
(nth 1 (window-list))
(car (window-list)))))
(b1 (window-buffer w1))
(b2 (window-buffer w2))
(s1 (window-start w1))
(s2 (window-start w2)))
(with-temp-buffer
;; Some buffers like EXWM buffers can only be in one live buffer at once.
;; Switch to a dummy buffer in w2 so that we don't display any buffer twice.
(set-window-buffer w2 (current-buffer))
(set-window-buffer w1 b2)
(set-window-buffer w2 b1))
(set-window-start w1 s2)
(set-window-start w2 s1))
(select-window w1))
(global-set-key (kbd "C-x \") 'swap-windows)

(defun ambrevar/swap-windows-left ()
"Swap current window with the window to the left."
(interactive)
(ambrevar/swap-windows (window-in-direction 'left)))
(defun ambrevar/swap-windows-below ()
"Swap current window with the window below."
(interactive)
(ambrevar/swap-windows (window-in-direction 'below)))
(defun ambrevar/swap-windows-above ()
"Swap current window with the window above."
(interactive)
(ambrevar/swap-windows (window-in-direction 'above)))
(defun ambrevar/swap-windows-right ()
"Swap current window with the window to the right."
(interactive)
(ambrevar/swap-windows (window-in-direction 'right)))

(defun ambrevar/switch-to-last-buffer ()
"Switch to last open buffer in current window."
(interactive)
(switch-to-buffer (other-buffer (current-buffer) 1)))

(defun ambrevar/toggle-single-window ()
"Un-maximize current window.
If multiple windows are active, save window configuration and
delete other windows. If only one window is active and a window
configuration was previously save, restore that configuration."
(interactive)
(if (= (count-windows) 1)
(when single-window--last-configuration
(set-window-configuration single-window--last-configuration))
(setq single-window--last-configuration (current-window-configuration))
(delete-other-windows)))

(defun ambrevar/toggle-window-split ()
"Switch between vertical and horizontal split.
It only works for frames with exactly two windows."
(interactive)
(if (= (count-windows) 2)
(let* ((this-win-buffer (window-buffer))
(next-win-buffer (window-buffer (next-window)))
(this-win-edges (window-edges (selected-window)))
(next-win-edges (window-edges (next-window)))
(this-win-2nd (not (and (<= (car this-win-edges)
(car next-win-edges))
(<= (cadr this-win-edges)
(cadr next-win-edges)))))
(splitter
(if (= (car this-win-edges)
(car (window-edges (next-window))))
'split-window-horizontally
'split-window-vertically)))
(delete-other-windows)
(let ((first-win (selected-window)))
(funcall splitter)
(if this-win-2nd (other-window 1))
(set-window-buffer (selected-window) this-win-buffer)
(set-window-buffer (next-window) next-win-buffer)
(select-window first-win)
(if this-win-2nd (other-window 1))))))
#+END_EXAMPLE

** Use FreeDesktop.org's trash
**使用FreeDesktop.org的垃圾
:PROPERTIES:
属性:
:CUSTOM_ID: orgc93c4c3
:CUSTOM_ID orgc93c4c3
:END:
结束:

Whenever Emacs “delete” a file (from =dired=, Helm Find-Files or Elisp
每当Emacs“删除”一个文件(从=dired=， Helm Find-Files或Elisp中删除)
primitives), tell Emacs to move it to the trash instead:
，告诉Emacs把它移到垃圾箱里:

#+BEGIN_EXAMPLE
(setq delete-by-moving-to-trash t)
#+END_EXAMPLE

** Lisp parentheses editing
** Lisp括号编辑
:PROPERTIES:
属性:
:CUSTOM_ID: org23b1d66
:CUSTOM_ID org23b1d66
:END:
结束:

A recurring complaint with Lisp is the need for balancing parentheses.
Lisp的一个常见问题是需要平衡括号。

That is to say, on a blackboard... Since such a task should pose no difficulty to
也就是说，在黑板上……既然这样的任务应该不会造成困难
a computer and Emacs can obviously help here!
一台计算机和Emacs显然可以在这里提供帮助!

First, let's enable parenthesis highlighting. I like to remove the delay so
首先，启用括号突出显示。我想取消延迟
that Emacs highlights the matching parenthesis instantly:
Emacs会立即突出匹配的括号:

#+BEGIN_EXAMPLE
;;; Show matching parenthesis
(show-paren-mode 1)
;;; By default, there’s a small delay before showing a matching parenthesis. Set
;;; it to 0 to deactivate.
(setq show-paren-delay 0)
(setq show-paren-when-point-inside-paren t)

(with-eval-after-load 'paren
(set-face-background 'show-paren-match "#555555")
(set-face-foreground 'show-paren-match "#def")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold))
#+END_EXAMPLE

Next, we can install the [[https://github.com/Fanael/rainbow-delimiters][=rainbow-delimiters=]] third-party package which colors
接下来，我们可以安装[[https://github.com/fanael/rainbow-delimiter][=rainbow-delimiter =]]第三方包
parentheses according to their depth. This is no more than the moral equivalent
括号根据它们的深度。这只不过是道德上的平等
of indenting in C or other members of the Algol family.
在C语言或其他Algol家族成员中缩进的。

** Goodbye Paredit, hello Lispy
再见Paredit，你好Lispy
:PROPERTIES:
属性:
:CUSTOM_ID: org38303e5
:CUSTOM_ID org38303e5
:END:
结束:

Consider using [[https://github.com/abo-abo/lispy][Lispy]] which brings Lisp syntactic editing to a whole new level:
考虑使用[[https://github.com/abo-abo/lispy][Lispy]]，这将Lisp语法编辑带到一个全新的层次:
beside parenthesis balancing (which makes the previous section superfluous
旁边的括号平衡(这使得前面的部分是多余的
altogether), it offers advanced expression navigation, code transforms, style
总的来说)，它提供了高级的表达式导航、代码转换和样式
prettification and more.
美化等等。

Have a looks at the demos for some concrete examples.
看一下演示中的一些具体例子。

If you think about it, Lispy is the obvious evolution of editor support for Lisp
仔细想想，Lispy是对Lisp的编辑器支持的明显改进
editing: it truly exploits the fact that the language syntax is an abstract
编辑:它确实利用了语言语法是抽象的这一事实
syntax tree. It would be a shame not to make use of this property.
语法树。不使用这项财产是可耻的。

** Image manipulation and thumbnail gallery
**图像处理和缩略图画廊
:PROPERTIES:
属性:
:CUSTOM_ID: org07699e3
:CUSTOM_ID org07699e3
:END:
结束:

A maybe not-so-well-known command is =image-dired=: when run in a directory of
的目录中运行时，一个不太知名的命令是=image-dired=:
pictures, it displays a gallery of thumbnails with previews. =SPC= displays the
图片，它显示一个带预览的缩略图图库。=程控=显示
next picture in another window while =C-RET= opens the picture in the
中的另一个窗口中的下一个图片，而=C-RET=打开该窗口中的图片
=image-dired-external-viewer=. It's possible to rotate files, tag them in dired
= image-dired-external-viewer =。可以旋转文件，用dired标记它们
or add comments.
或添加评论。

The [[https://github.com/mhayashi1120/Emacs-imagex][=image+=]] third-party package adds extra picture capabilities to Emacs, like
第三方包[[https://github.com/mhayashi1120/Emacs-imagex][=image+=]]为Emacs增加了额外的图片功能，比如
stiky transforms and file modifications.
stiky转换和文件修改。

** Don't use terminal-Emacs
**不要使用终端emacs
:PROPERTIES:
属性:
:CUSTOM_ID: org6dc7ac7
:CUSTOM_ID org6dc7ac7
:END:
结束:

[[https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html]]
[[https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html]]

** Making music in Emacs
**在Emacs中制作音乐
:PROPERTIES:
属性:
:CUSTOM_ID: org71b36ce
:CUSTOM_ID org71b36ce
:END:
结束:

[[https://vimeo.com/22798433][Quick Intro to Live Programming with Overtone]]
[[https://vimeo.com/22798433]]

** Emacs chart library
** Emacs图表库
:PROPERTIES:
属性:
:CUSTOM_ID: org1135ce5
:CUSTOM_ID org1135ce5
:END:
结束:

[[http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/]]
[[http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/]]

** Odd nconc behaviour
奇怪的nconc行为
:PROPERTIES:
属性:
:CUSTOM_ID: org426780b
:CUSTOM_ID org426780b
:END:
结束:

One of the few oddities in the Elisp language:
Elisp语言中少数奇怪的地方之一:
[[https://stackoverflow.com/questions/25157349/odd-behaviour-with-nconc-in-emacs-lisp]]
[[https://stackoverflow.com/questions/25157349/odd-behaviour-with-nconc-in-emacs-lisp]]

** References
* *引用
:PROPERTIES:
属性:
:CUSTOM_ID: org2cc2711
:CUSTOM_ID org2cc2711
:END:
结束:

- [[http://emacs.sexy/]]
- - - - - - [[http://emacs.sexy/]]
- [[https://writequit.org/org/]]
- - - - - - [[https://writequit.org/org/]]
- [[http://doc.rix.si/cce/cce.html][Emacs as a Complete Computing Environment]]
- - - - - - [[http://doc.rix.si/cce/cce。[Emacs作为一个完整的计算环境]
- [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]]
- [[https://github.com/bbatsov/emacs- Lisp - sty-guide/][Emacs Lisp风格指南]]
- [[https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform][Why You Should Buy Into the Emacs Platform]]
- [[https://two- wrongs.com/why-your-intotheemacs - Platform][为什么你应该购买Emacs平台]]

Environment bootstraps:
环境靠:

- [[http://emacs-bootstrap.com/]] (generic)
- [[http://emacs-bootstrap.com/]](通用)
- [[https://portacle.github.io/]] (Common Lisp)
- - - - - - [[https://portacle.github。io /]] (Common Lisp)
