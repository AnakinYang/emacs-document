#+TITLE: Part 1: talking to Lisp, basics
#+URL: http://dantorop.info/project/emacs-animation/lisp1.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 10日 星期一 10:09:51 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
*** Type =M-x ielm= to get into the interactive Lisp mode
    :PROPERTIES:
    :CUSTOM_ID: type-m-x-ielm-to-get-into-the-interactive-lisp-mode
    :END:

You should see something like:

#+BEGIN_EXAMPLE
  *** Welcome to IELM 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh env parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh Type (describe-mode) for help.
  ELISP> 
#+END_EXAMPLE

*** To test it out
    :PROPERTIES:
    :CUSTOM_ID: to-test-it-out
    :END:

type a number or some text in quotes, and it should echo that back to you:

#+BEGIN_EXAMPLE
  ELISP> 23
  23
  ELISP> "testing"
  "testing"
  ELISP> 
#+END_EXAMPLE

*** Setting variables with =setq=
    :PROPERTIES:
    :CUSTOM_ID: setting-variables-with-setq
    :END:

#+BEGIN_EXAMPLE
  ELISP> (setq foo 25)
  25
  ELISP> (+ foo 1)
  26
  ELISP> foo
  25
  ELISP> (setq foo (+ foo 1))
  26
  ELISP> foo
  26
  ELISP> 
#+END_EXAMPLE

*** Looping with =while= (from scratch)
    :PROPERTIES:
    :CUSTOM_ID: looping-with-while-from-scratch
    :END:

#+BEGIN_EXAMPLE
  ELISP> (setq foo 10)
  10
  ELISP> (while (> foo 0)
       (insert "testing")
       (newline)
       (setq foo (- foo 1)))
  nil
  ELISP> testing
  testing
  testing
  testing
  testing
  testing
  testing
  testing
  testing
  testing
#+END_EXAMPLE

*** Printing with loops within loops with =dotimes=
    :PROPERTIES:
    :CUSTOM_ID: printing-with-loops-within-loops-with-dotimes
    :END:

#+BEGIN_EXAMPLE
  ELISP> (dotimes (outer-count 10)
       (dotimes (inner-count outer-count)
       (insert "?"))
       (insert "! "))
  nil
  ELISP> ! ?! ??! ???! ????! ?????! ??????! ???????! ????????! ?????????! 
#+END_EXAMPLE

*** Asking for a response
    :PROPERTIES:
    :CUSTOM_ID: asking-for-a-response
    :END:

#+BEGIN_EXAMPLE
  ELISP> (setq foo (read))
#+END_EXAMPLE

*** Using =defun=
    :PROPERTIES:
    :CUSTOM_ID: using-defun
    :END:

#+BEGIN_EXAMPLE
  ELISP> (defun repeater (num-times print-what)
       (dotimes (counter num-times)
       (insert print-what)))
  repeater
  ELISP> (repeater 10 "!?")
  nil
  ELISP> !?!?!?!?!?!?!?!?!?!?
#+END_EXAMPLE

To run a =defun= or other Lisp outside of =ielm=, type =M-:= to get a Lisp prompt at the bottom of the screen, then type the Lisp you want. Press up-arrow to look for previous commands you typed.

If Emacs reports an error, you'll see a =Backtrace= buffer appear which says =Debugger entered= on its top line. Type =q= to get rid of that, and try again.

More in [[/project/emacs-animation/lisp2.html][Emacs Lisp programming pt. 2]].
