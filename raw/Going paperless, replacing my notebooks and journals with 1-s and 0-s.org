#+TITLE: Going paperless, replacing my notebooks and journals with 1's and 0's
#+URL: https://admiralakber.github.io/2016/12/21/emacs-org-mode-journal-and-log/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 10月 19日 星期五 12:56:45 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
The motivation is always clear but the execution almost always falls
动机总是很明确，但执行力几乎总是下降
short. At least, that has been my experience with trying to go
短。至少，这是我尝试离开的经历
paperless in the past. I just couldn't find anything that could beat
过去是无纸化的。我就是找不到比它更好的
the simple, intuitive, and fast user experience of picking up a pen
简单，直观，快速的用户体验拿起一支笔
and scribbling in a hard covered notebook.
在一个硬皮笔记本上乱写。

Not only is paper easy to use for the person creating the material, it
纸不仅对于创造材料的人来说很容易使用，它也很容易被利用
is also easy to share, or keep secure. But, “insert all obvious
也很容易分享，或保持安全。但是，“插入所有明显的
motivations for going paperless”, so I rolled my own solution that
我自己的解决方案
addresses the above shortcomings. I have been using this setup for 8
解决上述缺点。我已经用了8次了
months now with mostly positive results, this is the full story.
几个月来，结果大多是积极的，这就是全部。

* What is it?
什么事?
:PROPERTIES:
属性:
:CUSTOM_ID: what-is-it
:CUSTOM_ID:它是什么
:END:
结束:

As simple as pen and paper but not, then what is it? I mostly use
像纸和笔一样简单但不，那么它是什么呢?我主要是用
paper to write and read words and numbers--isn't it obvious that plain
纸是用来写和读单词和数字的，这难道不明显吗
text files the answer? I usually have a different book for each
文本文件的答案?我通常有不同的书
topic--easy, I just need a folder for each book. I usually rule off or
简单，我只需要每本书都有一个文件夹。我通常划掉或
start a new page for each day--again easy, a file for each day. That's
每天打开一个新的页面——同样简单，每天打开一个文件。这是
the back end sorted: easy to write, easy to read, easy to share. Now
后端排序:容易写，容易读，容易分享。现在
how do I make interacting with it just as easy?
我如何让与它的交互变得如此简单?

* Making it natural
*让它自然
:PROPERTIES:
属性:
:CUSTOM_ID: making-it-natural
:CUSTOM_ID making-it-natural
:END:
结束:

At this point I must mention that having my computer at hand is as
在这一点上，我必须提到，有我的电脑在手边是作为
natural to me as having a paper and pen. Enter
对我来说就像纸和笔一样自然。输入
[[https://www.gnu.org/software/emacs/][emacs]], a (great) text editor
[[https://www.gnu.org/software/emacs/][emacs]]，一个(伟大的)文本编辑器
that is free, extensible, and customizable. An obvious solution, a
它是免费的、可扩展的和可定制的。一个明显的解决方案是a
text editor as a front end to a collection of text files. There's one
文本编辑器作为文本文件集合的前端。有一个
more thing though, and that's a feature of emacs itself; [[http://orgmode.org/][org
更重要的是，这是emacs本身的一个特性;[[http://orgmode.org/] [org
mode]] is what's called a “major mode” that comes
模式就是我们所说的“主模式”
with emacs. Skip the technicalities, it's what gives you all the fancy
emacs。跳过技术细节，它会给你所有的幻想
features that are part of the “obvious motivations for going
功能是“去的明显动机”的一部分
paperless” but still using plain text files.
但仍然使用纯文本文件。

Both emacs and org mode are mature and [[https://www.gnu.org/philosophy/free-sw.html][philosophically free
emacs和org模式都是成熟的，并且[[https://www.gnu.org/ophy/freesw.html][在哲学上是免费的
software]], I have no
软件]]，我没有
hesitation intimately integrating them into my life. This is quite
犹豫把它们紧密地融入了我的生活。这是相当
important to me, as anyone who writes their thoughts on paper a lot
这对我来说很重要，因为每个人都会把自己的想法写在纸上
would tell you--a rapport between you and your notebook and pen
会告诉你——你和你的笔记本和笔之间的关系
grows. Also related is the encoding of the plain text files, after
生长。还与纯文本文件的编码有关
all--I am actually storing 1's and 0's now, they just happen to look
所有——实际上我现在存储的是1和0，它们只是看起来
like letters when decoded in a certain way. I am happy to use the ever
当以某种方式解码时，就像字母一样。我很高兴用曾经
ubiquitous UTF-8 encoding standard, 10, 20, 30 years down the track I
无处不在的UTF-8编码标准，10年，20年，30年的跟踪I
or someone else could probably make whatever machines we would be
或者其他人可以制造任何我们想要的机器
using by then decode this format.
然后使用解码这种格式。

* Setting it up
*设置
:PROPERTIES:
属性:
:CUSTOM_ID: setting-it-up
:CUSTOM_ID:设置
:END:
结束:

Some setup is required of both emacs and org mode before becomes the
在成为。之前，emacs和org模式都需要一些设置
paperless solution of my dreams. Luckily, [[http://howardism.org/Technical/Emacs/journaling-org.html][Howard Abrams has done most
无纸化的解决方案是我的梦想。幸运的是，[[http://howardism.org/Technical/Emacs/journaling-org.html]]艾布拉姆斯做得最多
the work]], I
工作]],我
have built and modified this setup to behave how I described above
已经建立和修改了这个设置，以表现我上面所描述的
i.e. emulating the paper experience.
即模仿纸张经验。

For reference, when hotkeys are mentioned =C=, =M=, and =S= correspond
作为参考，当提到热键=C=， =M=， =S=对应时
to Control, Meta (alt), and Super (win key) respectively. Here on in,
分别控制，Meta (alt)， Super (win key)。在这里,
I assume you have emacs installed and functioning. I am using a
我假设您已经安装并运行了emacs。我用的是
GNU/Linux based operating system, however it should be operating
基于GNU/Linux的操作系统，但是它应该是可操作的
system agnostic up to file paths.
系统不可知的文件路径。

** Two files for clarity
**两个文件，以澄清
:PROPERTIES:
属性:
:CUSTOM_ID: two-files-for-clarity
:CUSTOM_ID two-files-for-clarity
:END:
结束:

I use two configuration files: =~/.emacs.d/init.el= for global emacs
我使用两个配置文件:=~/.emacs.d/init。el=全局emacs
settings and =~/.emacs.d/modules/org-init.el= for my org mode
设置和= ~ / / org-init .emacs.d /模块。el=我的org模式
settings. I have separated them for clarity only. The following code
设置。我把它们分开只是为了清楚。下面的代码
snippets go in these files.
这些文件中有代码片段。

*** =~/emacs.d/init.el=
* * * = ~ / emacs.d / init.el =
:PROPERTIES:
属性:
:CUSTOM_ID: emacsdinitel
:CUSTOM_ID emacsdinitel
:END:
结束:

Starting with the aesthetics, first and foremost, I want emacs to be
从美学开始，首先也是最重要的，我希望emacs是
less distracting.
少让人分心。

#+BEGIN_EXAMPLE
;; Disable the toolbar/menu/scrollbar/tooltips
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)

;; Disable the welcome, give me scratch space
(setq inhibit-startup-screen 1)
#+END_EXAMPLE

Just me and the words now. You can always access the menu by =C-<mouse 2>= i.e. control + right click, inside the emacs window. Next, I
现在只有我和歌词。你总是可以访问菜单=C-<鼠标2>=即控制+右键点击，在emacs窗口内。接下来,我
prefer to write on ruled paper.
喜欢在横格纸上写字。

#+BEGIN_EXAMPLE
;; Line highlighting/numbering
(global-linum-mode 1)
(global-hl-line-mode 1)
#+END_EXAMPLE

Furthermore, when nearing the end of a line, wrapping at the word is a
此外，当接近一行的末尾时，换行是a
lot more natural.
更多的自然。

#+BEGIN_EXAMPLE
;; Natural reading, wrap at the word
(setq-default word-wrap 1)
#+END_EXAMPLE

When I am writing a paragraph in emacs I “manually” force the text
当我在emacs中编写一个段落时，我“手动”强制文本
onto the next line if it extends beyond 72 characters wide. I do this
如果它的宽度超过72个字符，则转到下一行。我这样做
with the =M-q= keybinding. I think of it like the carriage return on a
使用=M-q=键绑定。我把它想成是a上的回车
mechanical typewriter, I want my notes and journal entries to always
机械打字机，我要我的笔记和日记永远
fit within a certain width “paper”. That's the aesthetic side of
适合一定宽度的“纸”。这是美学的一面
things sorted, apart from a colour theme of your choice, it now gets a
事情排序，除了你选择的颜色主题，它现在得到一个
little more interesting.
更有趣。

Part of being a scientist is being honest, transparent, and
成为一个科学家的一部分是诚实、透明和
accountable about of thoughts, methods, and results to myself and to
对自己的想法、方法和结果负责
others. Discipline and trust has traditionally made a paper log book
别人。纪律和信任是传统的纸质日志
with entries written in indelible more than good enough for this
用擦不掉的文字写下来就足够了
purpose. In digital document there is no such security--files can be
目的。在数字文档中不存在这种安全性——文件可以
overwritten and you could find it very difficult to determine if it
覆盖，你会发现很难确定它是否
was edited, let alone what was changed. However, this ease of editing
都被编辑了，更不用说什么被改变了。不过，这种编辑方便
also means that the records can be re-written to be more clear and
也意味着记录可以重写得更清楚和
ultimately of higher quality.
最终是更高的质量。

A simple solution to this problem is to keep a record of the changes,
解决这个问题的一个简单方法是记录这些变化，
and the simplest way to do that just keep a backup of each file when
最简单的方法就是备份每个文件
it's edited. Sure, it'll take up more space but disk is cheap and
这是编辑。当然，它会占用更多的空间，但磁盘很便宜
plain text is easily compressible.
纯文本很容易压缩。

#+BEGIN_EXAMPLE
;; Change backup settings
(setq version-control t ;; OpenVMS-esque
backup-by-copying t ;; Copy-on-write-esque
kept-new-versions 64 ;; Indeliable-ink-esque
kept-old-versions 0 ;;
delete-old-versions nil ;;
)
(setq backup-directory-alist ;; Save backups in $(pwd)/.bak
'(("." . ".bak")) ;;
)
#+END_EXAMPLE

With this configuration, emacs will keep up to 64 previous iterations
有了这个配置，emacs将保持以前的64次迭代
of a file instead of overwriting it and losing all the existing
而不是覆盖它并丢失所有现有的
information. The backed up versions are saved in a hidden folder
信息。备份版本保存在一个隐藏的文件夹中
created called =.bak= at the location of the file. Of course this
创建名为=。bak=在文件的位置。当然,这
isn't bulletproof accountability, trust and discipline is still
问责、信任和纪律不是万无一失的吗
necessary and must be accepted.
必要的，必须被接受的。

For sensitive notes and journal entries, I want to employ
对于敏感的笔记和日志条目，我想使用
encryption. Auto-saving is a security hazard for these files as it
加密。自动保存对于这些文件本身就是一个安全隐患
will write a decrypted version of the file temporarily to disk.
将文件的解密版本临时写入磁盘。

#+BEGIN_EXAMPLE
;; Disable auto-saving
(setq auto-save-default nil)
#+END_EXAMPLE

Now, moving onto configuring org mode, I need to tell emacs where this
现在，转到配置org模式，我需要告诉emacs这是在哪里
other file is.
其他文件。

#+BEGIN_EXAMPLE
;; Load other module / package settings
(add-to-list 'load-path "~/.emacs.d/modules")
(load-library "org-init")
#+END_EXAMPLE

All the above can be put in your =~/emacs.d/init.el= file in any order
所有这些都可以放在你的=~/emacs.d/init中。文件按任意顺序排列
and along with other code.
以及其他代码。

*** =~/.emacs.d/modules/org-init.el=
* * * = ~ / .emacs.d /模块/ org-init.el =
:PROPERTIES:
属性:
:CUSTOM_ID: emacsdmodulesorg-initel
:CUSTOM_ID emacsdmodulesorg-initel
:END:
结束:

Moving on, first some key bindings for use later, enable encrypted
继续，首先是一些密钥绑定，稍后使用，启用加密
files support, UTF-8 encoding, and some minor (optional) usability
文件支持、UTF-8编码和一些次要的(可选的)可用性
features.
特性。

#+BEGIN_EXAMPLE
;; Initialize Org Mode
(require 'org)

;; Simple org key bindings
(define-key global-map "C-cl" 'org-store-link)
(define-key global-map "C-ca" 'org-agenda)
(setq org-log-done t)

;; ------------------------
;; ADVANCED CUSTOMISATION !
;; ------------------------

;; Enable symmetric encrpytion support
(require 'org-crypt)
(setq epg-gpg-program "gpg2")
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)

;; Set the encoding to utf-8
(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

;; Don't allow editing of folded regions
(setq org-catch-invisible-edits 'error)

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable indentation view, does not effect file.
(setq org-startup-indented t)
#+END_EXAMPLE

Not everything can be described in plain text, however using org mode
并不是所有内容都可以用纯文本描述，但是可以使用org模式
human readable soft links are supported; thus, attachments are
支持人类可读的软链接;因此,附件是
supported as soft links to an external file. I like to make org mode
支持作为软链接到外部文件。我喜欢组织模式
copy any attachment into a folder called =attach= that gets created
将任何附件复制到创建的名为=attach=的文件夹中
along side the plain text file.
在纯文本文件旁边。

#+BEGIN_EXAMPLE
;; Make attachments be copied / assigned a uuid
;; and placed in a appropiate folder
(setq org-id-method (quote uuidgen))
(setq org-attach-directory "attach/")
#+END_EXAMPLE

This is the part we've all been waiting for--making opening a plain
这是我们一直在等待的部分——打开平原
text file as intuitive as opening a book onto a new page. Edit the
文本文件像打开一本书到一个新的页面一样直观。编辑
variables =journal-author=, =journal-base-dir=, and =journal-books=
变量=journal-author=， =journal-base-dir=， =journal-books=
here to suit your needs.
这里可以满足您的需要。

#+BEGIN_EXAMPLE
;; ----------------
;; JOURNAL SYSTEM !
;; ----------------

;; SETUP A ROBUST / GENERAL JOURNAL SYSTEM
;; I have modified this from:
;; http://www.howardism.org/Technical/Emacs/journaling-org.htm
;; Aqeel Akber, 2016 (@AdmiralAkber)

;; Author name to be auto inserted in entries
(setq journal-author "Aqeel Akber")

;; This is the base folder where all your "books"
;; will be stored.
(setq journal-base-dir "~/ORG/")


;; These are your "books" (folders), add as many as you like.
;; Note: "sub volumes" are acheivable with sub folders.
(setq journal-books '("nuclphys"
"nuclphys/labr"
"personal"
"saferad"))

;; Functions for journal
(defun get-journal-file-today (book)
"Return today's filename for a books journal file."
(interactive (list (completing-read "Book: " journal-books) ))
(expand-file-name
(concat journal-base-dir book "/J"
(format-time-string "%Y%m%d") ".org" )) )

(defun journal-today ()
"Load todays journal entry for book"
(interactive)
(find-file (call-interactively 'get-journal-file-today)) )

(defun journal-entry-date ()
"Inserts the journal heading based on the file's name."
(when (string-match
"\(J\)\(20[0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)\(.org\)"
(buffer-name))
(let ((year (string-to-number (match-string 2 (buffer-name))))
(month (string-to-number (match-string 3 (buffer-name))))
(day (string-to-number (match-string 4 (buffer-name))))
(datim nil))
(setq datim (encode-time 0 0 0 day month year))
(format-time-string "%Y-%m-%d (%A)" datim))))

;; Auto-insert journal header
(auto-insert-mode)
(eval-after-load 'autoinsert
'(define-auto-insert
'("\(J\)\(20[0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)\(.org\)" . "Journal Header")
'("Short description: "
"#+TITLE: Journal Entry - "
(car
(last
(split-string
(file-name-directory buffer-file-name) "/ORG/"))) n
(concat "#+AUTHOR: " journal-author) n
"#+DATE: " (journal-entry-date) n
"#+FILETAGS: "
(car
(last
(split-string
(file-name-directory buffer-file-name) "/ORG/"))) n n
> _ n
)))

;; Journal Key bindings
(global-set-key (kbd "C-c j") 'journal-today)
#+END_EXAMPLE

There is one more thing left to do, make org mode aware of the files
还有一件事要做，让org模式知道这些文件
stored in these folders. Remember those fancy features? This enables
存储在这些文件夹中。还记得那些奇特的特征吗?这使
it and that's the setup done.
这就是建立的过程。

#+BEGIN_EXAMPLE
;; Set Org directories [Remember to update with journal books]
(setq org-agenda-files (list "~/ORG/nuclphys"
"~/ORG/nuclphys/labr"
"~/ORG/personal"
"~/ORG/saferad"))
#+END_EXAMPLE

* Usage and workflow
*使用方法及工作流程
:PROPERTIES:
属性:
:CUSTOM_ID: usage-and-workflow
:CUSTOM_ID usage-and-workflow
:END:
结束:

The crux of this system relies on emacs and org-mode, both of which
本系统的关键在于emacs和org模式，两者都是
are very well documented. What I have focused on describing in this
都有详细的记录。我在这里重点描述的是什么
section is the small subset of capabilities that are relevant to this
section是与此相关的一小部分功能
article. If it looks like something you like, then I strongly
篇文章。如果它看起来像你喜欢的东西，那么我非常喜欢
encourage you look up other org-mode tutories to get a taste of what
鼓励你去找其他的组织模式的导师来尝试一下
else can be done.
其他的可以做。

** Quick start
* *快速启动
:PROPERTIES:
属性:
:CUSTOM_ID: quick-start
:CUSTOM_ID:快速启动
:END:
结束:

In the video:
视频:

- Open book, =personal=, to today's page =C-c j=
打开书，=个人=，到今天的页面=C-c j=
- Insert a header as file hasn't been created yet =y=
-插入一个头文件还没有创建=y=
- Add a entry headline by starting line with *
-以*开头添加条目标题
- Clock in =C-c C-x C-i=
-时钟输入=C-c C-x C-i=
- Expanded “LOGBOOK” =TAB=
-扩展“日志”=TAB=
- Moved to end of file =M->=
-移动到文件结束=M->=
- Forced wrap on final sentence =M-q=
-最后一句强制换行=M-q=
- Clock out =C-c C-x C-o=
-时钟输出=C-c C-x C-o=
- Saving =C-c C-s=
-保存=C-c C-s=
- Exit emacs =C-c C-x=
-退出emacs =C-c C-x=

** Searching
* *搜索
:PROPERTIES:
属性:
:CUSTOM_ID: searching
:CUSTOM_ID:搜索
:END:
结束:

In the video:
视频:

- Open =org-agenda= with =C-c a=
-打开=组织议程= with =C-c a=
- Select search with =s=
-选择search with =s=
- Type keyword/regex pattern and press =RET=
-键入关键字/正则表达式模式并按=RET=
- Select file from the list to open it, or press =x= to exit the search.
-从列表中选择file打开它，或者按=x=退出搜索。

I didn't open any files in the video for privacy reasons. The point of
出于隐私原因，我没有打开视频中的任何文件。的意义
notice is that org-mode can actually search through the body of your
请注意，组织模式实际上可以搜索你的身体
files.
文件。

** Tasks
* *任务
:PROPERTIES:
属性:
:CUSTOM_ID: tasks
:CUSTOM_ID:任务
:END:
结束:

Now that you know the basics, let's get fancy. This may be a
既然你已经知道了基本知识，让我们来想象一下吧。这可能是
little complicated at first, the basic principle is that org-mode will
一开始有点复杂，基本的原则是组织模式会
treat any headlines in your files that start with “TODO” or “DONE” as
将文件中以“TODO”或“DONE”开头的标题视为
special items. These then can be listed elegantly with
特殊项目。这些都可以优雅地列出
=org-agenda=. Other than that, you can treat these entries like any
= org-agenda =。除此之外，您可以将这些项视为任意项
other.
其他。

In the video:
视频:

- Toggled a headline into a TODO item with =C-c C-t=
-用=C-c C-t=将标题切换为TODO项
- Added a deadline with =C-c C-d=
-添加了一个最后期限=C-c C-d=
- You can also just manually type TODO at the start of a headline.
-你也可以在标题的开头手动输入TODO。
- Clocking in / Clocking out is always good. I could write the whole
打卡/打卡总是好的。我可以写整个
paper here.
纸在这里。
- =Shift-TAB= can toggle visibility of all headlines, or =TAB= on a
- =Shift-TAB=可以切换所有标题的可见性，或者=TAB= on a
single one.
一个。
- Saved the file, and closed the buffer with =C-x k RET=
-保存文件，并关闭缓冲区=C-x k RET=
- Now entering =org-agenda= but pressing =t= shows TODO items
-现在输入=org-agenda=但按=t=显示待办事项
- Selecting an item and pressing =t= toggles its completion status
-选择一个项目，并按=t=切换其完成状态
- As usual, =x= to quit =org-agenda= and saved any changes
-和往常一样，=x= to quit =org-agenda=并保存所有更改
- Back to =org-agenda= press =a= to get the agenda for the current
-返回=org-agenda= press =a=获取当前的议程
week. Use =f= and =b= to go forward / back a week.
的一周。使用=f=和=b=向前/向后一周。
- Selecting the file and pressing =RET= opens it, use =C-x 1= to
-选择文件并按=RET=打开它，使用=C-x 1= to
get rid of the split buffer.
去掉分割缓冲区。

** Password protection / Encryption
**密码保护/加密
:PROPERTIES:
属性:
:CUSTOM_ID: password-protection--encryption
:CUSTOM_ID:密码保护,加密
:END:
结束:

A very handy feature and very easy to use.
一个非常方便的功能和非常容易使用。

In the video:
视频:

- Added a sub-heading by using 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh (you can do this anywhere)
——添加子标题用0 _sync_master.sh 1 _add_new_article_manual.sh 1 _add_new_article_newspaper.sh 2 _start_translating.sh 3 _continue_the_work.sh 4 _finish.sh 5 _pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh(你可以在任何地方)
- Put the magic words =:crypt:= at the end of the headline
-在标题的末尾加上神奇的单词=:crypt:=
- Saved the file, followed the prompts for a password, closed emacs.
-保存文件，按照提示输入密码，关闭emacs。
- Shown that the file is indeed encrypted on disk
-显示文件确实加密在磁盘上
- Opened file and decrypted the headline with =M-x org-decrypt-entry=
-打开文件，并使用=M-x org-decrypt-entry=解密标题
- Can now view and edit as per normal, upon saving it encrypts again.
-现在可以按正常查看和编辑，保存它再次加密。

This really doesn't need a video, just press =C-c C-a= in any org-mode
这真的不需要视频，只要按=C-c -a=在任何组织模式
file and follow the prompts to add an attachment. For cross-links,
按照提示添加附件。使交联,
select any headline and press =C-c l= to store a link, then =C-c C-l=
选择任何标题并按=C-c l=存储链接，然后=C-c C-l=
to paste it in another org-mode file. To follow any of these links use
将其粘贴到另一个组织模式文件中。跟随任何这些链接使用
the binding =C-c C-o=
绑定=C-c C-o=

** Other tips
* *其他技巧
:PROPERTIES:
属性:
:CUSTOM_ID: other-tips
:CUSTOM_ID:其他技巧
:END:
结束:

*** Make lots of books!
***做很多书!
:PROPERTIES:
属性:
:CUSTOM_ID: make-lots-of-books
:CUSTOM_ID make-lots-of-books
:END:
结束:

It costs nothing and will make your life easier. Have a book
它不花费任何东西，会让你的生活更轻松。有一本书
specifically for conferences, make a new one for each project. It'll
特别对于会议，为每个项目制作一个新的。它会
make your life easier when you're trying to look up past entries.
当你试图查找过去的条目时，让你的生活更轻松。

*** Keep customizing emacs!
***继续定制emacs!
:PROPERTIES:
属性:
:CUSTOM_ID: keep-customizing-emacs
:CUSTOM_ID keep-customizing-emacs
:END:
结束:

Make it your own, enjoy it! There are thousands of packages available
让它成为你自己的，享受它!有成千上万的软件包
on [[https://melpa.org/][MELPA]]. You can install them directly from
在[[https://melpa.org/] [MELPA]]。您可以直接安装它们
within emacs with =list-packages=, and all of the ones that I've tried
在emacs中使用=list-packages=，以及我尝试过的所有方法
have been awesome. My favourite one that might be relevant to mention
太棒了。我最喜欢的一个可能是相关的
here is =org-gcal=. This synchronized my google calendar into an
这是= org-gcal =。这同步我的谷歌日历到一个
org-mode file, I can then view it via the org agenda. Other favourites
组织模式文件，然后我可以通过组织议程查看它。其他热门
of mine that you have seen in the vidoes are =company= (auto
你在视频中看到的是我的
completion) and =helm= (fancy =M-x=).
完成)和=helm=(花式=M-x=)。

* Conclusions
*结论
:PROPERTIES:
属性:
:CUSTOM_ID: conclusions
结论:CUSTOM_ID:
:END:
结束:

As I said earlier, I have been using this setup for 8 months. I can
如前所述，我已经使用这个设置8个月了。我可以
comfortably say it has completely replaced paper for my memoirs and
可以说它完全取代了我的回忆录和
has encouraged good habits. For a replacement to my science log book,
养成了良好的习惯。代替我的科学日志
I would say it has been about 90% successful. It fails in two things,
我认为它已经取得了90%的成功。它失败在两方面，
mathematics and sketching. Yes, [[http://orgmode.org/manual/LaTeX-fragments.html][org-mode does support LaTeX]] and there is [[https://www.emacswiki.org/emacs/ArtistMode][Artist mode]] but it's not
数学和草图。是的，[[http://orgmode.org/manual/LaTeX-fragments.html][org-mode支持LaTeX]]也有[[https://www.emacswiki.org/emacs/ArtistMode][艺术家模式]]，但它不是
quite as good as paper and pen, yet. Other than that, I'm paperless.
还和纸笔一样好。除此之外，我没有纸。
