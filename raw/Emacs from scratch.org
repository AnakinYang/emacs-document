#+TITLE: Emacs from scratch
#+URL: https://huytd.github.io/emacs-from-scratch.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 06日 星期五 14:41:14 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Spacemacs is the first Emacs version I used, so I'm kind of attached to the =evil-mode= and =SPC= mnemonic key binding.
Spacemacs是我使用的第一个Emacs版本，因此我附加了=evil-mode=和=SPC=助记键绑定。

But I always have a feeling that something is not right, Spacemacs hides a lot of things under the hood, and it loads a lot of stuff that I do not need during the startup. This would be a huge waste, and I need to have a fresh setup that I can control every single thing in my editor.
但我总觉得有些地方不对劲，Spacemacs隐藏了很多东西，它装载了很多我启动时不需要的东西。这将是一个巨大的浪费，我需要有一个新的设置，我可以控制我的编辑器中的每件事。

So I created my own Emacs configuration, it's surprisingly easier than as I thought.
所以我创建了自己的Emacs配置，它比我想象的要简单得多。

[[https://huytd.github.io/img/custom-emacs.png]]
[[https://huytd.github.io/img/custom-emacs.png]]

In this post, I'll go through the steps I built a minimal Spacemacs-like version, with some basic key binding:
在这篇文章中，我将通过一些基本的键绑定，详细介绍我构建了一个最小的类太空飞船版本的步骤:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
General:
一般:
SPC / : ripgrep
SPC /: ripgrep
SPC TAB : previous buffer
SPC标签:以前的缓冲
SPC SPC : Open M-x
SPC:打开M-x

Files:
文件:
SPC p f : find files
SPC p f:查找文件

Buffers:
缓冲区:
SPC b b : buffers list
SPC b b:缓冲器列表

Window:
亮点:
SPC w l : move right
SPC wl:向右移动
SPC w h : move left
SPC w h:向左移动
SPC w j : move down
SPC wj:向下移动
SPC w k : move up
SPC w k:向上移动
SPC w / : split right
SPC w /:右劈
SPC w - : split bottom
SPC w -:开底
SPC w x : close window
SPC w x:关闭窗口

Other:
其他:
SPC a t : open terminal in current buffer
SPC a t:打开电流缓冲器中的终端
#+END_SRC
# + END_SRC

* 1 Configuration file
* 1配置文件

First, we need to create a =init.el= file:
首先，我们需要创建一个=init。el =文件:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
$ mkdir -p ~/.emacs.d
$mkdir - p~/.emacs.d
$ touch ~/.emacs.d/init.el
$ ~ / .emacs.d / init.el联系
#+END_SRC
# + END_SRC

Now, Emacs will start with the ugly tools bar and status bar, just like any editor that I would uninstall right away. Let's change this.
现在，Emacs将从丑陋的工具栏和状态栏开始，就像我将立即卸载的任何编辑器一样。让我们改变这种情况。

* 2 Minimal UI
* 2最小用户界面

Now, we need to disable all the ugly stuff and make Emacs just as clean and clear as Vim or Sublime, Atom,... or whatever modern editor today has.
现在，我们需要禁用所有丑陋的东西，让Emacs像Vim或Sublime、Atom一样干净、清晰……或者任何现代的编辑。

Put these to the beginning of your =init.el=:
把这些放在你的=init.el=的开头:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Minimal UI
;;最小的用户界面
(scroll-bar-mode -1)
(scroll-bar-mode达到华)
(tool-bar-mode -1)
(tool-bar-mode 1)
(tooltip-mode -1)
(tooltip-mode 1)
(menu-bar-mode -1)
(menu-bar-mode 1)
#+END_SRC
# + END_SRC

* 3 Font and Frame Size
* 3字体和框架大小

By default, Emacs will starts with a default monospace font and squared size window. We can change this by adding these settings:
默认情况下，Emacs将从默认的monospace字体和平方大小窗口开始。我们可以通过添加以下设置来改变:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
(add-to-list 'default-frame-alist '(font . "mononoki-12"))
附加列表“默认框架”(字体)。“mononoki-12”))
(add-to-list 'default-frame-alist '(height . 24))
添加到列表的“默认框架”(高度)。24))
(add-to-list 'default-frame-alist '(width . 80))
添加到列表的“默认框架”(宽度)。80))
#+END_SRC
# + END_SRC

In the above config, we set the default font face to =mononoki= and font size is =12=. We also set the frame dimension into =80x24=, just like any default terminal emulator size.
在上面的配置中，我们将默认的字体字体大小设置为=mononoki=和=12=。我们还将帧尺寸设置为=80x24=，就像任何默认的终端模拟器大小一样。

Next, we'll add a package manager to start installing themes/packages.
接下来，我们将添加一个包管理器来开始安装主题/包。

* 4 Package Manager
* 4包管理器

By default, Emacs is configured to use =ELPA= package archive, we'll need to add more repository such as =GNU ELPA=, =MELPA=,...
默认情况下，Emacs被配置为使用=ELPA= package archive，我们需要添加更多的库，如=GNU ELPA=， =MELPA=，…

Put this to the beginning of your =init.el=:
把这个放到你的=init.el=的开头:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Package configs
;;包款
(require 'package)
(需要的包)
(setq package-enable-at-startup nil)
(setq package-enable-at-startup nil)
(setq package-archives '(("org" . "http://orgmode.org/elpa/")
(setq包-归档)。“http://orgmode.org/elpa/”)
("gnu" . "http://elpa.gnu.org/packages/")
(“gnu”。“http://elpa.gnu.org/packages/”)
("melpa" . "https://melpa.org/packages/")))
(“melpa”。" https://melpa.org/packages/ ")))
(package-initialize)
(package-initialize)
#+END_SRC
# + END_SRC

Next, we'll use [[https://github.com/jwiegley/use-package][use-package]] to configure our packages better, in case you don't know, this package provides a macro to allow you to easily install packages and isolate package configuration in a way that is both performance-oriented and tidy.
接下来，我们将使用[[https://github.com/jwiegley/use-package][use-package]]来更好地配置我们的包，以防您不知道，这个包提供了一个宏，允许您轻松地安装包并以一种面向性能和整洁的方式隔离包配置。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Bootstrap `use-package`
;;引导“use-package”
(unless (package-installed-p 'use-package)
(除非(package-installed-p use-package)
(package-refresh-contents)
(package-refresh-contents)
(package-install 'use-package))
(package-install use-package))
(require 'use-package)
(需要的use-package)
#+END_SRC
# + END_SRC

* 5 Vim key binding with Evil Mode
* 5 Vim键绑定邪恶模式

Now that you have package manager setted up, let's install our first package: =evil-mode=, this package allows you to use Vim-like key binding in Emacs.
现在已经设置好了包管理器，让我们安装第一个包:=evil-mode=，这个包允许您在Emacs中使用类似于vm的键绑定。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Vim mode
;;Vim模式
(use-package evil
(use-package邪恶
:ensure t
t:称
:config
:配置
(evil-mode 1))
(evil-mode 1))
#+END_SRC
# + END_SRC

I personally prefer using =jk= for escape key, so I'll install =evil-escape= and have this setting:
我个人更喜欢使用=jk=的转义键，所以我将安装=evil-escape=和有这样的设置:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
(use-package evil-escape
(use-package evil-escape
:ensure t
t:称
:init
:init
(setq-default evil-escape-key-sequence "jk")
(setq-default evil-escape-key-sequence“jk”)
:config
:配置
(evil-escape-mode 1))
(evil-escape-mode 1))
#+END_SRC
# + END_SRC

That's it! Now restart your Emacs, you'll see the mode line displaying the current Vim mode, and you'll be able to navigate with =hjkl=.
就是这样!现在重新启动Emacs，您将看到显示当前Vim模式的模式行，您将能够使用=hjkl=进行导航。

* 6 Installing Theme
* 6安装主题

One of the best theme for Emacs I could found is =doom-themes= package, that has a lot of cool themes. The following code will install this package and load its flagship theme =doom-one=:
我能找到的Emacs的最佳主题之一是=doom-themes= package，它有很多很酷的主题。下面的代码将安装这个包并加载它的旗舰主题=doom-one=:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Theme
;;主题
(use-package doom-themes
(use-package doom-themes
:ensure t
t:称
:config
:配置
(load-theme 'doom-one t))
(load-theme ' doom-one t))
#+END_SRC
# + END_SRC

* 7 Installing Helm
* 7安装舵

[[https://github.com/emacs-helm/helm][Helm]] is a framework for incremental completions and narrowing selections in Emacs. Many people prefer =ivy= because it's much lighter, for me, it's doesn't matter. I find =helm= is easier to use and config.
[[https://github.com/emacs-helm/helm][Helm]]是Emacs中用于增量完井和缩小选择范围的框架。许多人喜欢=ivy=因为它更轻，对我来说，这无所谓。我发现=helm=更容易使用和配置。

The following snippet will install =helm= and configure /fuzzy matching/:
下面的代码片段将安装=helm=和配置/fuzzy matching/:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Helm
;;头盔
(use-package helm
(use-package舵
:ensure t
t:称
:init
:init
(setq helm-M-x-fuzzy-match t
(setq helm-M-x-fuzzy-match t
helm-mode-fuzzy-match t
helm-mode-fuzzy-match t
helm-buffers-fuzzy-matching t
helm-buffers-fuzzy-matching t
helm-recentf-fuzzy-match t
helm-recentf-fuzzy-match t
helm-locate-fuzzy-match t
helm-locate-fuzzy-match t
helm-semantic-fuzzy-match t
helm-semantic-fuzzy-match t
helm-imenu-fuzzy-match t
helm-imenu-fuzzy-match t
helm-completion-in-region-fuzzy-match t
helm-completion-in-region-fuzzy-match t
helm-candidate-number-list 150
helm-candidate-number-list 150
helm-split-window-in-side-p t
helm-split-window-in-side-p t
helm-move-to-line-cycle-in-source t
helm-move-to-line-cycle-in-source t
helm-echo-input-in-header-line t
helm-echo-input-in-header-line t
helm-autoresize-max-height 0
helm-autoresize-max-height 0
helm-autoresize-min-height 20)
helm-autoresize-min-height 20)
:config
:配置
(helm-mode 1))
(helm-mode 1))
#+END_SRC
# + END_SRC

* 8 Installing Which Key
* 8安装哪个键

In Spacemacs, when you press =SPC= or any other key sequence, a small buffer will be popped up to show the list of features you can do next, installing =which-key= will give you this.
在Spacemacs中，当您按下=SPC=或任何其他键序列时，将弹出一个小缓冲区，显示您下一步可以执行的功能列表，install =which-key=将提供此功能。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Which Key
;;哪个键
(use-package which-key
(use-package哪个键
:ensure t
t:称
:init
:init
(setq which-key-separator " ")
(setq which-key-separator " ")
(setq which-key-prefix-prefix "+")
(setq which-key-prefix-prefix“+”)
:config
:配置
(which-key-mode 1))
(which-key-mode 1))
#+END_SRC
# + END_SRC

* 9 Custom Key Binding
* 9自定义键绑定

Finally, you can start config your custom key binding with =general= package, this is my config, the prefix is =SPC= just like in Spacemacs:
最后，你可以开始配置你的自定义键绑定=general=包，这是我的配置，前缀是=SPC=就像在Spacemacs:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Custom keybinding
;;自定义keybinding
(use-package general
(use-package一般
:ensure t
t:称
:config (general-define-key
:配置(general-define-key
:states '(normal visual insert emacs)
:状态(正常可视插入emacs)
:prefix "SPC"
:前缀“SPC”
:non-normal-prefix "M-SPC"
:non-normal-prefix“M-SPC”
;; "/" '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
;;“/”(顾问rg:哪个键“ripgrep”);你需要一整套的法律顾问
"TAB" '(switch-to-prev-buffer :which-key "previous buffer")
"TAB" '(切换到前一个缓冲区:按下"前一个缓冲区"键)
"SPC" '(helm-M-x :which-key "M-x")
“SPC”(helm-M-x:which-key“M-x”)
"pf" '(helm-find-files :which-key "find files")
“pf”(helm-find-files: whh -key“查找文件”)
;; Buffers
;;缓冲区
"bb" '(helm-buffers-list :which-key "buffers list")
“bb”(helm-buffers-list: whh -key“buffers list”)
;; Window
;;窗口
"wl" '(windmove-right :which-key "move right")
“wl”(向右移动:按下“向右移动”键)
"wh" '(windmove-left :which-key "move left")
“wh”(向左转:向左转键)
"wk" '(windmove-up :which-key "move up")
“wk”(上卷:按下“上卷”键)
"wj" '(windmove-down :which-key "move bottom")
“wj”(向下移动:按下“移动底部”键)
"w/" '(split-window-right :which-key "split right")
“w/”(右分窗键:右分窗键)
"w-" '(split-window-below :which-key "split bottom")
“w-”(分体窗口-下面:哪个键“分体底部”)
"wx" '(delete-window :which-key "delete window")
“wx”(删除窗口:“删除窗口”键)
;; Others
;;其他人
"at" '(ansi-term :which-key "open terminal")
at (ansi-term:which-key "open terminal")
))
#+END_SRC
# + END_SRC

* 10 Matching Titlebar color on MacOS
*在MacOS上匹配10个标题颜色

If you're using Emacs on macOS, you can add this to have your titlebar color changed and matching your color theme:
如果你在macOS上使用Emacs，你可以添加这个来改变标题栏的颜色并匹配你的颜色主题:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Fancy titlebar for MacOS
;;MacOS的花式标题栏
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
附加列表'default- fram- alist '(ns-transparent-titlebar)。t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
add-to-list 'default- framalist '(ns-appearance)。黑暗)
(setq ns-use-proxy-icon nil)
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
(setq frame-title-format nil)
#+END_SRC
# + END_SRC

* 11 Project Management
* 11项目管理

One of the most important thing to install at first is =projectile=, for manage projects in Emacs. In my configuration, I also unset the =projectile-require-project-root= option to have =projectile= recognize any folder as a project, not just ones with project files.
首先要安装的最重要的东西之一是=射弹=，用于在Emacs中管理项目。在我的配置中，我还取消了=project -requir -project-root=选项的设置，以使=投射=将任何文件夹都视为项目，而不仅仅是带有项目文件的文件夹。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Projectile
;;弹
(use-package projectile
(use-package弹
:ensure t
t:称
:init
:init
(setq projectile-require-project-root nil)
(setq projectile-require-project-root nil)
:config
:配置
(projectile-mode 1))
1)(projectile-mode)
#+END_SRC
# + END_SRC

* 12 Optional: NeoTree and Icons
*可选:NeoTree和Icons

One thing that nice to have is =neotree=, which will display the folder tree. In this configuration, I also installed =all-the-icons= so =neotree= can be displayed with some nice graphical icons:
其中一个比较好的是=neotree=，它将显示文件夹树。在这个配置中，我还安装了=all-the-icons= so =neotree=。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; All The Icons
;;所有的图标
(use-package all-the-icons :ensure t)
(use-package all-the-icon:ensure t)

;; NeoTree
;;NeoTree
(use-package neotree
(use-package neotree
:ensure t
t:称
:init
:init
(setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
新主题(if)“图标”箭头)))
#+END_SRC
# + END_SRC

Just don't forget to run =M-x all-the-icons-install-fonts= after start your Emacs for the first time.
只是不要忘记在第一次启动Emacs之后运行=M-x all- icon -install-fonts=。

* 13 Optional: Matching Parentheses
* 13可选:匹配括号

This is a very helpful built-in feature of Emacs, by enable this, it will highlight any matching parentheses that the cursor is on.
这是Emacs的一个非常有用的内置特性，通过启用它，它将突出显示光标所在的任何匹配括号。

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Show matching parens
;;显示匹配的括号
(setq show-paren-delay 0)
(setq show-paren-delay 0)
(show-paren-mode 1)
(show-paren-mode 1)
#+END_SRC
# + END_SRC

* 14 Optional: Disable backup files
* 14可选:禁用备份文件

I find it really annoying when Emacs automatically create a backup file for every buffer you opened, so I [[http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html][disabled it]], you might not want to do this:
当Emacs自动为您打开的每个缓冲区创建一个备份文件时，我发现它真的很烦人，所以我[[http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html][禁用它]]，您可能不想这样做:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
;; Disable backup files
;;禁用备份文件
(setq make-backup-files nil) ; stop creating backup~ files
(设置make-backup-files nil);停止创建备份~文件
(setq auto-save-default nil) ; stop creating #autosave# files
(设置自动保存-默认无);停止创建#autosave#文件
#+END_SRC
# + END_SRC

* 15 Optional: Problem with environment variables
* 15可选:环境变量问题

If you got problem with environment variables or commands, for example, Emacs could not recognize `brew` or something, you might need to load your =.bashrc= or =.bash_profile= manually:
如果您遇到环境变量或命令的问题，例如，Emacs不能识别“brew”或其他什么，您可能需要加载您的=。bashrc =(或=。bash_profile =手动:

#+BEGIN_SRC emacs-lisp
# + BEGIN_SRC emacs lisp
(let ((path (shell-command-to-string ". ~/.bashrc; echo -n $PATH")))
(let ((path (shell-command-to-string))。~ / . bashrc;echo $ PATH - n”)))
(setenv "PATH" path)
(setenv“路径”路径)
(setq exec-path
(setq exec-path
(append
(附加
(split-string-and-unquote path ":")
(split-string-and-unquote路径“:”)
exec-path)))
exec-path)))
#+END_SRC
# + END_SRC

From here, you can continue customizing Emacs as you need, for example, add more language supports, customize your mode line,...
从这里，您可以继续自定义Emacs，例如，添加更多的语言支持，自定义您的模式行，等等。

I hope you'll find this post helpful and will be able to build your own Emacs configuration. Also, you can check my [[https://gist.github.com/huytd/6b785bdaeb595401d69adc7797e5c22c][customized configuration here]].
我希望这篇文章对您有所帮助，并且能够构建您自己的Emacs配置。另外，您可以查看我的[[https://gist.github.com/huytd/6b785bdaeb595401d69adc7797e5c22c][此处定制配置]]。
