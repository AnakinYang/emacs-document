#+TITLE: Blogging with Emacs Org
#+URL: https://www.zcl.space/tools/my-blog-workflow/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 05月 18日 星期五 17:55:07 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Right Now, I use two blog systems to post articles. First, I use the Emacs
现在，我使用两个博客系统来发布文章。首先，我使用Emacs
built-in Org to record my learning on math, computer and wireless
内置的组织，以记录我的学习数学，计算机和无线
communication. For me, the built-in publishing system is obsolete (I am not
沟通。对我来说，内置的发布系统已经过时了
saying Org is obsolete. My life rely heavily on Org.) because I find the
说Org已经过时了。我的生活严重依赖组织)因为我发现
second one is more interesting and flexible to config. The second one is
第二个更有趣，配置更灵活。第二个是
Hugo. Naturally, the Hugo support markdown format. However, I want to use
雨果。当然，Hugo支持markdown格式。但是，我想用
Emacs Org to maintain a tools consistency. Fortunately, there is [[https://ox-hugo.scripter.co/][ox-hugo]], a
维护工具的一致性。幸运的是，有一个[[https://ox-hugo.scripter]。有限公司/][ox-hugo]],一个
project bridging Emacs org and Hugo markdown. Ox-hugo allows you to write
桥接Emacs org和Hugo markdown项目。oxo -hugo允许你写作
your blog using Emacs Org then publish them in the markdwon format
您的博客使用Emacs Org，然后以markdwon格式发布它们
automatically.
自动。

* 1 Writing with Emacs Org publish
* 1使用Emacs Org发布

It's easy to build a static website using [[https://orgmode.org/manual/Publishing.html][Emacs Org]]. [[https://orgmode.org/worg/][Worg]], the Org-mode
使用[[https://orgmode.org/manual/Publishing.html][Emacs Org]]很容易构建一个静态网站。[[https://orgmode.org/worg/] [Worg]], Org-mode
community, also have comprehensive tutorials about using Org to build your
社区，也有关于使用Org来构建你的
own static site. To be honest, worg should be every serious Org users'
自己的静态网站。老实说，worg应该是每个认真的Org用户的
starting point. So many Org experts contribute their summary of Org in
起点。因此，许多组织专家贡献了他们的组织总结
high-quality articles on the Worg.
高质量的文章。

In general, through Emacs Org mode, all you need is to set the variable
通常，通过Emacs Org模式，您只需设置变量
=org-publish-project-alist= . Of course, if you want your site beautiful,
= org-publish-project-alist =。当然，如果你想让你的网站漂亮，
some knowledge about CSS and JavaScript is necessary.
一些关于CSS和JavaScript的知识是必要的。

* 2 Writing with Hugo
* 2和Hugo一起写作

Now, I moved from the Emacs built-in publishing system to Hugo because of
现在，我从Emacs内置的发布系统转移到了Hugo，因为
Hugo's efficiency and flexibility. You can build your static site in just a
Hugo的效率和灵活性。您可以建立您的静态网站，只需一个
few minutues. One major problem of the built-in publishing system is that
一些minutues。内置发布系统的一个主要问题是
you have to wait for a long time as your site gets larger and larger. When
当你的网站变得越来越大时，你必须等待很长时间。当
you have only several posts, there is no problem. However, when you have more
你只有几个帖子，没有问题。然而，当你有更多
than one hundred posts, you want to kill yourself during waiting the
超过一百篇帖子，你要在等待的时候自杀
publishing.
出版。

Using Hugo, everything is easy. Post an article is at the fingure.However,
使用Hugo，一切都很容易。把文章贴在手指上。
if you want to write a post, it is prioritized to finished it in the github
如果你想写一篇文章，它是优先完成它在github
format markdown. For a guy who rarely use markdown and is familiar with
格式减价。对于一个很少使用markdown并且熟悉它的人来说
Emacs Org, this constraint is not human. Fortunately, [[https://github.com/kaushalmodi/ox-hugo][Ox-hugo]], a carefuly
这个约束不是人为的。幸运的是，[[https://github.com/kaushalmodi/ox-hugo]]，一个细心的
crafted Org exporter backend for Hugo, is definitely worth a try. Ox-hugo
精心制作的Org出口商后端雨果，绝对值得一试。Ox-hugo
bridge the Emacs Org and Hugo and make the workflow at a fly. Even though,
在Emacs Org和Hugo之间架起桥梁，让工作流程快速地工作起来。即便如此,
Hugo supports to write the posts in Org format, Ox-hugo still is a sharp
Hugo支持以Org格式撰写文章，Ox-hugo仍然是一个sharp
tool which I will not give up and highly recommend it.
工具，我不会放弃，并强烈推荐它。

Especially, there is tons of themes for you. Also, you can set up your own
特别是，有大量的主题供你选择。此外，你可以建立自己的
theme.
主题。

** 2.1 architecture of the site
** 2.1网站架构

Using =hugo= , there is a default architecture. Using =ox-hugo= , I store
使用=hugo=，有一个默认的架构。使用=ox-hugo=，我存储
the Org file in the subdirectory =content-org= . There are several sections
子目录中的Org文件=content-org=。有几个部分
for my static site such =math= , =computer= and =communication= . I store
对于我的静态站点，如=math=， =computer=和=communication=。我商店
the articles in the corresponding category. For example I will put an
相应类别的文章。例如，我将放一个
article on mathematical analysis in the file named =content-org/math.org=
关于在名为=content-org/math.org=的文件中进行数学分析的文章
so that after exporting, the markdown file will be put in the subdirectory
这样在导出之后，markdown文件将被放到子目录中
=content/math/= .
内容/数学/ = =。

[[/tools/20180126HugoArchitecture.png]]
[[/工具/ 20180126 hugoarchitecture.png]]

Figure 1: architecture of Hugo project
图1:Hugo项目的架构

* 3 Settings for ox-hugo
* oxo -hugo有3个设置

** 3.1 settings for each section based on ox-hugo
** 3.1基于ox-hugo的各章节设置

As mentioned before, there are several sections for my site and I use
如前所述，我和我的站点有几个部分
ox-hugo to handle articles for this sections. In the subdirectory
ox-hugo来处理本节的文章。在子目录
=content-org/= , there are several =*.org= files such as =math.org= ,
=content-org/=，有几个=*.org=文件，如=math.org=，
=computer.org= , =communications.org= and =tools.org= . All these =.org=
=computer.org=， =communications.org=和=tools.org=。所有这些= .org =
files have multiple level-1 headlines. for each level-1 headline, there is
文件有多个一级标题。对于每一个一级标题，都有
one article. I use one-post-per-Org-subtree style preferred in the ox-hugo
一篇文章。我在ox-hugo中使用了一个post-per- org子树样式
[[https://ox-hugo.scripter.co/][document]] but one-section-per-Org-file style for each section. The
[[https://ox-hugo.scripter。[文档]]，但每个节一个节一个组织文件的风格。的
one-section-per-Org-file style is kind of like one-post-per-Org-file
每个组织文件一个节的风格有点类似于每个组织文件一个节
mentioned in the ox-hugo [[https://ox-hugo.scripter.co/][document]]. So I have a hybrid style.
在ox-hugo [[https://ox-hugo.scripter.co/][文档]]中提到。所以我有一个混合的风格。

For each section, I have to set some parameters properly so that the
对于每个部分，我必须正确地设置一些参数，以便
articles goes to the right postion. Take =math.org= for example, the
冠词放在正确的位置。以=math.org=为例
beginning of this file is like:
这个文件的开头是这样的:

#+BEGIN_EXAMPLE
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: math
#+SEQ_TODO: TODO NEXT DRAFT DONE
#+FILETAGS: math
#+OPTIONS: *:t <:nil timestamp:nil toc:t
#+HUGO_AUTO_SET_LASTMOD: t
#+END_EXAMPLE

1. the first line tells =ox-hugo= the targeting directory is =../content/= .
1. 第一行告诉=ox-hugo=目标目录是=../内容/ =。
2. the second line tells =ox-hugo= the article goes to =../content/math= .
2. 第二行告诉=ox-hugo=文章变为=../内容/数学=。
3. the third line is the Org state of the article, =TODO= will render the
3.第三行是文章的Org状态，=TODO=将呈现
article a draft while =DONE= a finished post.
文章一写就完成了。
4. the fourth line will tell the Org all the headlines of this file has the
4. 第4行告诉Org该文件的所有标题都有
tag =math=
一天=计算=
5. at the fifth line. =*:t= will toggle emphasized text. =<:nil= means the
5. 在第五行。=*:t=将切换强调文本。= <:nil =意味着
timestamp will not be exported. =timestamp:nil= means the creation time
不会导出时间戳。=timestamp:nil=表示创建时间
will not be exported. =toc:t= means for the articles table of content is
将不会出口。=toc:t=表示文章的内容表是
generated. More settings like these will be detailed in the =Org=
生成的。更多类似的设置将在=Org=中详细介绍
manual. (You can open the Org manual by =C-h i= ,then seclect the Org
手册。(你可以通过=C-h i=打开组织手册，然后隔离该组织
section.) On table of contents, ox-hugo has an [[https://ox-hugo.scripter.co/doc/org-toc][article]].
部分。)在目录中，ox-hugo有一个[[https://ox-hugo.scripter.co/doc/org-toc][article]。
6. the sixth line tells ox-hugo to export the latest time when the article
6. 第六行告诉ox-hugo导出最新的时间当文章
is modified.
被修改。

** 3.2 settings for each article based on ox-hugo
** 3.2基于ox-hugo的每篇文章的设置

I use the =org-capture= to start a article. The emacs-lisp:
我使用=org-capture=开始一篇文章。emacs lisp:

#+BEGIN_EXAMPLE
(setq org-capture-templates
'(
("t" "todo" entry (file "~/zorg/Dropbox/base/zrefile.org")
"* TODO %? :TODO: n Added:%Tn"
:clock-in t :clock-resume t)
("h" "Hugo post")
("hm" "Math"
entry (file+olp "~/zorg/zcl.space/content_org/math.org" "Math")
(function org-hugo-new-subtree-post-capture-template)
":math:"
:clock-in t :clock-resume t)
("hc" "Computer"
entry (file+olp "~/zorg/zcl.space/content_org/computer.org" "Computer")
(function org-hugo-new-subtree-post-capture-template)
:clock-in t :clock-resume t)
("ht" "Telecommunication"
entry (file+olp "~/zorg/zcl.space/content_org/telecommunication.org" "Telecommunication")
(function org-hugo-new-subtree-post-capture-template)
:clock-in t :clock-resume t)
("hl" "Life"
entry (file+olp "~/zorg/zcl.space/content_org/life.org" "Life")
(function org-hugo-new-subtree-post-capture-template)
:clock-in t :clock-resume t)
("ho" "Tools"
entry (file+olp "~/zorg/zcl.space/content_org/tools.org" "Tools")
(function org-hugo-new-subtree-post-capture-template)
:clock-in t :clock-resume t)
))
#+END_EXAMPLE

From the above code, you can see that I rely heavily on ox-hugo. there is one
从上面的代码可以看出，我非常依赖ox-hugo。有一个
function named =org-hugo-new-subtree-post-capture-template= which is shown
函数名=org-hugo-new-subtree post-capture-template=如图所示
as below:
如下:

#+BEGIN_EXAMPLE
(defun org-hugo-new-subtree-post-capture-template ()
"Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
(let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
(date (format-time-string (org-time-stamp-format :inactive) (org-current-time)))
(title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
(fname (org-hugo-slug title)))
(mapconcat #'identity
`(
,(concat "* TODO " title)
":PROPERTIES:"
,(concat ":EXPORT_FILE_NAME: " fname)
,(concat ":EXPORT_DATE: " date) ;Enter current date and time
,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: " ":summary "summary"")
":END:"
"%?n") ;Place the cursor here finally
"n")))
#+END_EXAMPLE

One more point, it is awesome to preview each article after saveing it.
还有一点，保存后预览每一篇文章是非常棒的。
Yes! you can do it according [[https://ox-hugo.scripter.co/doc/auto-export-on-saving][this article]].
是的!你可以根据[[https://ox-hugo.scripter。有限公司/ doc / auto-export-on-saving][文章]]。

* 4 Settings for Hugo themes
*雨果主题的4个设置

Now, there are more than 190+ [[https://themes.gohugo.io/][themes]] for Hugo. It is pretty straightforward
现在，有超过190+ [[https://themes.gohugo]。雨果的io /][主题]]。很简单
to [[https://gohugo.io/themes/][install and config]] a theme as you wish. I prefer the [[https://sourcethemes.com/academic/][Academic theme]] which I
[[https://gohugo。io/themes/][安装和配置]]一个你想要的主题。我更喜欢[[https://sourcethemes.com/academic/][学术主题]]
adopt for the following reasons:
采用的理由如下:

1. It is easy manage my post according to different categories.
1. 这是很容易管理我的职位根据不同的类别。
2. I love the widget most.
2. 我最喜欢这个小工具。
3. support of (mathrm{LaTeX}) so I can with the mathematical expressions
3.支持(mathrm{LaTeX})所以我可以用数学表达式
fluently.
流利。
4. Responsive and mobile friendly.
4. 响应和移动友好。
5. easy to update.
5. 容易更新。

There are [[https://sourcethemes.com/academic/docs/install/][several ways]] to install the Academic theme. I use the Academic
有[[https://sourcethemes.com/academic/docs/install/][几种方法]]来安装学术主题。我使用学术
Kickstart way:
启动方式:

#+BEGIN_EXAMPLE
git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
#+END_EXAMPLE

The very reason I use the Kickstart way lies in the updatation of Academic.
我使用Kickstart方式的原因在于学术的更新。
In the Kickstart way, Academic is installed as a Git sub-module.
在Kickstart方式中，Academic被安装为一个Git子模块。

If you want to update the theme,all you have to do is:
如果你想更新主题，你所要做的就是:

#+BEGIN_EXAMPLE
git submodule update --remote --merge
#+END_EXAMPLE

Also, for different methods of updating the theme, you can check [[https://sourcethemes.com/academic/docs/update/][here]].
此外，对于更新主题的不同方法，您可以查看[[https://sourcethemes.com/academic/docs/update/][此处]]。
