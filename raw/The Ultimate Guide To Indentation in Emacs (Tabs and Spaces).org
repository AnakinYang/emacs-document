#+TITLE: The Ultimate Guide To Indentation in Emacs (Tabs and Spaces)
#+URL: https://dougie.io/emacs/indentation/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 08月 17日 星期五 11:19:38 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
[[/static/img/blog/tabs-in-emacs/screenshot.png]]
[[/静态/ img /博客/ tabs-in-emacs / screenshot.png]]

* TL;DR: The Full Configuration:
* TL;DR:完整配置:
:PROPERTIES:
属性:
:CUSTOM_ID: tldr-the-full-configuration
:CUSTOM_ID tldr-the-full-configuration
:END:
结束:

This configuration is meant for users that prefer tabs over spaces. To learn how to customize tabs and spaces behavior differently, please refer to the Breaking It Down section.
这个配置是为喜欢制表符而不是空格的用户设计的。要了解如何以不同的方式自定义制表符和空格的行为，请参阅分解部分。

#+BEGIN_EXAMPLE
; START TABS CONFIG
;; Create a variable for our preferred tab width
(setq custom-tab-width 2)

;; Two callable functions for enabling/disabling tabs in Emacs
(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs ()
(local-set-key (kbd "TAB") 'tab-to-tab-stop)
(setq indent-tabs-mode t)
(setq tab-width custom-tab-width))

;; Hooks to Enable Tabs
(add-hook 'prog-mode-hook 'enable-tabs)
;; Hooks to Disable Tabs
(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)

;; Language-Specific Tweaks
(setq-default python-indent-offset custom-tab-width) ;; Python
(setq-default js-indent-level custom-tab-width) ;; Javascript

;; Making electric-indent behave sanely
(setq-default electric-indent-inhibit t)

;; Make the backspace properly erase the tab instead of
;; removing 1 space at a time.
(setq backward-delete-char-untabify-method 'hungry)

;; (OPTIONAL) Shift width for evil-mode users
;; For the vim-like motions of ">>" and "<<".
(setq-default evil-shift-width custom-tab-width)

;; WARNING: This will change your life
;; (OPTIONAL) Visualize tabs as a pipe character - "|"
;; This will also show trailing characters as they are useful to spot.
(setq whitespace-style '(face tabs tab-mark trailing))
(custom-set-faces
'(whitespace-tab ((t (:foreground "#636363")))))
(setq whitespace-display-mappings
'((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '|'
(global-whitespace-mode) ; Enable whitespace mode everywhere
; END TABS CONFIG
#+END_EXAMPLE

* Breaking It Down
*分解它
:PROPERTIES:
属性:
:CUSTOM_ID: breaking-it-down
:CUSTOM_ID:分解
:END:
结束:

** Functions for Enabling/Disabling tabs
**启用/禁用选项卡的功能
:PROPERTIES:
属性:
:CUSTOM_ID: functions-for-enablingdisabling-tabs
:CUSTOM_ID functions-for-enablingdisabling-tabs
:END:
结束:

#+BEGIN_EXAMPLE
;; Our Custom Variable
(setq custom-tab-width 2)

(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs ()
(local-set-key (kbd "TAB") 'tab-to-tab-stop)
(setq indent-tabs-mode t)
(setq tab-width custom-tab-width))
#+END_EXAMPLE

These are two different functions that we can easily call in our custom hooks. If you'd like to also activate these functions on the fly, using =M-x=, you can use the =(interactive)= function in Emacs Lisp. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Examples.html][Here's the documentation]].
这是两个不同的函数，我们可以很容易地在自定义钩子中调用它们。如果您还想动态激活这些函数，使用=M-x=，您可以使用Emacs Lisp中的=(interactive)=函数。[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Examples.html][这是文档]]。

First thing we do in the =enable-tabs= function is set the TAB key to =tab-to-tab-stop=. In my opinion, it is a more sane default. When you press the tab key, it will indent one tab as expected. There is no wizardry or confusion of what will happen next when you hit the tab key.
在=enable-tabs=函数中要做的第一件事是将TAB键设置为= TAB -to- TAB -stop=。在我看来，这是一种更为理智的违约。当您按tab键时，它将按预期的方式缩进一个tab。当你按下tab键时，不会出现什么神奇的或混乱的情况。

After that, we enable [[https://www.gnu.org/software/emacs/manual/html_node/eintr/Indent-Tabs-Mode.html][indent-tabs-mode]] and set our custom [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Changing-the-length-of-a-Tab.html][tab-width]].
之后，我们启用[[https://www.gnu.org/software/emacs/manual/html_node/eintr/indenttabs-mode.html][indent-tabs-mode]]并设置我们的自定义[[https://www.gnu.org/software/emacs/manual/html_node/efaq/changing-- of-a- tab.html][tab-width]。

** Using Tabs or Spaces in Different Files
**在不同的文件中使用制表符或空格
:PROPERTIES:
属性:
:CUSTOM_ID: using-tabs-or-spaces-in-different-files
:CUSTOM_ID using-tabs-or-spaces-in-different-files
:END:
结束:

#+BEGIN_EXAMPLE
(add-hook 'prog-mode-hook 'enable-tabs)

(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)
#+END_EXAMPLE

After we create [[#functions-for-enablingdisabling-tabs][those hooks]], it is very easy to decide what types of files/modes we want to enable tabs/spaces in.
在我们创建了[[#functions-for-enablingdisabling-tabs][那些钩子]]之后，很容易决定我们希望在哪些类型的文件/模式中启用制表符/空格。

In this example, we enable tabs in [[https://www.emacswiki.org/emacs/ProgMode][prog-mode]]. Prog-mode is a nice hook to use if you want to make settings for pretty much all code filetypes.
在本例中，我们启用了[[https://www.emacswiki.org/emacs/ProgMode][prog-mode]]中的选项卡。如果您想为几乎所有代码文件类型进行设置，那么Prog-mode是一个不错的挂钩。

After that we disable tabs (use spaces) in Lisp and ELisp files. Lisp is a special type of programming language that really doesn't work well with tabs, so I HIGHLY recommend spaces. Why is that exactly? The concept of indentation really doesn't exist in Lisp. It's all about alignment, and tabs will screw up the precise alignment that Lisp requires.
然后，在Lisp和ELisp文件中禁用选项卡(使用空格)。Lisp是一种特殊的编程语言，它不能很好地与制表符配合使用，因此我强烈建议使用空格。为什么呢?缩进的概念在Lisp中并不存在。这都是关于对齐的，而选项卡将会破坏Lisp所要求的精确对齐。

** Changing the tab width
**改变标签宽度
:PROPERTIES:
属性:
:CUSTOM_ID: changing-the-tab-width
:CUSTOM_ID changing-the-tab-width
:END:
结束:

#+BEGIN_EXAMPLE
;; Our Custom Variable
(setq custom-tab-width 2)

(setq-default python-indent-offset custom-tab-width)
(setq-default evil-shift-width custom-tab-width)
#+END_EXAMPLE

Remember not to define the variable =custom-tab-width= twice! It should be defined above your enable/disable tabs functions. I included it in this code snippet just for illustration purposes.
记住不要定义变量=custom-tab-width=两次!它应该在你的启用/禁用标签功能上面定义。我将它包含在这个代码片段中，只是为了进行说明。

In this example, we set the the tab width to our custom tab width variable. The first line uses the basic =tab-width= property. I recommend not setting the tab-width in the way I have described above and instead put it inside of a function, to be used in hooks. [[#functions-for-enablingdisabling-tabs][Detail on doing just that]].
在本例中，我们将选项卡宽度设置为自定义选项卡宽度变量。第一行使用basic =tab-width=属性。我建议不要像上面描述的那样设置tab-width，而是将它放在一个函数中，用于hook中。[[#用于启用的函数禁用选项卡][关于这样做的详细信息]]。

Next, we set the Python indent size to our custom tab width variable. They make it 4 spaces by default to comply with [[https://www.python.org/dev/peps/pep-0008/][pep8]], but if you prefer to have your own default value, you can change it via that variable.
接下来，我们将Python缩进大小设置为自定义选项卡宽度变量。他们使它默认为4个空格，以符合[[https://www.python.org/dev/peps/pep-0008/][pep8]]，但如果您喜欢有自己的默认值，您可以通过该变量来更改它。

Lastly, we set the evil-shift-width to our custom tab width variable. This is only useful if you are using the Evil package to get Vim-like keybindings instead of using glorious Emacs keybindings. =evil-shift-width= controls the tab size when you're using the =>>= or =<<= motion to indent or de-indent text.
最后，我们将evil-shift-width设置为自定义选项卡宽度变量。这只有在您使用Evil包来获得类似于vm的键绑定而不是使用光荣的Emacs键绑定时才有用。当您使用=>>=或=<<=移动来缩进或取消缩进文本时，=evil-shift-width=控制选项卡大小。

** Making Indentation Behave Sanely (Electric Indent)
**压痕美观(电动压痕)
:PROPERTIES:
属性:
:CUSTOM_ID: making-indentation-behave-sanely-electric-indent
:CUSTOM_ID making-indentation-behave-sanely-electric-indent
:END:
结束:

Something that was driving me nuts was Emacs electric-indent indenting the previous line when I press enter. Luckily, I came across a fix one day.
让我抓狂的是，当我按下回车键时，Emacs电子缩进正在对前面一行进行缩进。幸运的是，有一天我遇到了一个解决方案。

#+BEGIN_EXAMPLE
(setq-default electric-indent-inhibit t)
#+END_EXAMPLE

** Indent a selection left or right
**向左或向右缩进所选内容
:PROPERTIES:
属性:
:CUSTOM_ID: indent-a-selection-left-or-right
:CUSTOM_ID indent-a-selection-left-or-right
:END:
结束:

To accomplish this, refer to my [[/emacs/indent-selection][How to Indent a Selection in Emacs]] guide.
要做到这一点，请参考我的[[/emacs/缩进选择][如何缩进emacs]]指南。

** Highlighting Tabs and Spaces Differently
**以不同的方式突出显示制表符和空格
:PROPERTIES:
属性:
:CUSTOM_ID: highlighting-tabs-and-spaces-differently
:CUSTOM_ID highlighting-tabs-and-spaces-differently
:END:
结束:

Something that I feel that is very important to have in an editor is a way to identify spaces and tabs easily. They are both whitespace characters that can easily be confused for eachother.
我觉得在编辑器中有一种很重要的东西，那就是一种很容易识别空格和制表符的方法。它们都是空格字符，很容易混淆。

We will accomplish this by making tabs appear visible as a “|” (pipe) character. If you want to highlight spaces too, please refer to [[http://ergoemacs.org/emacs/whitespace-mode.html][ErgoEmacs' article on making whitespace visible]].
我们将通过以“|”(管道)字符的形式显示选项卡来实现这一点。如果您也想突出显示空格，请参考[[http://ergoemacs.org/emacs/whitespace-mode.html][ErgoEmacs关于使空格可见的文章]]。

#+BEGIN_EXAMPLE
(global-whitespace-mode)
(setq whitespace-style '(face tabs tab-mark trailing))
(custom-set-faces
'(whitespace-tab ((t (:foreground "#636363")))))

(setq whitespace-display-mappings
'((tab-mark 9 [124 9] [92 9])))
#+END_EXAMPLE

I have separated the =whitespace-display-mappings= portion of the snippet with a newline because it is the more confusing-to-read part of it.
我将=whitespace-display-mappings=代码段的一部分用换行分隔开，因为它是代码段中比较容易混淆的部分。

The first four lines of the snippet are pretty easy to understand.
代码片段的前四行非常容易理解。

1. First you enable =global-whitespace-mode=. This makes our configured whitespace visible in all buffers automatically.
1. 首先启用=global-whitespace-mode=。这使得我们配置的空白在所有缓冲区中自动可见。
2. Next, you're setting the whitespace style to show tabs and trailing whitespace. You need =face= and =tabs= included there. I am not completely sure why, but they are needed in order to set the color of the pipe character.
2. 接下来，将空白样式设置为显示制表符和尾随空白。您需要在其中包含=face=和=tabs=。我不完全确定为什么，但是需要它们来设置管道字符的颜色。
3. After that, you're calling =custom-set-faces= to customize the appearance of the tab whitespace. I set the text color of our pipe character to be *#636363* which is a nice color if you're using a dark-themed Emacs theme. If you're using a light theme in Emacs, you'll want a lighter color such as *#c1c1c1*.
3.然后，调用=custom-set-faces=定制制表符空白的外观。我将我们的管道字符的文本颜色设置为*#636363*，如果您使用的是深色主题的Emacs，这是一个很好的颜色。如果您在Emacs中使用light主题，那么您将需要更亮的颜色，比如*#c1c1c1*。

This is an example of #636363 on a dark background. It is supposed to be subtle.
这是#636363在黑暗背景下的一个例子。它应该是微妙的。

This is an example of #c1c1c1 on a light background. It is supposed to be subtle.
这是一个在浅色背景上的#c1c1c1的例子。它应该是微妙的。

The line that is a little bit confusing to read is the one where we actually set the pipe character.
读起来有点混乱的那一行是我们设置管道字符的那一行。

All you really need to know about it is that =124= is the ascii ID of the pipe character (“|”). You can view [[http://rmhh.co.uk/ascii.html][a list of ascii character IDs here]].
您真正需要知道的是=124=是管道字符的ascii ID(“|”)。您可以查看[[http://rmhh.co.uk/ascii]。[这里的ascii字符id列表]]。

** Making Backspace Properly Delete Tabs
**使退格正确删除制表符
:PROPERTIES:
属性:
:CUSTOM_ID: making-backspace-properly-delete-tabs
:CUSTOM_ID making-backspace-properly-delete-tabs
:END:
结束:

Emacs has a strange default behavior when backspacing tabs. Instead of backspacing the whole tab, it backspaces the tab one space at a time.
当后退制表符时，Emacs有一个奇怪的默认行为。它不是回退整个制表符，而是一次回退一个制表符。

You can fix that in the following way.
你可以用下面的方法来解决这个问题。

#+BEGIN_EXAMPLE
(setq backward-delete-char-untabify-method 'hungry)
#+END_EXAMPLE

** SmartTabs (Bonus)
* * SmartTabs(奖金)
:PROPERTIES:
属性:
:CUSTOM_ID: smarttabs-bonus
:CUSTOM_ID smarttabs-bonus
:END:
结束:

The [[https://www.emacswiki.org/emacs/SmartTabs][Smart-tabs-mode]] package helps Emacs indent with tabs and align with spaces in various languages.
[[https://www.emacswiki.org/emacs/SmartTabs][智能标签模式]]包帮助Emacs在各种语言中缩进标签和对齐空格。

I personally don't use it, but it might tickle your fancy.
我个人不使用它，但它可能会勾起你的幻想。

If you are unsure of how to install packages in Emacs, you could refer to [[https://www.emacswiki.org/emacs/InstallingPackages][this wiki entry]] or [[https://www.youtube.com/watch?v=Cf6tRBPbWKs][this video]].
如果您不确定如何在Emacs中安装包，您可以参考[[https://www.emacswiki.org/emacs/InstallingPackages][此wiki条目]]或[[https://www.youtube.com/watch?v = Cf6tRBPbWKs][视频]]。

After installing it, you can enable it in various languages as follows:
安装后，你可以在不同的语言启用它，如下:

#+BEGIN_EXAMPLE
(smart-tabs-insinuate 'c 'javascript 'python)
#+END_EXAMPLE

** Python Tabs Support
** Python选项卡支持
:PROPERTIES:
属性:
:CUSTOM_ID: python-tabs-support
:CUSTOM_ID python-tabs-support
:END:
结束:

UPDATE: There used to be a pretty tedious process to get tabs properly working in Python. Luckily, after updating this article with my new tabs config, it works fine. Update your code with [[#tldr-the-full-configuration][my new code]] and you'll be all set.
更新:以前在Python中，让选项卡正常工作是一个非常繁琐的过程。幸运的是，在用我的新选项卡配置更新了这篇文章之后，它工作得很好。用[[#tldr-the-full-configuration][我的新代码]]更新您的代码，您就一切就绪了。

You may also want to check out [[#smarttabs-bonus][SmartTabs]] too.
你也可以看看[[# SmartTabs -奖金][SmartTabs]]。

** Final Notes
* *最后指出
:PROPERTIES:
属性:
:CUSTOM_ID: final-notes
:CUSTOM_ID:结语
:END:
结束:

That's it! Let me know if you have questions about any of this or have a suggestion to make it better.
就是这样!如果您对此有任何疑问或有任何改进建议，请告诉我。
