#+TITLE: Getting geo-tagged information from photos for blogging
#+URL: http://kitchingroup.cheme.cmu.edu/blog/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 02日 星期一 19:16:46 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
I am kind of late to this game, but recently I turned on location services for the camera on my phone. That means the location of the photo is stored in the photo, and we can use that to create urls to the photo location in a map for example. While traveling, I thought this would be a good application for org-mode to add functionality to documents with photos in them, e.g. to be able to click on them to see where they are from, or to automate creation of html pages with links to maps, etc. In this post I explore some ways to achieve those ideas. What I would like is a custom org link that shows me a thumbnail of the image, and which exports to show the image in an html file with a link to a pin on Google maps.
我玩这个游戏有点晚了，但最近我打开了手机摄像头的定位服务。这意味着照片的位置存储在照片中，我们可以使用它来创建到地图中的照片位置的url。当旅行时，我认为这将是一个很好的组织模式的应用程序，以增加功能的文件与照片，例如，可以点击他们看看他们从哪里来，或自动创建的html页面链接到地图，等等。在这篇文章中，我探索了一些实现这些想法的方法。我想要的是一个自定义的org链接，它显示图像的缩略图，并将其导出为一个html文件，其中包含指向谷歌映射上大头针的链接。

So, let's dig in. Imagemagick provides an identify command that can extract the information stored in the images. Here we consider just the GPS information. I some pictures on a recent vacation, and one is unimaginatively named IMG_1759.JPG. Let's see where it was taken.
那么，让我们开始吧。Imagemagick提供了一个识别命令，可以提取存储在图像中的信息。这里我们只考虑GPS信息。我最近在度假时拍了一些照片，其中一张的名字毫无想象力，叫IMG_1759.JPG。让我们看看是在哪儿拍的。

#+BEGIN_EXAMPLE
identify -verbose IMG_1759.JPG | grep GPS
#+END_EXAMPLE

exif:GPSAltitude: 14426/387
exif GPSAltitude: 14426/387
   
exif:GPSAltitudeRef: 0
exif: GPSAltitudeRef 0。
   
exif:GPSDateStamp: 2018:06:30
exif: GPSDateStamp: 2018:06:30
   
exif:GPSDestBearing: 11767/80
exif: GPSDestBearing: 11767/80
   
exif:GPSDestBearingRef: T
exif: GPSDestBearingRef:
   
exif:GPSImgDirection: 11767/80
exif: GPSImgDirection: 11767/80
   
exif:GPSImgDirectionRef: T
exif: GPSImgDirectionRef: T
   
exif:GPSInfo: 1632
exif: GPSInfo: 1632
   
exif:GPSLatitude: 22/1, 11/1, 614/100
exif: gpsltaza: 22/ 1,11 / 1,614 /100
exif:GPSLatitudeRef: N
exif GPSLatitudeRef::
   
exif:GPSLongitude: 159/1, 40/1, 4512/100
exif:GPSLongitude: 159/ 1,40 / 1,4512 /100
exif:GPSLongitudeRef: W
exif: GPSLongitudeRef: W
   
exif:GPSSpeed: 401/100
exif: GPSSpeed: 401/100
   
exif:GPSSpeedRef: K
exif: GPSSpeedRef K
   
exif:GPSTimeStamp: 3/1, 44/1, 3900/100
exif:GPSTimeStamp: 3/ 1,44 / 1,3900 /100

The interpretation here is that I took that photo at latitude 22° 11' 6.14" N, and longitude 159° 40' 45.12" W. Evidently I was moving at 4.01 in some unit; I can confirm that I was at least moving, I was on a ship when I took that picture, and it was moving.
这里的解释是，我在北纬22°11' 6.14"，西经159°40' 45.12"拍的这张照片。我可以确认我至少在移动，我在船上拍的照片，它在移动。

According to [[http://alvarestech.com/temp/routeconverter/RouteConverter/navigation-formats/src/main/doc/googlemaps/Google_Map_Parameters.htm][this]] you can make a url to a Google maps pin in satellite picture mode that looks like this: [[http://maps.google.com/maps?q=22%2011%206.14N,159%2040%2045.12W&t=k][http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&t=k]]. It doesn't seem possible to set the zoom in this url (at least setting the zoom doesn't do anything, and I didn't feel like trying all the other variations that are reported to sometimes work). I guess that is ok for now, it adds some suspense that you have to zoom out to see where the image is in some cases.
根据[[http://alvarestech.com/temp/routeconverter/RouteConverter/navigation-formats/src/main/doc/googlemaps/Google_Map_Parameters.htm][这]]可以使一个url到谷歌地图卫星图片中销模式看起来像这样:[[http://maps.google.com/maps?q=22%2011%206.14N, 159% 2040% 2045.12 w&t = k] [http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&t=k]]。在这个url中设置缩放似乎是不可能的(至少设置缩放没有任何作用，而且我不想尝试所有其他的变化，有时报告是有效的)。我想现在还可以，它增加了一些悬念，在某些情况下，你必须缩小来查看图像的位置。

We need a little function to take an image file and generate that link. We have to do some algebra on the latitude and longitude which are stored as integers with a division operator. I am going to pipe this through an old unix utility called bc mostly because it is simple, and I won't have to parse it much. bc is a little archaic, you have to set the scale first, which tells it how many decimal places to output. The degrees and minutes are integers, so we will have to deal with that later.
我们需要一个小函数来获取一个图像文件并生成那个链接。我们必须对经度和纬度做一些代数运算，它们用除法运算符存储为整数。我将通过一个名为bc的旧unix实用程序来处理它，主要是因为它很简单，而且不需要过多地解析它。bc有点过时，您必须先设置scale，它会告诉您要输出多少位小数。度和分钟都是整数，我们以后会讲到。

#+BEGIN_EXAMPLE
echo "scale=2; 614/100" | bc
#+END_EXAMPLE

#+BEGIN_EXAMPLE
6.14
#+END_EXAMPLE

Here is our function. I filter out the lines with GPS in them into an a-list. Then, I grab out the specific quantities I want and construct the url. There is a little hackery since it appears the degrees and minutes should be integers in the url formulation used here, so I convert them to numbers and then take the floor. The function is a little longer than I thought, but it isn't too bad I guess. It is a little repetitious, but not enough to justify refactoring.
这是我们的函数。我把有GPS定位系统的线路过滤到a名单里。然后，获取所需的特定数量并构造url。这里有一个小错误，因为在这里使用的url公式中度数和分钟应该是整数，所以我将它们转换成数字，然后发言。这个函数比我想的要长一些，但我想还不算太糟。它有点重复，但还不足以证明重构的合理性。

#+BEGIN_EXAMPLE
(defun iphoto-map-url (fname)
(let* ((gps-lines (-keep (lambda (line)
(when (s-contains? "GPS" line) (s-trim line)))
(process-lines "identify" "-verbose" fname)))
(gps-alist (mapcar (lambda (s) (s-split ": " s t)) gps-lines))
(latitude (mapcar
(lambda (s)
(s-trim (shell-command-to-string
(format "echo "scale=2;%s" | bc" s))))
(s-split "," (cadr (assoc "exif:GPSLatitude" gps-alist)))))
(latitude-ref (cadr (assoc "exif:GPSLatitudeRef" gps-alist)))
(longitude (mapcar
(lambda (s)
(s-trim
(shell-command-to-string
(format "echo "scale=2;%s" | bc" s))))
(s-split "," (cadr (assoc "exif:GPSLongitude" gps-alist)))))
(longitude-ref (cadr (assoc "exif:GPSLongitudeRef" gps-alist))))
(s-format "http://maps.google.com/maps?q=$0 $1 $2$3,$4 $5 $6$7&t=k"
'elt
(list
(floor (string-to-number (nth 0 latitude)))
(floor (string-to-number (nth 1 latitude)))
(nth 2 latitude)
latitude-ref
(floor (string-to-number (nth 0 longitude)))
(floor (string-to-number (nth 1 longitude)))
(nth 2 longitude)
longitude-ref))))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
iphoto-map-url
#+END_EXAMPLE

Here is the function in action, making the url.
下面是正在运行的函数，它生成url。

#+BEGIN_EXAMPLE
(iphoto-map-url "IMG_1759.JPG")
#+END_EXAMPLE

#+BEGIN_EXAMPLE
http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&t=k
#+END_EXAMPLE

It is kind of slow, but that is because the identify shell command is kind of slow when you run it with the -verbose tag. Now, I would like the following things to happen when I publish it to html:
它有点慢，但那是因为当您使用-verbose标记运行它时，identify shell命令有点慢。现在，我希望发生以下事情时，我发布到html:

1. I want the image wrapped in an img tag inside a figure environment.
1. 我希望图像包装在一个图形环境中的img标记。
2. I want the image to by hyperlinked to its location in Google maps.
2. 我想要的形象，通过超链接到它的位置在谷歌地图。

In the org file, I want a thumbnail overlay on it, so I can see the image while writing, and I want it to toggle like other images. I use an iPhone to take the photos, so we will call it an iphoto link.
在org文件中，我想要一个缩略图覆盖在上面，这样我可以在写的时候看到图像，我想要它像其他图像一样切换。我用iPhone来拍照，所以我们称它为iphoto链接。

Here is the html export function I will use. It is a little hacky that I hard code the width in at 300 pixels, but I didn't feel like figuring out how to get it from an #+attr_html line right now. It probably requires a filter function where you have access to the actual org-elements. I put the url to the image location in a figure caption here.
下面是我将使用的html导出函数。我将宽度硬编码为300像素，这有点笨拙，但是我现在不想弄清楚如何从#+attr_html行获取它。它可能需要一个过滤器函数，在这个函数中您可以访问实际的org元素。我把图片位置的url放在这里的图标题中。

#+BEGIN_EXAMPLE
(defun iphoto-export (path desc backend)
(cond
((eq 'html backend)
(format "<figure>
<img src="%s" width="300">
%s
</figure>"
path
(format "<figcaption>%s <a href="%s">map</a></figcaption>"
(or desc "")
(iphoto-map-url path))))))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
iphoto-export
#+END_EXAMPLE

Ok, the last detail I want is to put an image overlay on my new link so I can see it. I want this to work with org-toggle-inline-images so I can turn the images on and off like regular image links with C-c C-x C-v. This function creates overlays as needed, and ties into the org-inline-image-overlays so they get deleted on toggling. We have to advise the display function to redraw these, which we clumsily do by restarting the org font-lock machinery which will redraw the thumbnails from the activate-func property of the links. I also hard code the thumbnail width in this function, when it could be moved out to a variable or attribute.
好的，我想要的最后一个细节是把一个图像覆盖在我的新链接，所以我可以看到它。我想要这个工作与组织-切换-内联图像，这样我可以打开和关闭图像，像普通的图像链接与C-c C-x C-v。该函数根据需要创建覆盖，并绑定到org-inline-image-overlay，以便在切换时删除它们。我们必须建议显示函数重新绘制这些，我们笨拙地通过重新启动org font-lock机制来做到这一点，该机制将从链接的active -func属性重新绘制缩略图。我还在这个函数中硬编码了缩略图宽度，当它可以移动到一个变量或属性时。

#+BEGIN_EXAMPLE
(defun iphoto-thumbnails (start end imgfile bracketp)
(unless bracketp
(when (and
;; it is an image
(org-string-match-p (image-file-name-regexp) imgfile)
;; and it exists
(f-exists? imgfile)
;; and there is no overlay here.
(not (ov-at start)))
(setq img (create-image (expand-file-name imgfile)
'imagemagick nil :width 300
:background "lightgray"))
(setq ov (make-overlay start end))
(overlay-put ov 'display img)
(overlay-put ov 'face 'default)
(overlay-put ov 'org-image-overlay t)
(overlay-put ov 'modification-hooks
(list
`(lambda (&rest args)
(org-display-inline-remove-overlay ,ov t ,start ,end))))
(push ov org-inline-image-overlays))))

(defun iphoto-redraw-thumbnails (&rest args)
(org-restart-font-lock))

;; this redisplays these thumbnails on image toggling
(advice-add 'org-display-inline-images :after 'iphoto-redraw-thumbnails)
#+END_EXAMPLE

Next, we define the link with a follow, export, tooltip and activate-func (which puts the overlay on).
接下来，我们使用follow、export、tooltip和active -func(用于覆盖)来定义链接。

#+BEGIN_EXAMPLE
(org-link-set-parameters
"iphoto"
:follow (lambda (path) (browse-url (iphoto-map-url path)))
:export 'iphoto-export
:help-echo "Click me to see where this photo is on a map."
:activate-func 'iphoto-thumbnails)
#+END_EXAMPLE

So finally, here is the mysterious image.
最后，这是神秘的图像。

[[http://kitchingroup.cheme.cmu.edu/media/IMG_1759.JPG]]
[[http://kitchingroup.cheme.cmu.edu/media/IMG_1759.JPG]]
[[http://maps.google.com/maps?q=22%2011%206.14N,159%2040%2045.12W&t=k][map]]
[[http://maps.google.com/maps?q=22%2011%206.14N, 159% 2040% 2045.12 w&t = k][图]]

Now, in org-mode, I see the image in an overlay, and I can toggle it on and off. If I click on the image, it opens a browser to Google maps with a pin at the spot I took it. When I export it, it wraps the image in a <figure> tag, and puts a url in the caption to the map. If you click on it, and zoom out, you will see this is a picture of the Nāpali Coast on Kauai in Hawaii, and I was in fact out at sea when I took the picture. It was spectacular. Here is another one. This one is a little more obvious with the zoom. Here, I was on land. Since this link is bracketed, it does not show the overlay however in the org-file.
现在，在组织模式，我看到的图像在一个覆盖，我可以切换它的开关。如果我点击图像，它打开一个浏览器谷歌地图与一个大头针在我采取了它。当我导出它时，它将图像包装在<figure>标记中，并在地图的标题中放入一个url。如果你点击它,和缩小,你会发现这是一幅Nāpali海岸在夏威夷考艾岛,我实际上是在海上的时候我把图片。这是壮观的。这是另一个。放大后这个更明显。在这里，我在陆地上。因为这个链接被括起来了，所以它不会在org文件中显示覆盖。

[[http://kitchingroup.cheme.cmu.edu/media/IMG_1749.JPG]]
[[http://kitchingroup.cheme.cmu.edu/media/IMG_1749.JPG]]
Another vacation picture, this time with a caption. [[http://maps.google.com/maps?q=21%2057%2037.01N,159%2021%206.72W&t=k][map]]
另一张度假照片，这次有字幕。[[http://maps.google.com/maps?q=21%2057%2037.01N, 159% 2021% 206.72 w&t = k][图]]

Overall, this was easier than I expected. It might be faster to outsource reading the exif data to some dedicate library, perhaps in python that would return everything you want in an easy to parse json data structure. The speed of computing the url is only annoying when you export or click on the links though.
总的来说，这比我预期的要容易。将exif数据的读取外包给某个特定的库可能会更快一些，也许是在python中，它将以一种易于解析的json数据结构返回您想要的所有内容。不过，计算url的速度只有在导出或单击链接时才令人讨厌。

I didn't build in any error handling, e.g. if you do this on a photo with no GPS data it will probably not handle it gracefully. I also haven't tested this on any other images, e.g. south of the equator, from other cameras, etc. I assume this exif data is pretty standard, but it is a wild world out there... It would still be nice to find a way to get a string representing the nearest known location somehow, that would help the caption be more useful.
我没有内置任何错误处理，例如，如果你这样做的照片没有GPS数据，它可能不会优雅地处理它。我也没有在其他的图片上测试过，比如赤道以南，其他相机的图片等等。我假设这个exif数据是相当标准的，但它是一个野生的世界…如果能找到一种方法来获取表示最近的已知位置的字符串就更好了，这将有助于标题更有用。

There is one little footnote to speak of, and that is I had to do a little hackery to get this to work with my blog machinery. You can see what it is in the org-source, I buried it in a noexport subheading, because it isn't that interesting in the grand scheme of things. It was just necessary because I export these org-files to blogofile, which then builds the html pages, instead of just exporting them. The images have to be copied to a source directory, and paths changed in the html to point to them. See, boring stuff. Otherwise, the code above should be fine for regular org and html files! Now, my vacation is over so it is time to get back to work.
这里有一个小脚注要提一下，那就是我不得不做一点黑客让它与我的博客机器一起工作。你可以在org-source中看到它是什么，我把它埋在了一个noexport子标题中，因为它在整个事情的全局中没有那么有趣。这是必须的，因为我将这些组织文件导出到blogofile, blogofile然后构建html页面，而不是仅仅导出它们。必须将图像复制到源目录，并在html中更改路径以指向它们。看,无聊的东西。否则，上面的代码应该适用于普通的org和html文件!现在，我的假期结束了，是时候回去工作了。

Copyright (C) 2018 by John Kitchin. See the [[/copying.html][License]] for information about copying.
John Kitchin版权所有(C) 2018看到[[/复制。关于复制的信息。

[[/org/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging.org][org-mode source]]
[[/org/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging.org] [org-mode来源]]

Org-mode version = 9.1.13
风球版本= 9
