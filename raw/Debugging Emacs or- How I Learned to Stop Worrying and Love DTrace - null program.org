#+TITLE: Debugging Emacs or: How I Learned to Stop Worrying and Love DTrace « null program
#+URL: http://nullprogram.com/blog/2018/01/17/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 02月 14日 星期三 10:28:22 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* [[/blog/2018/01/17/][Debugging Emacs or: How I Learned to Stop Worrying and Love DTrace]]
* [/blog/2018/01/17/][调试Emacs或:我如何学会停止担忧并热爱DTrace]
:PROPERTIES:
属性:
:CUSTOM_ID: debugging-emacs-or-how-i-learned-to-stop-worrying-and-love-dtrace
:CUSTOM_ID debugging-emacs-or-how-i-learned-to-stop-worrying-and-love-dtrace
:END:
结束:


For some time [[https://github.com/skeeto/elfeed][Elfeed]] was experiencing a strange, spurious
有一段时间[[https://github.com/skeeto/elfeed]]正在经历一种奇怪的、虚假的事情
failure. Every so often users were [[https://github.com/skeeto/elfeed/issues/248][seeing an error]] (spoiler
失败。用户经常是[[https://github.com/skeeto/elfeed/issues/248][看到一个错误]](剧透)
warning) when updating feeds: “error in process sentinel: Search
警告)更新feed时:“进程标记错误:搜索。
failed.” If you use Elfeed, you might have even seen this yourself.
失败了。如果你使用Elfeed，你自己可能也见过。
From the surface it appeared that curl, tasked with the
从表面上看，它是卷曲的，承担着
[[/blog/2016/06/16/][responsibility for downloading feed data]], was producing
[/blog/2016/06/16/][负责下载feed数据]]，正在制作中
incomplete output despite reporting a successful run. Since the run
尽管报告运行成功，但输出不完整。自运行
was successful, Elfeed assumed certain data was in curl's output
是否成功，Elfeed假设某些数据在curl的输出中
buffer, but, since it wasn't, it failed hard.
缓冲，但是，因为它不是，它失败了。

Unfortunately this issue was not reproducible. Manually running curl
不幸的是，这个问题无法重现。手动运行curl
outside of Emacs never revealed any issues. Asking Elfeed to retry
在Emacs之外，从来没有发现任何问题。请求Elfeed重试
fetching the feeds would work fine. The issue would only randomly rear
获取提要可以很好地工作。这个问题只会随机出现
its head when Elfeed was fetching many feeds in parallel, under
当Elfeed在并行获取多个feed时，它的头
stress. By the time the error was discovered, the curl process had
压力。当错误被发现时，旋度过程已经
exited and vital debugging information was lost. Considering that
退出并丢失了重要的调试信息。考虑到
this was likely to be a bug in Emacs itself, there really wasn't a
这可能是Emacs本身的一个bug，实际上并不存在
reliable way to capture the necessary debugging information from
可靠的方法来捕获必要的调试信息
within Emacs Lisp. And, indeed, this later proved to be the case.
在Emacs Lisp。的确，这后来被证明是事实。

A quick-and-dirty work around is to use =condition-case= to catch and
使用=condition-case=来捕获和，这是一种快速而又不可靠的方法
swallow the error. When the bizarre issue shows up, rather than fail
吞下的误差。当奇怪的问题出现，而不是失败
badly in front of the user, Elfeed could attempt to swallow the error
在用户面前，Elfeed可能会尝试吞下这个错误
--- assuming it can be reliably detected --- and treat the fetch as simply
——假设可以可靠地检测到它——并简单地处理fetch
a failure. That didn't sit comfortably with me. Elfeed had done its
一个失败者。这让我很不舒服。Elfeed做到了
due diligence checking for errors already. /Someone/ was lying to
尽职调查已经在检查错误了。有人在说谎
Elfeed, and I intended to catch them with their pants on fire.
我想抓住他们的裤子着火了。
Someday.
有一天。

I'd just need to witness the bug on one of my own machines. Elfeed is
我只需要在我自己的一台机器上见证这个bug。Elfeed是
part of my daily routine, so surely I'd have to experience this issue
这是我日常生活的一部分，所以我肯定会经历这个问题
myself someday. My plan was, should that day come, to run a modified
有一天我自己。我的计划是，如果那一天到来，运行一个修改
Elfeed, instrumented to capture extra data. I would have also routinely
Elfeed，用于捕获额外的数据。我也经常这样做
run Emacs under GDB so that I could inspect the failure more deeply.
在GDB下运行Emacs，以便更深入地检查故障。

For now I just had to wait to [[https://www.youtube.com/watch?v=fE2KDzZaxvE][hunt that zebra]].
现在我只能等到[[https://www.youtube.com/watch?v = fE2KDzZaxvE][狩猎,斑马]]。

** Bryan Cantrill, DTrace, and FreeBSD
** Bryan Cantrill, DTrace，和FreeBSD
:PROPERTIES:
属性:
:CUSTOM_ID: bryan-cantrill-dtrace-and-freebsd
:CUSTOM_ID bryan-cantrill-dtrace-and-freebsd
:END:
结束:

Over the holidays I re-discovered [[https://en.wikipedia.org/wiki/Bryan_Cantrill][Bryan Cantrill]], a systems
假期里，我重新发现了[[https://en.wikipedia.org/wiki/Bryan_Cantrill][Bryan Cantrill]]，一个系统
software engineer who worked for Sun between 1996 and 2010, and is most
1996年至2010年期间在Sun工作的软件工程师，是最优秀的
well known for [[http://dtrace.org/blogs/about/][DTrace]]. My first exposure to him was in a [[https://www.youtube.com/watch?v=l6XQUciI-Sc][BSD
著名的[[http://dtrace.org/blogs/about/][DTrace]]。我第一次见到他是在一个叫[[https://www.youtube.com/watch?v=l6XQUciI-Sc][BSD]的网站上
Now interview]] in 2015. I had re-watched that interview and decided
现在采访]]在2015年。我重新看了那篇采访，然后决定
there was a lot more I had to learn from him. He's become a personal
我还有很多东西要向他学习。他变成了个人
hero to me. So I scoured the internet for [[http://dtrace.org/blogs/bmc/2018/02/03/talks/][more of his writing and
我的英雄。所以我在网上搜索了[[http://dtrace.org/blogs/bmc/2018/02/03/talks/][他的更多作品和
talks]]. Besides what I've already linked in this article, here
谈判]]。除了我在这篇文章中已经链接的内容之外，还有这里
are a couple more great presentations:
还有一些很棒的演讲:

- [[https://www.youtube.com/watch?v=4PaWFYm0kEw][Oral Tradition in Software Engineering]]
- - - - - - [[https://www.youtube.com/watch?[软件工程中的口头传统]]
- [[https://www.youtube.com/watch?v=-zRN7XLCRhc][Fork Yeah! The Rise and Development of illumos]]
- - - - - - [[https://www.youtube.com/watch?v = -zRN7XLCRhc][叉耶!照明的兴起与发展

You can also find some of his writing [[http://dtrace.org/blogs/bmc/][scattered around the DTrace
你也可以找到他的一些作品[[http://dtrace.org/blogs/bmc/]]散布在DTrace中
blog]].
博客]]。

Some interesting operating system technology came out of Sun during
一些有趣的操作系统技术来自于Sun
its final 15 or so years --- most notably DTrace and ZFS --- and Bryan
它的最后15年左右——最著名的是DTrace和ZFS——还有Bryan
speaks about it passionately. Almost as a matter of luck, most of it
充满激情地谈论它。大部分都是运气使然
survived the Oracle acquisition thanks to Sun releasing it as open
在甲骨文的收购中幸免于难，这要归功于Sun将其以开放的方式发布
source in just the nick of time. Otherwise it would have been lost
在最后一刻得到消息。否则它就会丢失
forever. The scattered ex-Sun employees, still passionate about their
直到永远。分散的前sun员工，仍然对他们的工作充满激情
prior work at Sun, along with some of their old customers have since
之前在Sun的工作，以及他们的一些老客户都是如此
picked up the pieces and kept going as a community under the name
收拾残局，以社区的名义继续前进
[[https://illumos.org/][illumos]]. It's like an open source flotilla.
[[https://illumos.org/] [illumos]]。它就像一个开源舰队。

Naturally I wanted to get my hands on this stuff to try it out for
很自然，我想亲自动手试试
myself. Is it really as good as they say? Normally I stick to Linux,
我自己。真的像他们说的那么好吗?通常我坚持使用Linux，
but it (generally) doesn't have these Sun technologies available. The
但是它(通常)没有这些可用的Sun技术。的
main reason is license incompatibility. Sun released its code under
主要原因是许可证不兼容。Sun发布了它的代码
the [[https://opensource.org/licenses/CDDL-1.0][CDDL]], which is incompatible with the GPL. Ubuntu /does/
[[https://opensource.org/licenses/CDDL-1.0][CDDL]]，与GPL不兼容。Ubuntu /确实/
[[https://insights.ubuntu.com/2016/02/18/zfs-licensing-and-linux/][infamously include ZFS]], but other distributions are
[[https://insights.ubuntu.com/2016/02/18/zfs- licensingandlinux/][臭名昭著的包括ZFS]]，但是其他的发行版是
unwilling to take that risk. Porting DTrace is a serious undertaking
不愿意冒这个险。移植DTrace是一项严肃的工作
since it's got its fingers throughout the kernel, which also makes the
因为它的手指遍布整个内核，这也使得
licensing issues even more complicated.
许可问题甚至更加复杂。

Linux has a reputation for Not Invented Here (NIH) syndrome, and these
Linux以“非我发明”(NIH)综合症而闻名
licensing issues certainly contribute to that. Rather than adopt ZFS
许可问题肯定会导致这种情况。而不是采用ZFS
and DTrace, they've been reinvented from scratch: btrfs instead of
而DTrace则是从零开始重新设计的:btrfs而不是
ZFS, and [[http://www.brendangregg.com/blog/2015-07-08/choosing-a-linux-tracer.html][a slew of partial options]] instead of DTrace.
[http://www.brendangregg.com/blog/2015-07-08/choosing-a-linuxtracer.html][大量的部分选项]]而不是DTrace。
Normally I'm most interested in system call tracing, and my go to is
通常我对系统调用跟踪最感兴趣，我的目标是
[[https://en.wikipedia.org/wiki/Strace][strace]], though it certainly has its limitations --- including
[[https://en.wikipedia.org/wiki/Strace][strace]]，虽然它当然有其局限性——包括
this situation of debugging curl under Emacs. Another famous example
在Emacs下调试curl的这种情况。另一个著名的例子
of NIH is Linux's [[http://man7.org/linux/man-pages/man7/epoll.7.html][=epoll(2)=]], which is a [[https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/][broken]]
美国国立卫生研究院是Linux的[[http://man7.org/linux/man7/epoll.7.html][=epoll(2)=]]，这是一个[[https://idea.popcount.org/2017-02-20- epoll-- 12/][断]]
[[https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/][version]] of BSD [[https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2][=kqueue(2)=]].
[https://idea.popcount.org/2017-03-20- epoll-- 22/][版本]]BSD [[https://www.freebsd.org/cgi/man.cgi?

So, if I want to try these for myself, I'll need to install a
所以，如果我想自己尝试这些，我需要安装一个
different operating system. I've dabbled with [[https://omnios.omniti.com/][OmniOS]], an OS
不同的操作系统。我尝试过[[https://omnios.omniti.com/][OmniOS]]，一个操作系统
built on illumos, in virtual machines, using it as an alien
建立在illumos，在虚拟机，使用它作为一个外星人
environment to test some of my software (e.g. [[/blog/2017/03/12/][enchive]]).
测试我的一些软件的环境(例如[[/blog/2017/03/12/][enchive]])。
OmniOS has a philosophy called [[https://omnios.omniti.com/wiki.php/KYSTY][Keep Your Software To Yourself]]
OmniOS有一个哲学叫做[[https://omnios.omniti.com/wiki.php/KYSTY][把你的软件留给自己]]
(KYSTY), which is really just code for “we don't do packaging.”
(KYSTY)，其实就是“我们不做包装”的代码。
Honestly, you can't blame them since [[https://utcc.utoronto.ca/~cks/space/blog/solaris/IllumosSupportLimits][they're a tiny community]].
老实说，你不能怪他们，因为[[https://utcc.utoronto]。ca/~cks/space/blog/solaris/IllumosSupportLimits[他们是一个小社区]]。
The best solution to this is probably [[https://www.pkgsrc.org/][pkgsrc]], which is
最好的解决方案可能是[[https://www.pkgsrc.org/][pkgsrc]]，它是
essentially a universal packaging system. Otherwise [[/blog/2017/06/19/][you're on your
本质上是一个通用的包装系统。否则[[/blog/2017/06/19]][你在你的
own]].
自己的]]。

There's also [[https://www.openindiana.org/][openindiana]], which is a more friendly
还有[[https://www.openindiana.org/][openindiana]]，它更友好
desktop-oriented illumos distribution. Still, the short of it is that
导向illumos分布。不过，简而言之就是这样
you're very much on your own when things don't work. The situation is
当事情不顺利的时候，你只能靠自己。情况
like running Linux a couple decades ago, when it was still difficult
就像几十年前运行Linux一样，那时仍然很困难
to do.
要做的事情。

If you're interested in trying DTrace, the easiest option these days is
如果您有兴趣尝试DTrace，那么现在最简单的方法就是
probably [[https://www.freebsd.org/][FreeBSD]]. It's got a big, active community, thorough
可能[[https://www.freebsd.org/] [FreeBSD]]。它有一个庞大的，活跃的，彻底的社区
documentation, and a huge selection of packages. Its license (the /BSD
文档和大量的包选择。其许可证(the /BSD)
license/, duh) is compatible with the CDDL, so both ZFS and DTrace have
license/， duh)与CDDL兼容，所以ZFS和DTrace都兼容CDDL
been ported to FreeBSD.
已被移植到FreeBSD。

** What is DTrace?
什么是DTrace?
:PROPERTIES:
属性:
:CUSTOM_ID: what-is-dtrace
:CUSTOM_ID what-is-dtrace
:END:
结束:

I've done all this talking but haven't yet described what [[https://wiki.freebsd.org/DTrace/Tutorial][DTrace
我已经做了所有这些谈话，但还没有描述什么[[https://wiki.freebsd.org/DTrace/Tutorial][DTrace
really is]]. I won't pretend to write my own tutorial, but I'll
真的是]]。我不会假装写我自己的教程，但我会
provide enough information to follow along. DTrace is a tracing
提供足够的信息。DTrace是一个跟踪
framework for debugging production systems /in real time/, both for
调试生产系统的框架/实时/，两者都适用
the kernel and for applications. The “production systems” part means
内核和应用程序。“生产系统”部分是指
it's stable and safe --- using DTrace won't put your system at risk of
它是稳定和安全的——使用DTrace不会将您的系统置于风险之中
crashing or damaging data. The “real time” part means it has little
崩溃或损坏数据。“实时”部分意味着它几乎没有
impact on performance. You can use DTrace on live, active systems with
对性能的影响。可以在活动的系统上使用DTrace
little impact. Both of these core design principles are vital for
影响不大。这两个核心设计原则都是至关重要的
troubleshooting those really tricky bugs that only show up in
排除那些只出现在
production.
生产。

There are DTrace /probes/ scattered all throughout the system: on
有DTrace /探测器/分散在整个系统:on
system calls, scheduler events, networking events, process events,
系统调用，调度程序事件，网络事件，进程事件，
signals, virtual memory events, etc. Using a specialized language
信号、虚拟内存事件等。使用专门的语言
called D (unrelated to the general purpose programming language D),
称为D(与通用编程语言D无关)，
you can dynamically add behavior at these instrumentation points.
您可以在这些工具点动态地添加行为。
Generally the behavior is to capture information, but it can also
通常的行为是捕获信息，但它也可以
manipulate the event being traced.
操纵正在跟踪的事件。

Each probe is fully identified by a 4-tuple delimited by colons:
每个探测由一个由冒号分隔的4元组完全标识:
provider, module, function, and probe name. An empty element denotes a
提供程序、模块、函数和探测名称。空元素表示
sort of wildcard. For example, =syscall::open:entry= is a probe at the
通配符。例如，=syscall::open:entry=是位于
beginning (i.e. “entry”) of =open(2)=. =syscall:::entry= matches all
开始(即“进入”)=打开(2)=。= =系统调用:::条目匹配
system call entry probes.
系统调用入口探测。

Unlike strace on Linux which monitors a specific process, DTrace
与Linux上监视特定进程的strace不同，DTrace
applies to the entire system when active. To run curl under strace
活动时应用于整个系统。在斯特拉斯的带领下跑卷发
from Emacs, I'd have to modify Emacs' behavior to do so. With DTrace I
对于Emacs，我必须修改Emacs的行为才能做到这一点。DTrace我
can instrument every curl process without making a single change to
能在不做任何改变的情况下测量每个旋度过程吗
Emacs, and with negligible impact to Emacs. That's a big deal.
对Emacs的影响微乎其微。这是一件大事。

So, when it comes to this Elfeed issue, FreeBSD is much better poised
因此，当谈到Elfeed问题时，FreeBSD的准备工作做得更好
for debugging the problem. All I have to do is catch it in the act.
调试问题。我所要做的就是当场抓住它。
However, it's been months since that bug report and I'm not really
然而，距离那个bug报告已经过去几个月了，我还不是很清楚
making this connection yet. I'm just hoping I eventually find an
建立这种联系。我只是希望我最终能找到一个
interesting problem where I can apply DTrace.
有趣的问题，我可以应用DTrace。

** FreeBSD on a Raspberry Pi 2
** FreeBSD对树莓派2
:PROPERTIES:
属性:
:CUSTOM_ID: freebsd-on-a-raspberry-pi-2
:CUSTOM_ID freebsd-on-a-raspberry-pi-2
:END:
结束:

So I've settled in FreeBSD as the playground for these technologies, I
所以我选择了FreeBSD作为这些技术的游乐场
just have to decide where. I could always run it in a virtual machine,
只是要决定去哪里。我可以在虚拟机中运行它，
but it's always more interesting to try things out on real hardware.
但是在真正的硬件上尝试总是更有趣的。
[[https://wiki.freebsd.org/FreeBSD/arm/Raspberry%20Pi][FreeBSD supports the Raspberry Pi 2]] as a Tier 2 system, and
[[https://wiki.freebsd.org/FreeBSD/arm/Raspberry%20Pi][FreeBSD支持树莓派2]]作为一个二级系统，并且
I had a Raspberry Pi 2 sitting around collecting dust, so I put it to
我有一个覆盆子派2坐在收集灰尘，所以我把它
use.
使用。

I wrote the image to an SD card, and for a few days I stretched my
我把图像写在SD卡上，几天来我一直在做伸展运动
legs on this new system. I cloned a couple dozen of my own git
这个新系统的腿。我克隆了几十个我自己的git
repositories, ran the builds and the tests, and just got a feel for
存储库，运行构建和测试，只是有了一些感觉
things. I tried out the ports system for the first time, mainly to
的事情。我第一次尝试了端口系统，主要是为了
discover that the low-powered Raspberry Pi 2 takes days to build some
发现低功率的树莓派2需要几天的时间来制造一些
of the packages I want to try.
我想试试这些包裹。

I [[/blog/2017/04/01/][mostly program in Vim these days]], so it's some days before I
我[/blog/2017/04/01/][这些天主要用Vim编程]]，所以离我还有几天时间
even set up Emacs. Eventually I do build Emacs, clone my
甚至设置Emacs。最终我建立了Emacs，克隆了我的
configuration, fire it up, and give Elfeed a spin.
配置，启动，让Elfeed旋转。

And that's when the “search failed” bug strikes! Not just once, but
这时“搜索失败”的bug就来了!不止一次，而是
dozens of times. Perfect! This low-powered platform is the jackpot for
几十次。完美!这个低功率的平台是最大的赌注
this particular bug, triggering it left and right. Given that I've got
这个bug，左右触发它。既然我有
DTrace at my disposal, it's /the/ perfect place to debug this.
DTrace由我决定，它是调试这个的/完美的地方。
Something is lying to Elfeed and DTrace will play the judge.
有些东西在对Elfeed撒谎，DTrace将扮演法官。

Before I dive in I see three possibilities:
在我开始之前，我看到了三种可能性:

1. curl is reporting success but truncating its output.
1. curl报告了成功，但是截断了输出。
2. Emacs is quietly truncating curl's output.
2. Emacs正在悄悄地截断curl的输出。
3. Emacs is misinterpreting curl's exit status.
3.Emacs误解了curl的退出状态。

With Dtrace I can observe what every curl process writes to Emacs, and
使用Dtrace，我可以观察每个curl进程写什么给Emacs，以及
I can also double check curl's exit status. I come up with the
我还可以再次检查curl的退出状态。我想到了
following (newbie) DTrace script:
以下(新手)DTrace脚本:

#+BEGIN_EXAMPLE
syscall::write:entry
/execname == "curl"/
{
printf("%d WRITE %d "%s"n",
pid, arg2, stringof(copyin(arg1, arg2)));
}

syscall::exit:entry
/execname == "curl"/
{
printf("%d EXIT %dn", pid, arg0);
}
#+END_EXAMPLE

The =/execname == "curl"/= is a predicate that (obviously) causes the
=/execname == "curl"/=是导致
behavior to only fire for curl processes. The first probe has DTrace
对于旋度过程，只有火的行为。第一个探测器有DTrace
print a line for every =write(2)= from curl. =arg0=, =arg1=, and
为每个=write(2)= from curl打印一行。= arg0 =, = __arg1 =,
=arg2= correspond to the arguments of =write(2)=: fd, buf, count. It
=arg2=对应的参数=write(2)=: fd, buf, count。它
logs the process ID (pid) of the write, the length of the write, and
记录写操作的进程ID (pid)、写操作的长度和
the actual contents written. Remember that these curl processes are
实际写的内容。记住这些旋度过程
run in parallel by Emacs, so the pid allows me to associate the
通过Emacs并行运行，所以pid允许我关联
separate writes and the exit status.
将写和退出状态分开。

The second probe prints the pid and the exit status (the first argument
第二个探测输出pid和退出状态(第一个参数)
to =exit(2)=).
退出(2)= = = =)。

I also want to compare this to exactly what is delivered to Elfeed when
我还想将其与交付给Elfeed的内容进行比较
curl exits, so I modify the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html][process sentinel]] --- the callback
curl退出，所以我修改了[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html][process sentinel]]——回调
that handles a subprocess exiting --- to call =write-file= before any
处理子进程退出——调用=write-file= before any
action is taken. I can compare these buffer dumps to the logs produced
采取行动。我可以将这些缓冲区转储与生成的日志进行比较
by DTrace.
by DTrace。

There are two important findings.
有两个重要的发现。

First, when the “search failed” bug occurs, the buffer was completely
首先，当“搜索失败”bug发生时，缓冲区就完全被破坏了
empty (95% of the time) or truncated at the end of the HTTP headers
空的(95%的情况下)或在HTTP头文件末尾截断
(5% of the time), right at the blank line. DTrace indicates that curl
(5%的概率)，在空白行。DTrace表示那个旋度
did its job to the full, so it's Emacs who's the liar. It's not
充分发挥了它的作用，所以Emacs才是撒谎的人。这不是
delivering all of curl's data to Elfeed. That's pretty annoying.
将curl的所有数据传递给Elfeed。这很烦人。

Second, *curl was line-buffered*. Each line was a separate,
其次，*curl被行缓冲*。每一行都是单独的，
independent =write(2)=. I was certainly /not/ expecting this. Normally
独立=写(2)=。我肯定/没想到会这样。正常情况下
the C library only does line buffering when the output is a terminal.
C库只在输出为终端时进行行缓冲。
That's because it's guessing a user may be watching, expecting the
这是因为它在猜测用户可能正在观看
output to arrive a line at a time.
输出一次到达一行。

Here's a sample of what it looked like in the log:
下面是它在日志中的样子:

#+BEGIN_EXAMPLE
88188 WRITE 32 "Server: Apache/2.4.18 (Ubuntu)
"
88188 WRITE 46 "Location: https://blog.plover.com/index.atom
"
88188 WRITE 21 "Content-Length: 299
"
88188 WRITE 45 "Content-Type: text/html; charset=iso-8859-1
"
88188 WRITE 2 "
"
#+END_EXAMPLE

Why would curl think Emacs is a terminal?
curl为什么会认为Emacs是终端呢?

/Oh./ That's right. /This is the [[/blog/2014/02/06/][same problem I ran into four years
/哦。/这是正确的。这就是我四年来遇到的问题
ago when writing EmacSQL]]./ By default Emacs connects to
以前写EmacSQL时]]。/默认情况下Emacs连接到
subprocesses through a psuedo-terminal (pty). I called this a mistake
通过一个psuedo-terminal (pty)进行子进程。我说这是个错误
in Emacs back then, and I still stand by that claim. The pty causes
在Emacs中，我仍然坚持这个观点。企业的原因
weird, annoying problems for little benefit:
毫无益处的怪异、烦人的问题:

- Interpreting control characters. Hope you weren't transferring binary
-解释控制字符。希望你没有传输二进制
data!
数据!
- Subprocesses will generally get line buffered. This makes them
子进程通常会得到行缓冲。这使得它们
slower, though in some situations it might be desirable.
慢一点，虽然在某些情况下这可能是可取的。
- Stdout and stderr get mixed together. (Optional since Emacs 25.)
- Stdout和stderr混合在一起。(可选，因为Emacs 25。)
- /New!/ There's a bug somewhere in Emacs that causes truncation when
——/新!/ Emacs中有一个bug会导致截断
ptys are used heavily in parallel.
ptys大量并行使用。

Just from eyeballing the DTrace log I knew what to do: dump the pty
仅仅通过目测DTrace日志，我就知道该做什么:转储pty
and switch to a pipe. This is controlled with the
切换到管道。这是由
=process-connection-type= variable, and fixing it [[https://github.com/skeeto/elfeed/commit/945765a57d2f27996b6a43bc62e803dc167d1547][is a
=process-connection-type= variable，并修复它[[https://github.com/skeeto/elfeed/commit/945765a57d2f27996b643bc62e803dc167d1547]
one-liner]].
一行程序]]。

Not only did this completely resolve the truncation issue, Elfeed is
这不仅完全解决了截断问题，Elfeed也是
noticeably faster at fetching feeds on all machines. It's no longer
在所有机器上获取提要的速度明显更快。它不再是
receiving mountains of XML one line at a time, like sucking pudding
一次一行地接收大量XML，就像吮吸布丁一样
through a straw. It's now quite zippy even on my Raspberry Pi 2, which
用吸管。现在它甚至在我的树莓派2上也很活泼
had /never/ been the case before (without the “search failed” bug).
以前从未有过这种情况(没有“搜索失败”的bug)。
Even if you were never affected by this bug, you will benefit from the
即使您从未受到此bug的影响，您也将从
fix.
修复。

I haven't officially reported this as an Emacs bug yet because
我还没有正式报告这是一个Emacs错误，因为
reproducibility is still an issue. It needs something better than
可再现性仍然是个问题。它需要比这更好的东西
“fire off a bunch of HTTP requests across the internet in parallel
“在互联网上并行发送大量HTTP请求
from a Raspberry Pi.”
从覆盆子派。”

The fix reminds me of that [[https://www.buzzmaven.com/old-engineer-hammer-2/][old boilermaker story]] about
这个修复程序让我想起了以前关于old-engineer-hammer-2/的故事
charging a lot of money just to swing a hammer. Once the problem
只为了抡起一把锤子就收了一大笔钱。一旦这个问题
arose, *DTrace quickly helped to identify the place to hit Emacs with
站起来，*DTrace很快帮助确定了Emacs的位置
the hammer*.
锤子*。

/Finally, a big thanks to alphapapa for originally taking the time to
/最后，非常感谢alphapapa最初抽出时间来
report this bug months ago./
几个月前报告这个bug
