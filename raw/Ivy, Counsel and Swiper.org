#+TITLE: Ivy, Counsel and Swiper
#+URL: https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 06月 04日 星期一 12:59:02 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* 1 What is Ivy?
* 1什么是常春藤?
:PROPERTIES:
属性:
:CUSTOM_ID: org121eea9
:CUSTOM_ID org121eea9
:END:
结束:

Ivy is a completion framework, similar to Helm. When downloading
Ivy是一个类似Helm的完井框架。当下载
Ivy, it comes with Counsel and Swiper, which we'll get to in a
艾薇，还有法律顾问和斯威普，我们马上就会讲到
minute. Ivy doesn't try to do too many things, instead it provides
分钟。Ivy不会尝试做太多事情，相反，它会提供
an interface to list, search, filter and perform actions on a
一个用于列出、搜索、筛选和执行操作的接口
collection of "things". These "things" can range from strings to
“东西”的集合。这些“东西”的范围从字符串到
buffers, Ivy doesn't really care. It just provides a way for the
缓冲，艾薇并不在乎。它只是为
user to interact with this collection.
用户与此集合交互。

* 2 Installation
* 2安装
:PROPERTIES:
属性:
:CUSTOM_ID: orgc2d4898
:CUSTOM_ID orgc2d4898
:END:
结束:

Install Ivy via MELPA. If you're unsure what MELPA is or its
通过MELPA安装Ivy。如果你不确定MELPA是什么
enabled, checkout [[http://melpa.milkbox.net/#/getting-started]]. Once
启用,结帐[[http://melpa.milkbox.net/ /开始]]。一次
MELPA is added to your package archives, run
MELPA被添加到您的包存档中，运行

#+BEGIN_EXAMPLE
M-x package-install counsel
#+END_EXAMPLE

Installing Counsel will bring in Ivy and Swiper as dependencies.
安装Counsel将带来Ivy和Swiper作为附件。

* 3 Usage
使用* 3
:PROPERTIES:
属性:
:CUSTOM_ID: orgac4d444
:CUSTOM_ID orgac4d444
:END:
结束:

Enable Ivy via =ivy-mode= (or =(ivy-mode 1)= in your Emacs file) and
在Emacs文件中启用Ivy via = Ivy -mode=(或=(Ivy -mode 1)=)和
you're set! Issue the =execute-extended-command= (default keybinding
你设置!发出=execute- extencommand =(默认的键绑定)
is =M-x=) or =switch-to-buffer= (default keybinding is =C-x b=) and
is =M-x=)或=switch-to-buffer=(默认的键绑定是=C-x b=)和
you'll notice the difference. Without any setup, Ivy has already
你会注意到不同之处。没有任何准备，艾薇已经准备好了
worked its way into some of Emacs' commands.^{[[fn.1][1]]}
在Emacs的一些命令中工作。

[[file:files/m-x-usage.gif]]
[[文件:文件/ m-x-usage.gif]]

While Ivy works without any configuration there are a couple of
虽然Ivy可以在没有任何配置的情况下工作，但还是有一些配置的
lines the maintainers suggest everyone throw in their Emacs'
线路维护人员建议每个人都加入他们的Emacs。
file.^{[[fn.2][2]]}
文件。^ {[[fn.2] [2]]}

#+BEGIN_EXAMPLE
(use-package ivy :demand
:config
(setq ivy-use-virtual-buffers t
ivy-count-format "%d/%d "))
#+END_EXAMPLE

- =ivy-use-virtual-buffers= :: Add recent files and bookmarks to the
方法添加最近的文件和书签
=ivy-switch-buffer=
= ivy-switch-buffer =
- =ivy-count-format= :: Displays the current and total number in the
中显示当前和总数量
collection in the prompt
收款提示

There are a number of other configurations available. Checkout the
还有许多其他配置可用。检出的
documentation (listed in Resources) or if you have Ivy installed,
文档(在参考资料中列出)，或者如果安装了Ivy，
play around using =M-x customize-group ivy=.
尝试使用=M-x自定义组ivy=。

Amazing stuff and we've just touched the tip of the iceberg. We can
神奇的东西，而我们只是触及了冰山的一角。我们可以
extend the functionality of Ivy to allow us to perform several
扩展Ivy的功能，允许我们执行几个
different actions on our list. We'll go into how to add these
我们列表中的不同动作。我们来看看怎么把它们加起来
actions in the [[#org13b1c6d][Demo]] section and then see how we can take advantage
行动在[[#org13b1c6d][Demo]]部分，然后看看我们可以如何利用
of some ready-to-use actions in the [[#org2d4e119][Counsel]] section.
[[#org2d4e119][法律]]部分的一些现成的行动。

** 3.1 Keybindings
* * 3.1快捷键
:PROPERTIES:
属性:
:CUSTOM_ID: org932cd86
:CUSTOM_ID org932cd86
:END:
结束:

When a Ivy minibuffer is active, the following keybindings are
当Ivy minibuffer处于活动状态时，将执行以下键绑定
active
活跃的

| Key              | Command                     | Description                                      |
|键|命令|描述|
|------------------+-----------------------------+--------------------------------------------------|
| =M-n=            | =ivy-next-line=             | Next line                                        |
| =M-n= | =ivy-next-line= | Next line |
| =M-p=            | =ivy-previous-line=         | Previous line                                    |
| =M-p= | =ivy-previous-line= | Previous line |
| =M-<=            | =ivy-beginning-of-buffer=   | Beginning of the Ivy minibuffer                  |
| =M-<= | = Ivy - begining -of-buffer= |开始的Ivy minibuffer |
| =M->=            | =ivy-end-of-buffer=         | End of the Ivy minibuffer                        |
| =M->= | = Ivy - End -buffer= | End of the Ivy minibuffer |
| =C-v=            | =ivy-scroll-up-command=     | Page up by one Ivy buffer size                   |
| =C-v= | = Ivy -scroll-up命令= |页向上一个Ivy缓冲区大小|
| =M-v=            | =ivy-scroll-down-command=   | Page down by one Ivy buffer size                 |
| =M-v= | = Ivy -scroll-down命令= |页下降一个常青藤缓冲区大小|
| =C-m= or =RET=   | =ivy-done=                  | Calls the default action                         |
| =C-m= or =RET= | =ivy-done= |调用默认操作|
| =C-M-m=          | =ivy-call=                  | Calls the default action, keeps Ivy open         |
| =C-M-m= | = Ivy -call= |调用默认动作，保持常青藤打开|
| =M-o=            | =ivy-dispatching-done=      | Displays the available actions                   |
| =M-o= | =ivy-dispatching-done= |显示可用的操作|
| =C-M-o=          | =ivy-dispacthing-call=      | Displays available actions, keeps Ivy open       |
| =C-M-o= | = Ivy - dispactin -call= |显示可用动作，保持常青藤打开|
| =C-'=            | =ivy-avy=                   | Uses Avy to select candidates                    |
| =C-'= | =ivy-avy= |使用Avy选择候选|
| =TAB=            | =ivy-partial-or-done=       | Tab completion, repeated presses may call done   |
| =TAB= | =ivy- partip -or-done= | TAB完成，重试可调用done |
|                  | =ivy-resume=                | Restart Ivy before last action                   |
| | =常春藤简历= |重启常春藤前最后行动|

* 4 Demo
* 4演示
:PROPERTIES:
属性:
:CUSTOM_ID: org13b1c6d
:CUSTOM_ID org13b1c6d
:END:
结束:

Ivy is simple to work with. To demonstrate this, we'll attempt
和艾薇一起工作很简单。为了演示这一点，我们将尝试
to make a simplified version of the buffer list using Ivy.
使用Ivy创建一个简化版本的缓冲区列表。

#+BEGIN_EXAMPLE
(ivy-read "My buffers: " (mapcar #'buffer-name (buffer-list)))
#+END_EXAMPLE

Just like that we have a, albeit rather useless, buffer list that
就像这样，我们有一个缓冲区列表，虽然有点没用
works with Ivy. Notice the list of buffers contracts and expands
适用于常春藤。请注意缓冲区列表的收缩和展开
depending on our input. However selecting a candidate does
取决于我们的输入。然而，选择一个候选人
nothing. Lets get it to do something.
什么都没有。让我们做点什么。

** 4.1 Actions
* * 4.1行动
:PROPERTIES:
属性:
:CUSTOM_ID: org29359ae
:CUSTOM_ID org29359ae
:END:
结束:

The =ivy-read= function takes a number of optional keyword
函数接受一些可选的关键字
arguments after the collection of results. We won't be covering all
参数后收集的结果。我们不会覆盖所有的
of them here, but we'll take a look at the =:actions= keyword.
在这里，我们将查看=:actions=关键字。

Actions invoke a function on the selected candidate. The default
操作在选定的候选对象上调用一个函数。默认的
action is bound to =RET= but you can give more. When working in the
行动是必然的，但你可以付出更多。当我在
Ivy minibuffer, hit =M-o= to see available actions. Lets add an
Ivy minibuffer，点击=M-o=查看可用的操作。让我们添加一个
action to our previous example.
对前面的示例进行操作。

#+BEGIN_EXAMPLE
(ivy-read "My buffers: "
(mapcar #'buffer-name (buffer-list))
:action '(1 ;; index (1 based) of the default action
("s" (lambda (x)
(switch-to-buffer x)) "switch")))
#+END_EXAMPLE

Now if we try it again, selecting a candidate will open the buffer.
现在，如果我们再试一次，选择一个候选人将打开缓冲区。

* 5 Counsel
* 5顾问
:PROPERTIES:
属性:
:CUSTOM_ID: org2d4e119
:CUSTOM_ID org2d4e119
:END:
结束:

To keep concerns separated, Ivy doesn't have a lot of other
为了保持关注点的分离，Ivy并没有很多其他的关注点
functionality. That's where Counsel comes in. Counsel comes with Ivy
功能。这就是法律顾问的用武之地。律师是常青藤
and provides some useful commands, such as =counsel-M-x= and
并提供了一些有用的命令，如=counsel-M-x=和
=counsel-find-file=.
= counsel-find-file =。

These functions use the =ivy-read= function and provide useful
这些函数使用=ivy-read=函数并提供有用的信息
actions on the selection candidate. An action is function that is
对选择候选人的操作。一个动作就是一个功能
preformed on the selected candidate. Try invoking an action (the
预先选定的候选人。尝试调用一个动作
default keybinding is =C-o= when inside the Ivy minibuffer) on
默认的键绑定是=C-o=当在常春藤minibuffer)打开
several of the Counsel commands.
几名律师发出命令。

[[file:files/action.gif]]
[[文件:文件/ action.gif]]

** 5.1 Useful Commands
5.1有用的命令
:PROPERTIES:
属性:
:CUSTOM_ID: org0be1c7d
:CUSTOM_ID org0be1c7d
:END:
结束:

Even though you have most of what you need to go off and extend Ivy
即使你已经拥有了大部分你需要的东西去扩展常春藤
to your little heart desires, its worth seeing what Counsel has to
对于你那颗小小的心的愿望，它值得你去看看忠告的内容
offer as its done a lot of things for you.
它为你做了很多事情。

| Command                        | Actions                                             |
命令|操作|
|--------------------------------+-----------------------------------------------------|
| =counsel-find-file=            | Open externally, open other window, ...             |
对外打开，打开其他窗口，…|
| =counsel=M-x=                  | Find symbol, describe function                      |
查找符号，描述函数|
| =counsel-describe-function=    | Open definition, find symbol                        |
打开定义，找到符号|
| =counsel-describe-variable=    | Open definition, find symbol                        |
打开定义，找到符号|
| =counsel-find-library=         | No additional actions, jumps to library/feature     |
没有其他操作，跳转到库/特性|
| =counsel-info-lookup-symbol=   | No additional actions, jumps to symbol definition   |
| = advice -info-lookup-symbol= |没有其他操作，跳转到符号定义|

The following commands rely on external programs
以下命令依赖于外部程序

| Command              | Action                                                      |
命令|操作|
|----------------------+-------------------------------------------------------------|
| =counsel-git=        | Open externally, open other window (if in git repository)   |
对外打开，打开其他窗口(如果在git库中)|
| =counsel-git-grep=   | No actions, greps string (if in git repository)             |
| =参议-git-grep= |无操作，greps字符串(如果在git库中)|
| =counsel-ag=         | No actions, uses ag to search strings across files          |
| =参议-ag= |无动作，使用ag跨文件|搜索字符串
| =counsel-locate=     | Open externally, dired                                      |
对外开放，dired |
| =counsel-rythmbox=   |                                                             |
| =参赞rythmbox= | |

** 5.2 Extending Counsel
** 5.2扩大律师
:PROPERTIES:
属性:
:CUSTOM_ID: org5467c13
:CUSTOM_ID org5467c13
:END:
结束:

Suppose after reading this you decide Ivy is the greatest thing
假设你读完这篇文章后认为艾薇是最棒的
since sliced bread and you need it. You install it and are happy
因为你需要切片面包。你安装了它，很高兴
but you really want to be able to delete files when perusing your
但你真的希望能够删除文件时，细读你的
file system using =counsel-find-file=. No worries, we can add that.
文件系统使用=参赞-查找-文件=。不用担心，我们可以补充。

#+BEGIN_EXAMPLE
(ivy-set-actions
'counsel-find-file
'(("d" delete-file "delete")))
#+END_EXAMPLE

* 6 MELPA
* 6 MELPA
:PROPERTIES:
属性:
:CUSTOM_ID: org01d3391
:CUSTOM_ID org01d3391
:END:
结束:

There are a few Ivy/Counsel packages available through MELPA
有一些常春藤/律师包可通过MELPA

| Package Name             | Description                                                  |
包名|描述|
|--------------------------+--------------------------------------------------------------|
| =counsel-bbdb=           | Quick search & input email from BBDB                         |
| =参赞BBDB = |快速搜索和输入电子邮件从BBDB |
| =counsel-dash=           | Browse Dash docsets                                          |
| =参议- Dash = |浏览Dash docsets |
| =counsel-gtags=          | Interface for GNU Global tagging                             |
用于GNU全局标记|的接口
| =counsel-osx-app=        | Launch OSX application from Ivy                              |
| =参事- OSX -app= |启动OSX应用程序从常春藤|
| =counsel-projectile=     | Integration with Projectile (manage and navigate projects)   |
| = advisor -射弹= |与射弹的集成(管理和导航项目)|
| =ivy-gitlab=             | Gitlab integration                                           |
| =ivy-gitlab= | Gitlab积分|
| =ivy-rich=               | Different interface for Ivy's switch buffer                  |
| = Ivy -rich= |不同的接口为Ivy的开关缓冲|
| =ivy-todo=               | Manage org TODOs via Ivy                                     |
常春藤- | = = |管理机构都通过ivy |
| =ivy-youtube=            | Query YouTube and play videos in the browser                 |
| =ivy-youtube= |查询YouTube并在浏览器|中播放视频
| =flyspell-correct-ivy=   | Flyspell interface for Ivy                                   |
| = Flyspell -correct- Ivy = |用于Ivy |的Flyspell接口

* 7 Swiper
* 7偷窃者
:PROPERTIES:
属性:
:CUSTOM_ID: org2a0607f
:CUSTOM_ID org2a0607f
:END:
结束:

Swiper is an easy way to search through the current buffer. Very
Swiper是搜索当前缓冲区的一种简单方法。非常
similar to Helm's swoop package.
类似于Helm的swoop包。

[[file:files/swiper.gif]]
[[文件:文件/ swiper.gif]]

* 8 Ivy versus Helm
常春藤vs . Helm
:PROPERTIES:
属性:
:CUSTOM_ID: org799b785
:CUSTOM_ID org799b785
:END:
结束:

I only used Helm for a very short period of time so I'm unable to
我使用头盔的时间很短，所以我不能
provide compare the two fairly. I never ran into issues with Helm
提供比较这两个公平。我和海尔姆从来没有冲突
when I did run it. The one thing I can say was there was always a
当我运行它的时候。我能说的是总是有
nagging feeling that I wasn't using Helm to its full potential. It
唠叨的感觉，我没有使用掌舵的全部潜力。它
felt like I had my hands on a finely crafted ninja sword that could
感觉就像我手上有一把精心制作的忍者剑
slay even the mightiest of foes with a single, effortless slash and
用简单、毫不费力的一刀杀死最强大的敌人
I was using it to chop vegetables.
我用它来切蔬菜。

Ivy has always felt simple and does exactly what I need it to. Its
艾薇总是觉得自己很简单，她做的事情正是我需要的。它的
stayed out of my way for the most part and made some tasks, like
大部分时间我都不去，做了一些任务，比如
switching between buffers and finding files, easy.
在缓冲区之间切换和查找文件，很容易。

* 9 Resources
* 9的资源
:PROPERTIES:
属性:
:CUSTOM_ID: org75d9679
:CUSTOM_ID org75d9679
:END:
结束:

- Github :: [[https://github.com/abo-abo/swiper]]
- Github:: [[https://github.com/abo-abo/swiper]]
- Documentation :: [[http://oremacs.com/swiper/]]
-文档:[[http://oremacs.com/swiper/]]
- From Helm, to Ivy :: [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/]]
-从Helm到Ivy:: [[https://sam217pa.github.io/2016/09/13/from-helmto -ivy/]]

* Footnotes:
*注释:

** fn.1
* * fn.1
Emacs provides the variable, =completing-read-function=, for
Emacs提供变量=completing-read-function=， for
the user to set what completion framework to use. When invoking
用户要设置使用什么完成框架。当调用
=ivy-mode=, it sets this variable to =ivy-completing-read=. For
=ivy-mode=，将该变量设置为=ivy-completing-read=。为
those curious, try enabling and disabling Ivy and call the
那些好奇的人，试着启用和禁用Ivy，然后调用
=completing-read= function to see the differences.
=completing-read=函数查看区别。


** fn.2
* * fn.2
Not familiar with use-package? No worries, just grab the =(setq  ...)= expression and plop it in your configuration file where
不熟悉使用包?不用担心，只需获取=(setq…)=表达式并将其放入配置文件中即可
appropriate. However, if you haven't started using it, you
合适的。然而，如果你还没有开始使用它，你
should. I won't go into it here, but I highly recommend checking
应该这么做。我不会在这里详细介绍，但是我强烈建议您检查一下
out [[https://github.com/jwiegley/use-package]].
[[https://github.com/jwiegley/use-package]]。
