#+TITLE: Part 6: more succinct drawing, if and random
#+URL: http://dantorop.info/project/emacs-animation/lisp6.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 10日 星期一 10:04:03 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Continued from [[/project/emacs-animation/lisp5.html][Emacs Lisp programming pt. 5]].

* A more succinct version of =drawxy= from [[/project/emacs-animation/lisp5.html][last week]]
    :PROPERTIES:
    :CUSTOM_ID: a-more-succinct-version-of-drawxy-from-last-week
    :END:

Moves the cursor to an arbitrary column =x= line =y= on screen and draws =sprite=.

#+BEGIN_EXAMPLE
  (defun drawxy (x y sprite)
   (erase-buffer)
   (insert-char ?\n y)
   (insert-char ?\s x)
   (insert sprite))
#+END_EXAMPLE

Uses =insert-char= to space over. =?\s= is the code for the space character. With =insert-char= you can specify the number of characters to insert, and don't need a =dotimes= loop.

* A more succinct version of =background= from [[/project/emacs-animation/lisp5.html][last week]]
    :PROPERTIES:
    :CUSTOM_ID: a-more-succinct-version-of-background-from-last-week
    :END:

#+BEGIN_EXAMPLE
  (defun background (width height)
   (erase-buffer)
   (dotimes (i height)
   (insert-char ?\. width)
   (newline)))
#+END_EXAMPLE

Uses =insert-char= to draw the grid, saving a =dotimes=. This draws a grid of periods (via =?\.= character code). You could replace =?\.= with =?\s= to draw an invisible grid. Either way, the goal is to create a space in which the cursor will move, to draw multiple sprites without having to erase the buffer.

* The =drawxy2= function from [[/project/emacs-animation/lisp5.html][last week]], a touch briefer
    :PROPERTIES:
    :CUSTOM_ID: the-drawxy2-function-from-last-week-a-touch-briefer
    :END:

#+BEGIN_EXAMPLE
  (defun drawxy2 (x y sprite)
   (goto-char 1)
   (forward-line y)
   (forward-char x)
   (delete-region (point) (+ (point) (length sprite)))
   (insert sprite))
#+END_EXAMPLE

* Using =if=
    :PROPERTIES:
    :CUSTOM_ID: using-if
    :END:

Depends on having =background= and =drawxy2= already eval'd.

#+BEGIN_EXAMPLE
  (defun where ()
   (background 40 25)
   (dotimes (i 10)
   (if (= i 5)
      (drawxy2 30 i "here")
   (drawxy2 (* i 3) (* i 2) "there?"))
   (sit-for 0.2)))
#+END_EXAMPLE

* Using =random=
    :PROPERTIES:
    :CUSTOM_ID: using-random
    :END:

Also depends on having =background= and =drawxy2= already eval'd.

#+BEGIN_EXAMPLE
  (defun where2 ()
   (background 40 25)
   (dotimes (i 20)
   (if (= i 12)
      (drawxy2 30 i (propertize "here" 'face '(:foreground "green")))
   (drawxy2 (random 30) (random 25) "there?"))
   (sit-for 0.2)))
#+END_EXAMPLE

Continued in [[/project/emacs-animation/lisp7.html][Emacs Lisp programming pt. 7]].
