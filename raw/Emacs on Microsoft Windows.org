#+TITLE: Emacs on Microsoft Windows
#+URL: http://caiorss.github.io/Emacs-Elisp-Programming/Emacs_On_Windows.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2019年 01月 15日 星期二 15:46:37 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
* 1 Emacs on Microsoft Windows
*1微软视窗Emacs
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1
:CUSTOM_ID sec-1
:END:
结束:

** 1.1 Overview
* * 1.1概述
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-1
:CUSTOM_ID sec-1-1
:END:
结束:

*Why Emacs on Windows ?*
为什么要在Windows上使用Emacs

Emacs provides many useful tools for Windows developers or anyone that
Emacs为Windows开发人员提供了许多有用的工具
have to use Windows for professional reasons or use Windows at work
必须使用Windows的专业原因或使用Windows的工作
such as:
如:

- Powerful terminal emulator: Emacs can be a powerful terminal
强大的终端仿真器:Emacs可以是一个强大的终端
emulator for Windows and a outstanding replacement for cmd.exe
Windows的仿真器和cmd.exe的出色替代品
terminal emulator because it has history, multi line history and
终端仿真器，因为它有历史，多行历史和
multi line input and tiling windows where it is possible to split
多行输入和平铺窗口在那里是可能的分裂
the Emacs window and run a repl and edit a file on the same
在Emacs窗口上运行一个repl并编辑一个文件
window. Unlike cmd.exe Emacs can also run multiple REPLs in the
窗口。与cmd.exe不同，Emacs还可以在
same window.
相同的窗口。
- Run any shell: Emacs can run any shell application like Python,
-运行任何shell: Emacs可以运行任何shell应用程序，如Python，
IPython, Powershell, cmd.exe, bash, C# shell, F# and so on.
IPython, Powershell, cmd。exe, bash, c# shell, f#等等。
- Eshell: Eshell is unix-like shell implemented in Elisp providing
- Eshell: Eshell是类unix的外壳实现的Elisp提供
many unix commands like ls, mv, cp, rm without any external
许多unix命令像ls, mv, cp, rm没有任何外部的
dependencies and it is also highly integrated to Emacs allowing the
它也高度集成到Emacs中，允许
user to call elisp functions, browser directories, open files
用户可以调用elisp函数，浏览器目录，打开文件
(visit buffer).
(访问缓冲区)。
- Dired mode: Dired mode allows fast directory navigation and to
Dired模式:Dired模式允许快速的目录导航
run commands or apply shell commands on files like md5sum, rm -rf,
在md5sum、rm -rf、
git add and so on.
git添加等等。

** 1.2 Getting Emacs and Useful tools
** 1.2获取Emacs和有用的工具
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-2
:CUSTOM_ID sec-1-2
:END:
结束:

*** 1.2.1 Getting Emacs
*** 1.2.1获取Emacs
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-2-1
:CUSTOM_ID sec-1-2-1
:END:
结束:

Emacs 32 bits
Emacs 32位

- [[https://ftp.gnu.org/gnu/emacs/windows/]]
- - - - - - [[https://ftp.gnu.org/gnu/emacs/windows/]]

Emacs 64 bits - 64-Bit GNU Emacs for MS Windows with optimization.
64位- 64位GNU Emacs的MS Windows与优化。

- [[https://sourceforge.net/projects/emacsbinw64/]]
- - - - - - [[https://sourceforge.net/projects/emacsbinw64/]]

Install using Chocolately Package Manager
使用巧克力包管理器安装

- [[https://chocolatey.org/packages?q=emacs]]
- - - - - - [[https://chocolatey.org/packages?q=emacs]]

Emacs 64 bits unnoficial
64位非人工的

- [[https://chocolatey.org/packages/emacs64]]
- - - - - - [[https://chocolatey.org/packages/emacs64]]

#+BEGIN_EXAMPLE
choco install emacs64
#+END_EXAMPLE

*** 1.2.2 Getting Unix utilities
*** 1.2.2获取Unix实用程序
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-2-2
:CUSTOM_ID sec-1-2-2
:END:
结束:

Git for Windows provides many Unix utilities ported for Windows like
针对Windows的Git提供了许多类似于Windows的Unix实用工具
awk, cat, ls, chown, grep, find and etc.
awk, cat, ls, chown, grep, find等。

- [[https://git-scm.com/download/win]]
- - - - - - [[https://git-scm.com/download/win]]

#+BEGIN_EXAMPLE
c:/Program Files/Git/usr/bin $ ls -l *.exe
-rwxrwxrwx 1 Administrators None 65017 2016-03-18 16:40 [.exe
-rwxrwxrwx 1 Administrators None 28991 2016-03-18 16:40 arch.exe
-rwxrwxrwx 1 Administrators None 581408 2015-05-21 2015 awk.exe
-rwxrwxrwx 1 Administrators None 37712 2016-03-18 16:40 base32.exe
-rwxrwxrwx 1 Administrators None 37712 2016-03-18 16:40 base64.exe
-rwxrwxrwx 1 Administrators None 30078 2016-03-18 16:40 basename.exe
-rwxrwxrwx 1 Administrators None 2063362 2016-07-13 16:00 bash.exe
-rwxrwxrwx 1 Administrators None 89618 2014-11-04 2014 bunzip2.exe
-rwxrwxrwx 1 Administrators None 89618 2014-11-04 2014 bzcat.exe
-rwxrwxrwx 1 Administrators None 89618 2014-11-04 2014 bzip2.exe
-rwxrwxrwx 1 Administrators None 14686 2014-11-04 2014 bzip2recover.exe
-rwxrwxrwx 1 Administrators None 74003 2016-03-01 17:15 captoinfo.exe
-rwxrwxrwx 1 Administrators None 51896 2016-03-18 16:40 cat.exe
-rwxrwxrwx 1 Administrators None 55848 2016-03-18 16:40 chcon.exe

...

-rwxrwxrwx 1 Administrators None 128615 2016-03-18 16:40 vdir.exe
-rwxrwxrwx 1 Administrators None 2335971 2016-04-09 11:08 view.exe
-rwxrwxrwx 1 Administrators None 2335971 2016-04-09 11:08 vim.exe
-rwxrwxrwx 1 Administrators None 2335971 2016-04-09 11:08 vimdiff.exe
-rwxrwxrwx 1 Administrators None 42100 2016-03-18 16:40 wc.exe
-rwxrwxrwx 1 Administrators None 29553 2015-07-20 2015 which.exe
-rwxrwxrwx 1 Administrators None 63429 2016-03-18 16:40 who.exe
-rwxrwxrwx 1 Administrators None 28054 2016-03-18 16:40 whoami.exe
-rwxrwxrwx 1 Administrators None 975360 2016-05-16 14:32 winpty-agent.exe
-rwxrwxrwx 1 Administrators None 41984 2016-05-16 14:32 winpty-debugserver.exe
-rwxrwxrwx 1 Administrators None 747008 2016-05-16 14:32 winpty.exe
-rwxrwxrwx 1 Administrators None 64058 2016-01-20 15:17 xargs.exe
-rwxrwxrwx 1 Administrators None 25299 2016-03-29 14:28 xmlwf.exe
-rwxrwxrwx 1 Administrators None 18954 2016-04-09 11:08 xxd.exe
-rwxrwxrwx 1 Administrators None 28580 2016-03-18 16:40 yes.exe
-rwxrwxrwx 1 Administrators None 173708 2014-11-04 2014 zipinfo.exe
#+END_EXAMPLE

GNU Make is an useful build-automation tool and can be got from:
GNU Make是一个有用的构建自动化工具，可以从以下途径获得:

- [[https://chocolatey.org/packages/make/3.81.4]]
- - - - - - [[https://chocolatey.org/packages/make/3.81.4]]

#+BEGIN_EXAMPLE
$ choco install make
#+END_EXAMPLE

** 1.3 Useful Tweaking
** 1.3有用的调整
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-3
:CUSTOM_ID sec-1-3
:END:
结束:

*** 1.3.1 Setting Environments Variables
*** 1.3.1环境变量设置
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-3-1
:CUSTOM_ID sec-1-3-1
:END:
结束:

1. <<sec-1-3-1-1>>Set HOME\

The HOME environment variable that has the default value
具有默认值的HOME环境变量
/home/<username>) on Linux sets the user's directory path.
Linux上的/home/<username>)设置用户的目录路径。

This variable, which is equivalent to _%USERPROFILE% _(=C:\Users<username>= )
这个变量相当于_%USERPROFILE% _(=C:\Users<username>=)
is expected to be set by many Unix applications ported to Windows and it
是期望由许多Unix应用程序移植到Windows和it
also makes directory browser in Emacs and shells easier.
还使得Emacs和shell中的目录浏览器更加简单。

#+BEGIN_EXAMPLE
C:Usersarch>echo %USERPROFILE%
C:Usersarch
#+END_EXAMPLE

It can be set permanently by using the commmand below on cmd.exe shell.
它可以通过在cmd.exe外壳上使用下面的命令来永久设置。

#+BEGIN_EXAMPLE
setx HOME %USERPROFILE%
#+END_EXAMPLE

To test if the variable is set. Open a new cmd.exe shell and type:
打开一个新的cmd.exe外壳，输入:

#+BEGIN_EXAMPLE
C:Usersarch>echo %HOME%
C:Usersarch
#+END_EXAMPLE

*It allows to browser Windows directories as:*
*它允许浏览器的Windows目录为:*

| ~            | C:Usersarch             |
| ~ | C:Usersarch |
| ~/Desktop    | C:UsersarchDocuments   |
| ~/桌面| C:UsersarchDocuments |
| ~/.emacs.d   | C:Usersarch.emacs.d    |
| ~ / . emacs。d | C: Usersarch.emacs。d |

*It also allows the commands:*
*它还允许以下命令:*

To open file ~/.emac.d/init.el (C:Usersarch.emacs.dinit.el)
要打开文件~/.emac.d/init。埃尔(C: Usersarch.emacs.dinit.el)

- C-x C-f find-file ~/.emac.d/init.el
- C-x C-f查找文件~/.emac.d/init.el

To open directory (C:UsersarchDesktop)
打开目录(C:UsersarchDesktop)

- C-x C-d ~/Desktop
- C-x C-d ~/桌面

2. <<sec-1-3-1-2>>Set PATH\

Executables located in directories listed in PATH environment variable
位于PATH环境变量中列出的目录中的可执行文件
can be invoked without its full path like ls, echo and who in
可以调用它的完整路径，如ls, echo和谁在
Unix-like OS or ipconfig, arp and whoami in Windows.
类unix操作系统或ipconfig, arp和whoami在Windows。

#+BEGIN_EXAMPLE
C:Usersarchbin>echo %PATH%
C:ProgramDataOracleJavajavapath;C:Windowssystem32;C:Windows;C:WindowsSystem32Wbem...
#+END_EXAMPLE

By adding the directory ~/bin or C:Users<user>bin to PATH variable
通过将目录~/bin或C:Users<user>bin添加到PATH变量
it makes easir to call command line applications from this directory
从这个目录调用命令行应用程序很容易
without specifing its full path from Emacs or shell (cmd.exe). It can
没有从Emacs或shell (cmd.exe)指定其完整路径。它可以
be done with:
完成:

- Add the directory C:Users<user>bin to %PATH% enviroment variable:
-添加目录C:Users<user>bin到%PATH% enviroment变量:

#+BEGIN_EXAMPLE
setx PATH "%PATH%;%USERPROFILE%bin"
#+END_EXAMPLE

It makes easeir to call C:Users<user>bincurl.exe from any
它使得调用C:Users<user>bincurl.exe from any变得容易
directory. Instead of write its full path the user can just run =$ curl.exe= or =$ curl=.
目录中。用户可以直接运行=$ curl而不是写入它的完整路径。exe=或=$ curl=。

*** 1.3.2 Invert Control and Capslock
*** 1.3.2反转控制和Capslock
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-3-2
:CUSTOM_ID sec-1-3-2
:END:
结束:

The Ctrl (Control) key is one of the most used keys, although it is
Ctrl (Control)键是最常用的键之一，尽管它是
one of the most inconvenient and ergonomically bad key to type
一个最不方便的和符合人体工程学的关键字
possible leading to strain injury when used often as in Emacs. On the
在Emacs中经常使用可能导致拉伤。在
other hand, Capslock while in a convenient position is one of the most
另一方面，Capslock在一个方便的位置是最
useless keys as it is not used often and upper case letters can be
无用的键，因为它不是经常使用和大写字母可以
typed just by holding the shift key while typing the underlying
键入时只需按住shift键即可
letter. Those problems can be overcome by mapping the Capslock key to
信。这些问题可以通过将Capslock密钥映射到
Ctrl and Ctrl to Capslock. On Windows it can be done by running the
并按Ctrl和Ctrl锁定。在Windows上可以通过运行
commands below in the powershell as administrator and then rebooting or
命令，然后重新启动或
by entering in the cmd.exe shell and typing $ powershell and then
输入cmd.exe shell并输入$ powershell，然后
pasting the mentioned commands.
粘贴上面提到的命令。

- Source: [[https://superuser.com/questions/949385/map-capslock-to-control-in-windows-10][Map capslock to ctrl - Stack Overflow]]
-来源:[https://superuser.com/questions/949385/map-capslock-to-control-in-windows-10][Map capslock to ctrl - Stack Overflow]

#+BEGIN_EXAMPLE
$hexified = "00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00".Split(',') | % { "0x$_"};
$kbLayout = 'HKLM:SystemCurrentControlSetControlKeyboard Layout';
New-ItemProperty -Path $kbLayout -Name "Scancode Map" -PropertyType Binary -Value ([byte[]]$hexified);
#+END_EXAMPLE

*** 1.3.3 Initialization - init.el file.
*** 1.3.3初始化- init。el文件。
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-3-3
:CUSTOM_ID sec-1-3-3
:END:
结束:

This section provides a minimal configuration for Windows to deal with
本节提供Windows要处理的最小配置
pitfalls and annoyances.
陷阱和烦恼。

- Suppress startup screen
-抑制启动画面

#+BEGIN_EXAMPLE
(setq inhibit-startup-message t)
#+END_EXAMPLE

- Suppress Windows annoying beep or bell - Visible bell
-抑制窗口恼人的哔哔声或铃声可见的铃声

#+BEGIN_EXAMPLE
(setq-default visible-bell t)
#+END_EXAMPLE

- Do not open file or user dialog.
-不要打开文件或用户对话框。

#+BEGIN_EXAMPLE
(setq use-file-dialog nil)
(setq use-dialog-box nil)
#+END_EXAMPLE

- Use Unix's =n= (LF- Line Feed) and utf instead of Windows =rn=
-使用Unix的=n= (LF-换行)和utf代替Windows =rn=
(CRLF - Carriage Return and Line Feed) as end of line character. It
(CRLF -回车和换行)作为行结束符。它
may not be desirable if most files or project edited are for
如果大多数文件或项目编辑是为了
Windows or building tools that may fail if the source file doens't
如果源文件不存在，Windows或构建工具可能会失败
CRLF as line ending.
CRLF作为行结束。

#+BEGIN_EXAMPLE
(setq-default buffer-file-coding-system 'utf-8-unix)
#+END_EXAMPLE

- UTF8 Everywhere
——UTF8无处不在

#+BEGIN_EXAMPLE
(set-terminal-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
#+END_EXAMPLE

- Separate Customization file from init.el
-从init.el中分离定制文件

#+BEGIN_EXAMPLE
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_EXAMPLE

- Handy key bindings for invoking compilation command.
-方便的键绑定调用编译命令。

- Type F9 to call M-x compile
-输入F9调用M-x编译
- Type Ctrl + F9 to call M-x recompile - running the compilation
-键入Ctrl + F9调用M-x重新编译-运行编译
command again.
再次命令。

#+BEGIN_EXAMPLE
(global-set-key (kbd "<f9>") #'compile)

(global-set-key (kbd "<C-f9>")
(lambda () (interactive)
(save-buffer)
(recompile)
))
#+END_EXAMPLE

** 1.4 Unix utilities
** 1.4 Unix工具
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-4
:CUSTOM_ID sec-1-4
:END:
结束:

You can bash install with Chocolately package manager or download GIT
您可以使用Chocolately软件包管理器进行bash安装，也可以下载GIT
version control app that comes bundled with bash and Unix utilities
与bash和Unix实用程序绑定的版本控制应用程序
like grep, mv, ssh, df and dd.
比如grep、mv、ssh、df和dd。

Command to run Bash. Usage: M-x run-bash
命令运行Bash。用法:m x run-bash

#+BEGIN_EXAMPLE
(defun run-bash ()
(interactive)
(let ((shell-file-name "C:\Program Files\Git\bin\bash.exe"))
(shell "*bash*")))
#+END_EXAMPLE

Command to run cmd.exe. Usage: M-x run-cmdexe
命令运行cmd.exe。用法:m x run-cmdexe

#+BEGIN_EXAMPLE
(defun run-cmdexe ()
(interactive)
(let ((shell-file-name "cmd.exe"))
(shell "*cmd.exe*")))
#+END_EXAMPLE

** 1.5 Environment Variables in Emacs
** 1.5 Emacs中的环境变量
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-5
:CUSTOM_ID sec-1-5
:END:
结束:

To run Unix utilities and other command lines apps in Emacs add to the
要运行Unix实用程序和其他命令行，请将Emacs中的应用程序添加到
PATH system environment variable the path to their directories like this:
路径系统环境变量路径到他们的目录如下:

#+BEGIN_EXAMPLE
(setenv "PATH" (concat

;; "c:/Windows/System32" ";"

"c:/Windows/Microsoft.NET/Framework/v4.0.30319" ";"

"C:\Windows\Microsoft.NET\Framework\v4.0.30319" ";"

;; Unix tools
"C:\Program Files\Git\usr\bin" ";"

;; User binary files
"C:\User\arch\bin" ";"

;; Mono Installation.
"c:\Program Files\Mono\bin" ";"

"c:\Program Files\Mono\lib\mono\4.5" ";"

(getenv "PATH")

))
#+END_EXAMPLE

** 1.6 Shells
* * 1.6壳
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-6
:CUSTOM_ID sec-1-6
:END:
结束:

*** 1.6.1 Eshell
* * * 1.6.1 Eshell
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-6-1
:CUSTOM_ID sec-1-6-1
:END:
结束:

1. <<sec-1-6-1-1>>Overview\

Eshell provides many benefits to Windows users:
Eshell为Windows用户提供了许多好处:

- Many unix like commands implemented on Emacs' Lisp like: mv, cp, which ...
很多类似unix的命令在Emacs的Lisp上实现，比如:mv, cp，这…
- Completion
——完成
- History: C-c C-l
-历史:C-c - C-l
- Easy copy and paste unlike cmd.exe
-容易复制和粘贴不像cmd.exe
- Integration with Eamcs since it can run Emacs commands (interactive
-与eamc的集成，因为它可以运行Emacs命令(交互式的
functions) like shell commands.
例如shell命令。

2. <<sec-1-6-1-2>>Screenshots\

[[file:images/eshell-windows-demo1.png][[[file:images/eshell-windows-demo1.png]]]]
[[文件:图像/ eshell-windows-demo1.png][[[文件:图像/ eshell-windows-demo1.png]]]]

3. <<sec-1-6-1-3>>Demonstrations\

1. <<sec-1-6-1-3-1>>Commands and history\

To open the history type: C-c C-l
打开历史类型:C-c - C-l

[[file:images/eshell-windows-demo1.gif][[[file:images/eshell-windows-demo1.gif]]]]
[[文件:图像/ eshell-windows-demo1.gif][[[文件:图像/ eshell-windows-demo1.gif]]]]

2. <<sec-1-6-1-3-2>>Emacs Integration\

Eshell can run Emacs elisp commands (interactive functions) like
Eshell可以像这样运行Emacs elisp命令(交互函数)
find-file, dired as ordinary shell commands like is shown above.
find-file作为普通的shell命令，如上所示。

The function find-file can be executed in eshell as shell command
函数find-file可以作为shell命令在eshell中执行
=find-file ~/.emacs.d/init.el= .
=查找文件~ / .emacs.d / init。el =。

#+BEGIN_EXAMPLE
(find-file "~/.emacs.d/init.el")
#+END_EXAMPLE

Some useful Elisp commands on Eshell:
一些有用的Elisp命令在Eshell:

Open file:
打开文件:

- find-file
——查找文件
- find-file-other-window
——find-file-other-window
- find-file-other-frame
——find-file-other-frame

Open directory:
开的目录:

- dired
——可怕的
- dired-other-window
——dired-other-window
- dired-other-frame
——dired-other-frame

3. <<sec-1-6-1-3-3>>Asyncrhonous Commands\

#+BEGIN_EXAMPLE
~/Desktop $ notepad.exe &
#+END_EXAMPLE

4. <<sec-1-6-1-3-4>>Copy command output to clibpoard\

Eshell comes with a pseudo clipboard device /dev/kill that is useful
Eshell提供了一个有用的伪剪贴板设备/dev/kill
to handle clipboard.
处理剪贴板。

*Copy command output to clibpboard*
*复制命令输出到剪贴板*

#+BEGIN_EXAMPLE
~/Desktop $ ipconfig.exe > /dev/kill
#+END_EXAMPLE

*Show clibpoard content*
* * clibpoard展示内容

5. <<sec-1-6-1-3-5>>Shell Commands mixed with Emacs commands\

Note: split-string Is an Emacs function.
注意:split-string是Emacs函数。

*Example 1:*
*示例1:*

#+BEGIN_EXAMPLE
~/Desktop $ split-string $PATH ";"

(#("C:/Program Files (x86)/Microsoft SDKs/F#/4.0/Framework/v4.0" 0 59
(escaped t))
#("c:/Windows/System32" 0 19
(escaped t))
#("c:/Windows/Microsoft.NET/Framework/v4.0.30319" 0 45
(escaped t))
#("C:\Windows\Microsoft.NET\Framework\v4.0.30319" 0 45
(escaped t))
#("C:\Program Files\Git\usr\bin" 0 28
(escaped t))
#("C:\User\arch\bin" 0 16
(escaped t))
#("c:\Program Files\Mono\bin" 0 25
(escaped t))
#("c:\Program Files\Mono\lib\mono\4.5" 0 34
(escaped t))
"")
~/Desktop $
#+END_EXAMPLE

*Exmaple 2:*
*例子2:*

#+BEGIN_EXAMPLE
~/Desktop $ for m in {split-string $PATH ";"} {echo $m}

C:/Program Files (x86)/Microsoft SDKs/F#/4.0/Framework/v4.0
c:/Windows/System32
c:/Windows/Microsoft.NET/Framework/v4.0.30319
C:WindowsMicrosoft.NETFrameworkv4.0.30319
C:Program FilesGitusrbin
C:Userarchbin
c:Program FilesMonobin
c:Program FilesMonolibmono4.5
~/Desktop $
#+END_EXAMPLE

*Example 3:*
*示例3:*

#+BEGIN_EXAMPLE
~/Desktop $ for m in $load-path { echo $m}

e:/projects/org-wiki
~/.emacs.d/packages
c:/Users/arch/.emacs.d/elpa/csharp-mode-20160901.319
c:/Users/arch/.emacs.d/elpa/fsharp-mode-20160719.315
c:/Users/arch/.emacs.d/elpa/flycheck-20160817.321
c:/Users/arch/.emacs.d/elpa/company-quickhelp-20160211.718
c:/Users/arch/.emacs.d/elpa/company-20160730.1516
c:/Users/arch/.emacs.d/elpa/helm-anything-20141126.231
c:/Users/arch/.emacs.d/elpa/anything-20160822.1852
c:/Users/arch/.emacs.d/elpa/helm-20160824.745
...
#+END_EXAMPLE

*** 1.6.2 Powershell
* * * 1.6.2 Powershell
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-6-2
:CUSTOM_ID sec-1-6-2
:END:
结束:

This command runs Powershell on Emacs:
该命令在Emacs上运行Powershell:

#+BEGIN_EXAMPLE
(defun run-powershell ()
"Run powershell"
(interactive)
(async-shell-command "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe -Command -"
nil
nil))
#+END_EXAMPLE

Usage: M-x run-powershell.
用法:m x run-powershell。

** 1.7 Visual C++ MSVC Building Tools
** 1.7 Visual c++ MSVC构建工具
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-7
:CUSTOM_ID sec-1-7
:END:
结束:

*** <<ID-ea73a629-5cf0-4bd5-8b0f-ef0a418773f2>>1.7.1 Calling MSVC tools from Emacs
*** <ID-ea73a629-5cf0-4bd5-8b0f-ef0a418773f2>>1.7.1从Emacs调用MSVC工具
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-7-1
:CUSTOM_ID sec-1-7-1
:END:
结束:

Calling the default and official Windows' C++ compiler MSVC (Microsoft
调用默认和官方的Windows c++编译器MSVC(微软
Visual C++) from command line is not easy as calling gcc, mingw or
从命令行调用gcc、mingw或
clang as MSVC needs environment variables INCLUDE, LIB, LIBPATH and
clang作为MSVC需要的环境变量包括，LIB, LIBPATH和
PATH to be properly set with correct paths. Those settings depends on
路径要正确设置正确的路径。这些设置取决于
the version of the compiler and the building target x86 (32 bits) or
编译器的版本和构建目标x86(32位)或
x64 (64 bits), so the path settings of MSVC 2015 are different from
x64(64位)，所以MSVC 2015的路径设置与
MSVC 2017. This section provides useful commands that solve this
MSVC 2017。本节提供一些有用的命令来解决这个问题
problem by allowing the user call the compiler directly which may be
问题是允许用户直接调用编译器
useful for studying c++ on Windows, learning about Windows API, testing
对于学习Windows上的c++，学习Windows API，测试非常有用
the compiler, building simple C++ programs or creating
编译器，构建简单的c++程序或创建
proof-of-concepts.
概念验证。

Note: It was tested with MSVC 2017 and Windows10.
注:使用MSVC 2017和Windows10进行测试。

To use it just copy the functions to the file ~/.init.el or emacs
要使用它，只需将函数复制到文件~/.init中。el或emacs
intialization file.
初始化文件。

- Porgram:
- Porgram:

Saves the original PATH variable
保存原始路径变量

#+BEGIN_EXAMPLE
(defvar msbuild-old-path-var (getenv "PATH"))
#+END_EXAMPLE

This command sets environments variables for MSVC - 2017 Building tools and x68
该命令为MSVC - 2017构建工具和x68设置环境变量
building target. If the user runs M-x msbuild-2017-x86-setup, it will
建设目标。如果用户运行M-x msbuild-2017-x86-setup，它将
allows to call the msvc compiler cl.exe with M-x compile cl.exe file.cpp.
允许调用msvc编译器cl.exe与M-x编译cl.exe文件。cpp。
Then, the code will be compiled for x86 target. It is also possible to
然后，针对x86目标编译代码。也有可能
call with M-x compile the commands msbuild.exe, link.exe (MSVC's linker)
调用M-x编译命令msbuild。exe, link.exe (MSVC的链接器)
and dumpbin.exe (similar to GNU objdump).
和dumpbin.exe(类似于GNU objdump)。

#+BEGIN_EXAMPLE
(defun msbuild-2017-x86-setup ()
"Set enviorment variables to load Microsoft Visual C++ Compiler (MSVC 32 bits)"
(interactive)
(message "Setting 32 bits MSVC building tools.")
(setenv "PATH" msbuild-old-path-var)
(setenv "INCLUDE"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/include"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/include"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/include/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/ucrt"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/shared"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/winrt"
))

(setenv "LIB"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x86"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x86"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/lib/um/x86"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/ucrt/x86"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/um/x86"
))

(setenv "LIBPATH"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x86"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x86"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x86/store/references"
";" "C:/Program Files (x86)/Windows Kits/10/UnionMetadata/10.0.16299.0"
";" "C:/Program Files (x86)/Windows Kits/10/References/10.0.16299.0"
";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
))

(setenv "PATH"
(concat
(getenv "PATH")
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX86/x86"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/VC/VCPackages"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/MSBuild/15.0/bin/Roslyn"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Team Tools/Performance Tools"
";" "C:/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/"
";" "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/"
";" "C:/Program Files (x86)/Microsoft SDKs/F#/4.1/Framework/v4.0/"
";" "C:/Program Files (x86)/Windows Kits/10/bin/x86"
";" "C:/Program Files (x86)/Windows Kits/10/bin/10.0.16299.0/x86"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community//MSBuild/15.0/bin"
";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/Tools/"
)))
#+END_EXAMPLE

The command below sets enviroment variable for MSVC - 2017 and x64
下面的命令为MSVC - 2017和x64设置环境变量
building target and its similar to msbuild-2017-x86-setup.
构建目标和它类似的msbuild-2017-x86-setup。

#+BEGIN_EXAMPLE
(defun msbuild-2017-x64-setup ()
"Set enviorment variables to load Microsoft Visual C++ Compiler (MSVC) 64 bits"
(interactive)
(message "Setting 64 bits building tools.")
(setenv "PATH" msbuild-old-path-var)
(setenv "INCLUDE"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/include"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/include"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/include/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/ucrt"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/shared"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/winrt"
))

(setenv "LIB"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x64"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/lib/um/x64"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/ucrt/x64"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/um/x64"
))

(setenv "LIBPATH"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x64"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64/store/references"
";" "C:/Program Files (x86)/Windows Kits/10/UnionMetadata/10.0.16299.0"
";" "C:/Program Files (x86)/Windows Kits/10/References/10.0.16299.0"
";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
))

(setenv "PATH"
(concat
(getenv "PATH")
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX86/x64"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/VC/VCPackages"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/MSBuild/15.0/bin/Roslyn"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Team Tools/Performance Tools"
";" "C:/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/"
";" "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/"
";" "C:/Program Files (x86)/Microsoft SDKs/F#/4.1/Framework/v4.0/"
";" "C:/Program Files (x86)/Windows Kits/10/bin/x64"
";" "C:/Program Files (x86)/Windows Kits/10/bin/10.0.16299.0/x64"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community//MSBuild/15.0/bin"
";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/"
";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/Tools/"
)))
#+END_EXAMPLE

This command allows to compile the current buffer. For instance, if
该命令允许编译当前缓冲区。例如,如果
the current buffer is associated to a file test1.cpp and user types
当前缓冲区与文件test1.cpp和用户类型相关联
M-x compile-msvc-x86, it will show a prompt with cl.exe test1.cpp
M-x compile-msvc-x86，它将显示一个提示符与cl.exe test1.cpp
asking the user to confirm or complement the compilation command.
要求用户确认或补充编译命令。

#+BEGIN_EXAMPLE
(defun compile-msvc-x86()
(interactive)
(msbuild-2017-x86-setup)
(let ((compile-command (format "cl.exe "%s""
(file-name-nondirectory (buffer-file-name))))
(compilation-ask-about-save nil))
(call-interactively #'compile )))

(defun compile-msvc-x64 ()
(interactive)
(msbuild-2017-x64-setup)
(let ((compile-command (format "cl.exe "%s""
(file-name-nondirectory (buffer-file-name))))
(compilation-ask-about-save nil))
(call-interactively #'compile )))
#+END_EXAMPLE

The screenshot below shows an example about how those commands can be
下面的屏幕截图显示了一个关于这些命令的示例
used:
使用:

[[file:images/emacs-msvc-windows.png][[[file:images/emacs-msvc-windows.png]]]]
[[file: images / emacs-msvc-windows.png [file: images / emacs-msvc-windows.png]] [[]]]

Test file: [[file:codes/test.cpp][]][[file:codes/test.cpp]]
测试文件:[[文件:代码/ test.cpp][]][[文件:代码/ test.cpp]]

#+BEGIN_EXAMPLE
#include <iostream>

using namespace std;

int main(){

for(int i = 1 ; i < 10; i ++)
cout << "Testing C++ on Emacs in Windows VM" << endl;

return 0;
}
#+END_EXAMPLE

*** 1.7.2 Commands for MSVC2015
*** 1.7.2 MSVC2015的命令
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-7-2
:CUSTOM_ID sec-1-7-2
:END:
结束:

M-x msbuild-2015-x86-setup and Set environment variables to allow
M-x msbuild-2015-x86-setup并设置允许的环境变量
calling cl.exe for x86 build target and other tools from M-x
从M-x调用用于x86构建目标和其他工具的cl.exe
compile and shell commands.
编译和shell命令。

#+BEGIN_EXAMPLE
(defun msbuild-2015-x86-setup ()
(interactive)
"Set enviorment variables to load Microsoft Visual C++ Compiler 2015 (MSVC) 32 bits"
(setenv "PATH" msbuild-old-path-var)
(setenv "INCLUDE"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/INCLUDE"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/ucrt"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/include/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/shared"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/winrt"
))
(setenv "LIB"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/LIB"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/ucrt/x86"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/lib/um/x86"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/um/x86"
))
(setenv "LIBPATH"
(concat
";" "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/LIB"
";" "C:/WINDOWS/Microsoft.NET/Framework/v4.0.30319"
";" "C:/WINDOWS/Microsoft.NET/Framework/"
";" "C:/Program Files (x86)/Windows Kits/10/UnionMetadata"
";" "C:/Program Files (x86)/Windows Kits/10/References"
";" "C:/Program Files (x86)/Windows Kits/10/References/Windows.Foundation.UniversalApiContract/1.0.0.0"
";" "C:/Program Files (x86)/Windows Kits/10/References/Windows.Foundation.FoundationContract/1.0.0.0"
))
(setenv "PATH"
(concat
(getenv "PATH")
";" "C:/Program Files (x86)/MSBuild/14.0/bin"
";" "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/BIN"
";" "C:/WINDOWS/Microsoft.NET/Framework/v4.0.30319"
";" "C:/WINDOWS/Microsoft.NET/Framework/"
";" "C:/Program Files (x86)/Windows Kits/10/bin/x86"
";" "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/"
)))
#+END_EXAMPLE

M-x msbuild-215-x64-setup - Similar to previous command.
M-x msbuild-215-x64-setup—类似于前面的命令。

#+BEGIN_EXAMPLE
(defun msbuild-2015-x64-setup ()
(interactive)
"Set enviorment variables to load Microsoft Visual C++ Compiler 2015 (MSVC) 64 bits"
(setenv "PATH" msbuild-old-path-var)
(setenv "INCLUDE"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/INCLUDE"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/ucrt"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/include/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/shared"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/um"
";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/winrt"
))
(setenv "LIB"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/LIB/amd64"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/ucrt/x64"
";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/lib/um/x64"
";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/um/x64"
))
(setenv "LIBPATH"
(concat
"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/LIB/amd64"
";" "C:/WINDOWS/Microsoft.NET/Framework64/v4.0.30319"
";" "C:/WINDOWS/Microsoft.NET/Framework64/"
";" "C:/Program Files (x86)/Windows Kits/10/UnionMetadata"
";" "C:/Program Files (x86)/Windows Kits/10/References"
";" "C:/Program Files (x86)/Windows Kits/10/References/Windows.Foundation.UniversalApiContract/1.0.0.0"
";" "C:/Program Files (x86)/Windows Kits/10/References/Windows.Foundation.FoundationContract/1.0.0.0"
))
(setenv "PATH"
(concat
(getenv "PATH")
";" "C:/Program Files (x86)/MSBuild/14.0/bin/amd64"
";" "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/BIN/amd64"
";" "C:/WINDOWS/Microsoft.NET/Framework64/v4.0.30319"
";" "C:/WINDOWS/Microsoft.NET/Framework64/"
";" "C:/Program Files (x86)/Windows Kits/10/bin/x64"
";" "C:/Program Files (x86)/Windows Kits/10/bin/x86"
";" "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/x64/"
)))
#+END_EXAMPLE

Commands to compile file related to current c++ buffer.
编译与当前c++缓冲区相关的文件的命令。

#+BEGIN_EXAMPLE
(defun compile-msvc-2015-x86()
(interactive)
(msbuild-2015-x86-setup)
(let ((compile-command (format "cl.exe "%s""
(file-name-nondirectory (buffer-file-name))))
(compilation-ask-about-save nil))
(call-interactively #'compile )))

(defun compile-msvc-2015-x64 ()
(interactive)
(msbuild-2015-x64-setup)
(let ((compile-command (format "cl.exe "%s""
(file-name-nondirectory (buffer-file-name))))
(compilation-ask-about-save nil))
(call-interactively #'compile )))
#+END_EXAMPLE

*** 1.7.3 Install C++ Compilers and MSVC Building Tools
*** 1.7.3安装c++编译器和MSVC构建工具
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-7-3
:CUSTOM_ID sec-1-7-3
:END:
结束:

The esiest and fastest way to install MSVC building tools is by using
安装MSVC构建工具最经济、最快捷的方法是使用
the [[https://chocolatey.org/][chocolately]] package manager which provides a Linux-like experience
[[https://chocolatey.org/][chocolately]]包管理器，提供类似linux的体验
for installing packages.
安装包。

Install [[https://chocolatey.org/packages/VisualCppBuildTools][Visual C++ Build Tools 2015 14.0.25420.1]]
安装[[https://chocolatey.org/packages/VisualCppBuildTools][Visual c++ BuildTools 2015 14.0.25420.1]]

#+BEGIN_EXAMPLE
$ choco install visualcppbuildtools
#+END_EXAMPLE

Install [[https://chocolatey.org/packages/visualstudio2017buildtools][Visual Studio 2017 Build Tools 15.2.26430.20170650]]
安装[[https://chocolatey.org/packages/visualstudio2017buildtools][Visual Studio 2017 Build Tools 15.2.26430.20170650]]

#+BEGIN_EXAMPLE
$ choco installvisualstudio2017buildtools
#+END_EXAMPLE

Install [[https://chocolatey.org/packages/mingw][Mingw]] - gcc/g++ GNU C/C++ Compiler ported for Windows
安装[[https://chocolatey.org/packages/mingw][Mingw]] - gcc/g++ GNU C/ c++编译器移植到Windows

#+BEGIN_EXAMPLE
$ choco install mingw
#+END_EXAMPLE

*** <<ID-20becc36-1726-4965-a9ec-0977c5b7b11d>>1.7.4 Build automation tools and batch files
*** <ID-20becc36-1726-4965-a9ec-0977c5b7b11d>>1.7.4构建自动化工具和批处理文件
:PROPERTIES:
属性:
:CUSTOM_ID: sec-1-7-4
:CUSTOM_ID sec-1-7-4
:END:
结束:

Batch files (*.bat extensions) can be used as *nix Makefiles to
批处理文件(*.bat扩展名)可以用作*nix makefile
perform build-automation on Windows, compile C++, C, and C# programs
在Windows上执行构建自动化，编译c++、C和c#程序
and also perform a wide variety of tasks.
还可以执行各种各样的任务。

Example: This file build.bat compiles and run the file test1.cpp with
bat编译并运行文件test1.cpp
Visual C++ compiler. To build the C++ file [[file:codes/test.cpp][]][[file:codes/test.cpp]], it
Visual c++编译器。编译c++文件[[file:codes/test.cpp][]][[file:codes/test]。cpp]],它
just to put this file to the directory to the directory where is
把这个文件放到这个目录下
test.cpp and then type in Emacs M-x build or M-x build.bat.
然后输入Emacs M-x build或M-x build.bat。

The build script can also be executed using the Windows shell cmd.exe,
构建脚本也可以使用Windows shell cmd.exe来执行，
by entering $ cd <project> and then typing build or build.bat. It can
输入$ cd <project>，然后输入build或build.bat。它可以
also be run by double clicking at the file build.bat.
也可以通过双击文件build.bat运行。

File: [[file:codes/build.bat][]][[file:codes/build.bat]]
文件:[[文件:代码/ build.bat][]][[文件:代码/ build.bat]]

#+BEGIN_EXAMPLE
@echo off
rem Compile for x86 or x64 bits
rem ------------------------------
set MODE=x86
rem set MODE=x64
@REM Visual studio building tools path - Install it with chocolately
set VS2017="C:Program Files (x86)Microsoft Visual Studio2017CommunityVCAuxiliaryBuildvcvarsamd64_x86.bat"
set VS2015="C:Program Files (x86)Microsoft Visual C++ Build Toolsvcbuildtools.bat"
rem Save current directory
pushd %CD%
@REM Set visual Studio 2017
call %VS2017% %MODE%
@REM Restore saved directory
popd
@REM ------------------ User Command Goes Here ----------------- @REM
@REM Build solution in Debug mode
cl.exe test.cpp && test.exe
@REM Set /p Wait=Build Process Completed...
#+END_EXAMPLE

This build script can be adapted to use other Windows building tools,
这个构建脚本可以修改为使用其他Windows构建工具，
for instance, the line where is cl.exe could be replaced with:
例如，cl.exe所在的行可以替换为:

- $ msbuild WpfAppLearning.sln /p:Configuration=Release /p:Platform="Any CPU"
- $ msbuild WpfAppLearning。sln /p:Configuration=Release /p:Platform="Any CPU"

- To build a Visual studio solution (aka project).
-建立一个Visual studio解决方案(又名项目)。

- $ Devenv WpfAppLearning.sln /Rebuild Debug
- $ Devenv WpfAppLearningsln /重建调试

- Rebuild applicatio with Visual Studio Command line switch.
-重建应用程序与Visual Studio命令行开关。

- $ fsc.exe app1.fsx <flags>
- $ fsc.exe app1。旗帜fsx < >

- Compile a F# application
-编译一个f#应用程序

- $ csc.exe app1.cs
- $ csc.exe app1.cs

- Compile a C# application
编译一个c#应用程序

- $ scalac app1.scala -d app1.jar && scala app1.jar
- $ scalac app1。scala -d app1.jar & scala app1.jar

- Compile a Scala application and run it.
编译一个Scala应用程序并运行它。

It is also worth knowing some DOS / Windows command line tools for
了解一些DOS / Windows命令行工具也是值得的
compiling applications on Windows.
在Windows上编译应用程序。

| Description                                               | Unix, Linux, MacOSX and BSD   | Windows, MSDOS and OS/2           |
|描述| Unix, Linux, MacOSX和BSD | Windows, MSDOS和OS/2 |
|-----------------------------------------------------------+-------------------------------+-----------------------------------|
| Show Command Help                                         | bash --help                   | set /?, cl.exe /? ..              |
|显示命令帮助| bash—帮助|设置/?cl.exe / ?. .|
|                                                           |                               |                                   |
| Show current User                                         | whoami                        | whoami                            |
显示当前用户| whoami | whoami |
| Show path of application or executable                    | which bash                    | where notepad.exe                 |
|显示应用程序或可执行|的路径，其中bash |中有notepad.exe |
| Clear terminal                                            | clear                         | cls                               |
|清除终端|清除| cls |
|                                                           |                               |                                   |
| Go to directory, aka path                                 | cd <path>;                    | cd <path>                         |
|转到目录，即路径| cd <路径>;| cd <路径> |
| Go to Disk or Mount Point                                 | $ cd /mnt/mount-point         | $ C:, $ D:, $ E: ..               |
转到磁盘或挂载点| $ cd /mnt/挂载点| $ C:， $ D:， $ E:…|
| Change to a different directory                           | cd                            | cd                                |
|切换到另一个目录| cd | cd |
|                                                           |                               |                                   |
| List directory                                            | ls <dir>                      | dir <dir>                         |
| List directory | ls dir | dir > < dir | >
| List file directory in chronological order with detail    | ls -ltr                       | dir /od                           |
列出文件目录，按时间顺序详细列出| ls -ltr | dir /od |
| Make a new directory                                      | mkdir                         | mkdir or md                       |
创建一个新目录| mkdir | mkdir或md |
| Delete a directory                                        | rmdir                         | rmdir or rd                       |
删除一个目录| rmdir | rmdir或rd |
|                                                           |                               |                                   |
| Display contents of a text file                           | cat <file>                    | type <file>                       |
显示文本文件| cat <文件> |类型<文件> |的内容
| Copy a file, preserving its date-time stamp               | cp -p                         | copy <file> <dest>                |
|复制一个文件，保留它的日期时间戳| cp -p |复制<文件> <dest> |
| Delete a file                                             | rm <file>                     | erase <file> OR del <file>        |
删除文件| rm <文件> |擦除<文件>或del <文件> |
| Move a file                                               | mv <file> <new-name>          | move                              |
|移动文件| mv <文件> <新名称> |移动|
| Rename a file                                             | mv                            | ren                               |
将一个文件重命名为| mv | ren |
| Find a file                                               | find                          | dir /s                            |
找到一个文件|找到|目录/s |
| Grep a file                                               | grep                          | findstr                           |
| Grep一个文件| Grep | findstr |
| Display differences between two text files                | diff                          | fc                                |
|显示两个文本文件之间的差异| diff | fc |
| Change file attributes                                    | chmod                         | attrib                            |
改变文件属性| chmod | attrib |
| “Super-user” root authorization                           | sudo                          | N/A                               |
|“超级用户”根授权| sudo | N/A |
| Create symbolic link to a file or directory               | ln                            | N/A                               |
创建指向文件或目录| ln | N/ a |的符号链接
|                                                           |                               |                                   |
| Show environment variables                                | env                           | set                               |
显示环境变量|环境|设置|
| Set environment variable                                  | export PATH=$PATH:/dir/bin    | set PATH=%PATH%;E:/dir/bin        |
|设置环境变量|导出路径=$PATH:/dir/bin |设置路径=%PATH%;E:/dir/bin |
| Set environment variable permanently                      | N/A                           | setx <VARIABLE>=<VALUE>           |
|永久设置环境变量| N/A | setx <变量>=<值> |
| Redirect command output to file                           |                               | set                               |
将命令输出重定向到文件| |集合|
|                                                           |                               |                                   |
| Open file dor directory with default system application   | xdg-open file1.ppt            | start file1.ppt                   |
|打开默认系统应用程序| xdg-open文件1.ppt |开始文件1.ppt |
|                                                           |                               |                                   |
| Shrink executable file size                               | strip                         | strip (included w/ Free Pascal)   |
缩小可执行文件大小|带|带(含w/ Free Pascal) |
|                                                           |                               |                                   |

- Note:
——注意:

- xdg-open only exists on Linux or BSD with X11
- xdg-open只存在于Linux或带有X11的BSD上
- On MacOSX the equivalent is open
-在MacOSX上等价的是打开的

Created: 2018-07-26 Thu 07:42
创建时间:2018-07-26星期四07:42

[[http://www.gnu.org/software/emacs/][Emacs]] 25.3.1 ([[http://orgmode.org][Org]] mode 8.2.10)
[[http://www.gnu.org/software/emacs/] [Emacs]] 25.3.1 ([[http://orgmode.org][机构]]模式8.2.10)

[[http://validator.w3.org/check?uri=referer][Validate]]
[[http://validator.w3.org/check?uri=referer][确认]]
