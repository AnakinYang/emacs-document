#+TITLE: Capturing Content for Emacs
#+URL: http://www.howardism.org/Technical/Emacs/capturing-content.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 06日 星期五 14:20:42 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Let's suppose you are current investigating a new code base, system or other
假设您正在研究一个新的代码库、系统或其他
problem, and you are following [[file:literate-devops.html][my advice]] and copying code, storing output, and
问题，您正在执行[[file: literal -devops。[我的建议]]和复制代码，存储输出，和
taking notes along the way. All of this gets stored into your engineering
沿途做笔记。所有这些都会存储到您的工程中
notebook, aka /primary org mode/ file (for me, this is often my current Sprint page).
记事本，又名/主要组织模式/文件(对我来说，这通常是我当前的Sprint页面)。

Sure, selecting code, switching buffers or windows, pasting the code (maybe even
当然，选择代码，切换缓冲区或窗口，粘贴代码(甚至可能
jotting down some notes), and then popping back to your original file, may not
记下一些笔记)，然后回到你原来的文件中，可能不会
be many keystrokes, but it exacts a bit of mental tax that mounts.
虽然敲了很多键，但却增加了一点精神负担。

The typical solution to this problem is to use the [[https://orgmode.org/manual/Capture.html][org-capture feature]] (If you
这个问题的典型解决方案是使用[[https://orgmode.org/manual/Capture.html][org-capture特性]](如果您
are not familiar with this Org feature, check out my [[file:capturing-intro.html][gentle introduction]] or see
如果不熟悉这个组织特性，请查看我的[[file:capturing-intro。[温和的介绍]]或者看看
[[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/#unnumbered-3][Step 3]] of Sacha Chua's essay, /Learn how to take notes more efficiently in Org
[[http://sachachua.com/blog/2015/02/lear-take -高效- org-mode/#unnumber-3][步骤3]]蔡美儿的文章，/学习如何在组织中更有效地记笔记
Mode/). While =org-capture= makes copying content into your org file easy, I am
模式/)。虽然=org-capture=使复制内容到你的组织文件很容易，我是
trying to improve on it, and here some of my experiments.
试着改进它，这是我的一些实验。

* The “Current” Task
*“当前”任务
:PROPERTIES:
属性:
:CUSTOM_ID: org83a14c0
:CUSTOM_ID org83a14c0
:END:
结束:

One mentally taxing aspect of =org-capture= is determining where something
获取信息的一个耗费脑力的方面是确定某物的位置
should go. Do you have a dozen =(file)= reference destinations? I have found the
应该去。你有一打=(文件)=参考目的地吗?我找到了
=(clock)= reference ideal for altering a /default destination/. Specifically, I
=(时钟)=修改/默认目的地/的理想参考。具体地说,我
begin work on /a task/, and designate it the /focus of my attention/ (i.e. the
开始做一项工作，并指定它为我的注意力的焦点
/destination/ of my work), by /clocking in/, using =org-clock-in= (=C-c C-x C-i= or =,  I= in Spacemacs).
，通过使用= orgo -clock-in= (=C-c C-x C-i= or =， I= in Spacemacs)

Now, we can add the following to the org-capture list:
现在，我们可以将以下内容添加到组织捕获列表中:

#+BEGIN_EXAMPLE
(add-to-list 'org-capture-templates
`("c" "Item to Current Clocked Task" item
(clock)
"%i%?" :empty-lines 1))
#+END_EXAMPLE

This capture destination allows me to easily specify /any header/ as a special
这个捕获目的地允许我轻松地指定/任何头/作为一个特殊的
destination with a simple clock in. However, we do have the mental
目的地只有一个简单的时钟。然而，我们有心理
interruption associated with creating a new buffer. Let's minimize that by
与创建新缓冲区相关的中断。我们把它最小化
allowing us to put something on the kill ring, and send it to that clocked-in
让我们在杀人戒指上放点东西，然后把它送到那个上锁的地方
task:
任务:

#+BEGIN_EXAMPLE
(add-to-list 'org-capture-templates
`("K" "Kill-ring to Current Clocked Task" plain
(clock)
"%c" :immediate-finish t :empty-lines 1))
#+END_EXAMPLE

The /trick/ here is the use of =:immediate-finish=, where it doesn't even bother
这里的/技巧/是使用=:immediate-finish=，它甚至不需要这样做
with a buffer, but just injects the =kill-ring= contents to the clocked in task
但只是将=kill-ring= contents注入到已锁定的任务中
without even a sneeze. Don't want the hassle of sending something to the
连喷嚏都不打。我不想麻烦地把东西寄到
=kill-ring=? With this one, you only have to select the text, then kick off
=剪切环= ?有了这个，你只需要选择文本，然后开始
the capture:
截图:

#+BEGIN_EXAMPLE
(add-to-list 'org-capture-templates
`("C" "Contents to Current Clocked Task" plain
(clock)
"%i" :immediate-finish t :empty-lines 1))
#+END_EXAMPLE

In fact, create the following function and keybinding, and you can select
实际上，创建以下函数和键绑定，您可以选择
text, and immediately copy it to your clocked in task without bothering with
文本，并立即复制到您的锁定任务，而不必费心
the org-capture menu:
org-capture菜单:

#+BEGIN_EXAMPLE
(defun region-to-clocked-task (start end)
"Copies the selected text to the currently clocked in org-mode task."
(interactive "r")
(org-capture-string (buffer-substring-no-properties start end) "C"))

(global-set-key (kbd "C-<F17>") 'region-to-clocked-task)
#+END_EXAMPLE

This is great for /general textual content/, but much of what I want to copy is
这对于一般的文本内容非常有用，但是我想复制的大部分内容都是这样的
code, which could bring along a bit of /meta data/.
代码，它可以带来一些/元数据/。

* Code References
*代码引用
:PROPERTIES:
属性:
:CUSTOM_ID: org4090a78
:CUSTOM_ID org4090a78
:END:
结束:

Much of my ideas got started after reading [[http://ul.io/nb/2018/04/30/better-code-snippets-with-org-capture/][this blog entry]] where the idea is
我的很多想法都是从阅读[[http://ul]开始的。io/nb/2018/04/30/better-code-snippets-with-org-capture/][这篇博客文章
to have a function gather meta data associated with the currently selected
要获得一个函数，请收集与当前所选内容相关的元数据
text, and help to leave a back trace to the original code file.
文本，并帮助跟踪原始代码文件。

I wanted to copy both /code/ and regular text, so I made
我想复制/代码/和常规文本，所以我这样做了
=ha/org-capture-clip-snippet= for wrapping the region in an =EXAMPLE=:
=ha/org-capture-clip-snippet=用于在=EXAMPLE=中包装区域:

#+BEGIN_EXAMPLE
(defun ha/org-capture-clip-snippet (f)
"Given a file, F, this captures the currently selected text
within an Org EXAMPLE block and a backlink to the file."
(with-current-buffer (find-buffer-visiting f)
(ha/org-capture-fileref-snippet f "EXAMPLE" "" nil)))
#+END_EXAMPLE

And =ha/org-capture-code-snippet= for getting function name and the code type:
=ha/org-capture-code-snippet=获取函数名和代码类型:

#+BEGIN_EXAMPLE
(defun ha/org-capture-code-snippet (f)
"Given a file, F, this captures the currently selected text
within an Org SRC block with a language based on the current mode
and a backlink to the function and the file."
(with-current-buffer (find-buffer-visiting f)
(let ((org-src-mode (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))
(func-name (which-function)))
(ha/org-capture-fileref-snippet f "SRC" org-src-mode func-name))))
#+END_EXAMPLE

Both of these function do not do much, but given some values to Nick's
这两个函数的作用都不大，但是给了Nick一些值
original function (which I've modified the =format= to fit my personal style):
原始函数(我修改了=format=以适应我的个人风格):

#+BEGIN_EXAMPLE
(defun ha/org-capture-fileref-snippet (f type headers func-name)
(let* ((code-snippet
(buffer-substring-no-properties (mark) (- (point) 1)))
(file-name (buffer-file-name))
(file-base (file-name-nondirectory file-name))
(line-number (line-number-at-pos (region-beginning)))
(initial-txt (if (null func-name)
(format "From [[file:%s::%s][%s]]:"
file-name line-number file-base)
(format "From ~%s~ (in [[file:%s::%s][%s]]):"
func-name file-name line-number
file-base))))
(format "
%s

#+BEGIN_%s %s
%s
#+END_%s" initial-txt type headers code-snippet type)))
#+END_EXAMPLE

However, content I want to store in an org-mode comes from more than just
然而，我想在组织模式中存储的内容不仅仅来自于
Emacs buffers.
Emacs缓冲区。

* Output from Terminal Commands
*终端命令的输出
:PROPERTIES:
属性:
:CUSTOM_ID: orgfe6508d
:CUSTOM_ID orgfe6508d
:END:
结束:

What if the end result of a command sequence on the Terminal was a pipe to a
如果终端上的命令序列的最终结果是指向a的管道，该怎么办
program that could use =cat= to gather textual data from standard input, and
可以使用=cat=从标准输入中收集文本数据的程序
then use =emacsclient= call =org-capture= to store it?
然后使用=emacsclient= call =org-capture=来存储它?

Yeah, and interesting idea when sent to the current clocked in task:
是的，有趣的想法，当发送到当前锁定的任务:

#+BEGIN_SRC shell
# + BEGIN_SRC壳
#!/bin/bash
# ! / bin / bash

TITLE="$*"
TITLE =“$ *”
CONTENT="
内容= "
,#+BEGIN_EXAMPLE
# + BEGIN_EXAMPLE
$(cat | sed 's/^/ /g')
$(cat | sed 's/^/ /g')
,#+END_EXAMPLE
# + END_EXAMPLE
"

if [[ -n $TITLE ]]
如果[[-n $TITLE]]
then
然后
CONTENT=" - ${TITLE}n${CONTENT}"
标题内容=“- $ {}n ${内容}"
fi
fi

/usr/local/bin/emacsclient -c -n    -e "(progn (org-capture-string "$CONTENT" "C") (delete-frame))"
/usr/local/bin/emacsclient -c -n -e "(progn (org-capture-string "$CONTENT" "C") (delete-frame))
#+END_SRC
# + END_SRC

Here I'm using our latest =C= capture template to that just takes textual
这里我使用最新的=C= capture模板来获取文本
context and stores is. Let's try it in action by typing the following in a
上下文和存储是。让我们通过在a中输入以下内容来实际尝试一下
shell:
外壳:

#+BEGIN_SRC shell
# + BEGIN_SRC壳
date | ec
日期|电子商务
#+END_SRC
# + END_SRC

Works like a charm:
工作像一个符咒:

#+BEGIN_SRC org
# + BEGIN_SRC组织
,#+BEGIN_EXAMPLE
# + BEGIN_EXAMPLE
Thu Jun 7 22:45:23 PDT 2018
2018年6月7日星期四22:45:23
,#+END_EXAMPLE
# + END_EXAMPLE
#+END_SRC
# + END_SRC

* Content from Browsers
*浏览器内容
:PROPERTIES:
属性:
:CUSTOM_ID: org053f8eb
:CUSTOM_ID org053f8eb
:END:
结束:

Like many software people, I have a love-hate relationship with browsers.
像许多软件人员一样，我对浏览器又爱又恨。
I often find myself copying/pasting information from a web site into my
我经常发现自己把网站上的信息复制/粘贴到我的
engineering notebook. Pasting text data into an org-mode file looses all text
工程的笔记本。将文本数据粘贴到组织模式文件中会丢失所有文本
formatting as well as hyperlink references. But operating system clipboards
格式化以及超链接引用。而是操作系统剪贴板
can store some of this formatting data, so we just need to tap into it.
可以存储一些格式化数据，所以我们只需要利用它。

I'm currently using a Mac, so the following is very Mac-centric, but perhaps
我现在用的是苹果机，所以下面的内容可能是以苹果机为中心的
the ideas can lend you to build a Linux or Windows version (if so, let me know).
这些想法可以帮助您构建一个Linux或Windows版本(如果是这样，请告诉我)。

I'm going to use Alfred to start this Workflow, as it will allow me to
我将使用阿尔弗雷德开始这个工作流程，因为它将允许我
trigger these scripts in succession as shown in this diagram:
依次触发这些脚本，如下图所示:

[[file:capturing-content-01.png]]
[[文件:捕获-内容- 01. - png]]

The trigger (in this case, every meta-key on a laptop), will start the first
触发器(在本例中是膝上型电脑上的每个元键)将启动第一个
script that basically issues the =Command-C= to copy the selected text to the
脚本，它基本上发出=Command-C=命令，将选中的文本复制到
clipboard:
剪贴板:

#+BEGIN_EXAMPLE
tell application "System Events" to keystroke "c" using command down
#+END_EXAMPLE

Yes, this works with any application, including browsers.
是的，这适用于任何应用程序，包括浏览器。

The next script basically takes the contents of the clipboard (as HTML),
下一个脚本基本上采用剪贴板的内容(HTML格式)，
render that to an org-compatible format with [[https://pandoc.org/][pandoc]] (which you'll need to
将其呈现为与[[https://pandoc.org/][pandoc]]兼容的格式(您需要这样做)
install), and then use =emacsclient= to call my org-capture routine with the
，然后使用=emacsclient=调用我的组织捕获例程
“C” selection, so that the contents go directly to my clocked in task:
选择“C”，让内容直接进入我的打卡任务:

#+BEGIN_SRC shell
# + BEGIN_SRC壳
query=$(osascript -e 'the clipboard as "HTML"' |      perl -ne 'print chr foreach unpack("C*",pack("H*",substr($_,11,-3)))' |      /usr/local/bin/pandoc -f html -t org |      sed 's/"//g' | sed 's/^/ /' )
查询=$(osascript -e 'the clipboard as "HTML"' | perl -ne 'print chr foreach unpack("C*"，pack("H*"，substr($_，11，-3)) ' | /usr/local/bin/pandoc -f HTML -t org | sed 's/"//g' | sed 's/^/ /')

/usr/local/bin/emacsclient -c -n      -e "(progn (org-capture-string "${query}" "C") (delete-frame))"
/usr/local/bin/emacsclient -c -n -e "(progn (org-capture-string "${query}" "C") (delete-frame))
#+END_SRC
# + END_SRC

The script is a modified version from [[https://gist.github.com/rolandcrosby/c26571bf4e263f695d2f][Roland Crosby]]. How well does it work?
该脚本是[[https://gist.github.com/rolandcrosby/c26571bf4e263f695d2f][Roland Crosby]]的修改版本。它的效果如何?
I just selected some of the homepage at [[https://orgmode.org/][orgmode.org]], and clocked this header
我只是选择了一些主页在[[https://orgmode.org/][orgmode.org]]，并记录了这个标题
as my /current task/, and ended up with this getting pasted:
作为我/当前的任务/，并以这个被粘贴:

#+BEGIN_SRC org
# + BEGIN_SRC组织
The stable version of Org is *9.1.13*, as of May 2018. See the
Org的稳定版本是*9.1.13*，截至2018年5月。看到
[[https://orgmode.org/Changes.html][release notes]].
[[https://orgmode.org/Changes.html][发行说明]]。

Get it with =M-x package-install RET org RET= (see
获取它=M-x包-安装RET org RET=(参见
[[https://orgmode.org/elpa.html][Org ELPA]]).
[[https://orgmode.org/elpa.html] [Org ELPA]])。

Or download it as a [[https://orgmode.org/org-9.1.13.tar.gz][tar.gz]] or
或下载为[[https://orgmode.org/org-9.1.13.tar.gz][tar.gz]]或
[[https://orgmode.org/org-9.1.13.zip][zip]] archives.
[[https://orgmode.org/org-9.1.13.zip] [zip]]档案。
#+END_SRC
# + END_SRC

In other words, it renders quite well...which is especially good, since this
换句话说，它渲染得相当好……哪个特别好，因为这个
pasting business happens completely in the background while I am still surfin'
粘贴业务完全在后台进行，而我还在浏览。
the web.
网络。

* Summary
*总结
:PROPERTIES:
属性:
:CUSTOM_ID: org755594b
:CUSTOM_ID org755594b
:END:
结束:

My workflow proposal amounts to gathering data from a web browser, shell
我的工作流程建议相当于从web浏览器shell收集数据
commands, and source code, and be able to fling it into my engineering
命令和源代码，并能够把它扔到我的工程
notebook without switching out of that application.
笔记本电脑没有切换出那个应用程序。

Later, I will return to my notebook in Emacs and clean up and summarize my
之后，我会回到Emacs中的我的笔记本，整理和总结我的
capturing. Once clean, the issues or knowledge I wish to share can then be
捕获。一旦清理干净，我想要分享的问题或知识就可以实现了
easily exported from org.
很容易从org导出。

The side-benefit, is that I automatically remind myself to clock in to my task.
这样做的好处是，我能自动提醒自己按时完成任务。
