#+TITLE: Why a minimal browser, when there is a full-featured one? Introducing`XWidget Webkit`: A state-of-the-art browser for your modern Emacs &#8211; Emacs Notes search previous next tag category expand menu location phone mail time cart zoom edit close
#+URL: https://emacsnotes.wordpress.com/2018/08/18/why-a-minimal-browser-when-there-is-a-full-featured-one-introducingxwidget-webkit-a-state-of-the-art-browser-for-your-modern-emacs/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 09月 06日 星期四 11:38:22 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


In an earlier post, you learnt about the =Eww: The Emacs Web Wowser=^{[[https://emacsnotes.wordpress.com/2018/05/19/the-emacs-web-wowser-browsing-and-searching-the-web-with-emacs/][1]]}.  That browser is a very minimal one. It extracts texts and images from webpages, and renders it.  It doesn't do much more. Notably, it doesn't support Javascript or other modern features that makes web pages very rich.
在之前的一篇文章中，您了解了=Eww: Emacs Web Wowser=^{[[https://emacsnotes.wordpress.com/2018/05/19/emacs - Web - wowser-browsingand -search -the- Web with-emacs/][1]]}。它从网页中提取文本和图像，并渲染它。它做的不多。值得注意的是，它不支持Javascript或其他使web页面非常丰富的现代特性。

If you are one of those users, who is convinced that /what is labeled as/ /minimal/ is /in actual fact crippled/, and prefer to stay miles away from /minimal stuff,/  you need not shy away from browsing within Emacs. There is an alternative browser just for you.  It is called =Xwidget Webkit=.  The browser is a modern one, and it is as feature-rich as any other browser you have used or heard of.  In this article, I give you a quick introduction to using this browser.
如果您是这些用户中的一员，确信/被标记为/ /最少/ /实际上是/残废/，并且更喜欢远离/最少的东西，/您不需要回避在Emacs中浏览。有一个专门为您准备的替代浏览器。它被称为=Xwidget Webkit=。该浏览器是一个现代的浏览器，它的功能与您使用过或听说过的任何其他浏览器一样丰富。在本文中，我将简要介绍如何使用这个浏览器。

Specifically, you will learn how to fill forms and edit textareas in HTML pages.  Yes, you heard that right.  The workflow for these steps are different and  you need to change your old habits, to make full use of the =XWidget Webkit= ^{[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Embedded-WebKit-Widgets.html][1]]} Browser.  The browser made it's appearance in Emacs 25^{[[https://github.com/emacs-mirror/emacs/blob/877cd22f553624b6d7f24141acd134f9cf839259/etc/NEWS.25#L169][1]]}.  So, if you are using a older Emacs, you definitely need to upgrade your Emacs.
具体来说，您将学习如何填写表单和编辑HTML页面中的文本区域。是的，你没听错。这些步骤的工作流程是不同的，您需要改变您的旧习惯，以充分利用=XWidget Webkit= ^{[https://www.gnu.org/software/emacs/manual/html_node/emacs/embedwebkit - widgets.html][1]]}浏览器。该浏览器出现在Emacs 25^{[[https://github.com/emacs-mirror/emacs/blob/877cd22f553624b6d7f24141acd134f9cf839259/etc/news.25#l169][1]]}中，因此，如果您正在使用旧的Emacs，您肯定需要升级您的Emacs。

Before I delve in to the details, here are a couple of videos that demonstrates the power of =Xwidget Webkit= browser. The first video demonsrates how you edit forms on web and the second video demonstrates how you edit textareas on web.
在深入讨论细节之前，这里有两个视频演示了=Xwidget Webkit= browser的强大功能。第一个视频演示了如何在web上编辑表单，第二个视频演示了如何在web上编辑文本区域。

* Fill forms with =XWidget Webkit= Browser
*使用=XWidget Webkit= Browser填写表单

<https://youtu.be/He83coKoq7o>
< https://youtu.be/He83coKoq7o >

* Edit Textareas with XWidget Webkit Browser
*使用XWidget Webkit浏览器编辑文本区域

<https://youtu.be/67Vs8y5VUK0>
< https://youtu.be/67Vs8y5VUK0 >

* Step 1: Ensure that your Emacs supports XWIDGETS
*步骤1:确保Emacs支持XWIDGETS

How do you check if your Emacs supports =XWIDGETS=?  You check your Emacs' features by pretending as if you are reporting a bug.  Yes, you heard it right!  You pretend as if you are  reporting a bug, and stop short of reporting it.
如何检查Emacs是否支持=XWIDGETS=?通过假装您正在报告一个bug来检查Emacs的特性。是的，你没听错!您假装正在报告一个bug，并停止报告它。

** Step 1.1: Pretend that you are a filing bug report
**步骤1.1:假装您正在提交bug报告

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-11-27-20.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 11 - 27 - 20. - png?w=740]]

When prompted for a subject, just press =Enter=.
当提示输入主题时，只需按=Enter=。

** Step 1.2: Pay attention to what Emacs shows you about itself
**步骤1.2:注意Emacs向您展示了它的哪些方面

Ensure that you see =XWIDGETS= in there.
确保您在其中看到=XWIDGETS=。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-11-29-27.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 11 - 29 - 27. - png?w=740]]

* Step 2:  If your Emacs has no =XWIDGETS= support, find a Emacs that supports one, or build one yourself
*步骤2:如果您的Emacs没有=XWIDGETS=支持，那么您可以找到一个支持的Emacs，或者自己构建一个

Details of how to build a custom =Emacs= is beyond the scope of this article.  You will learn about it in one of the future posts.
关于如何构建自定义=Emacs=的详细信息超出了本文的范围。您将在以后的帖子中了解它。

For now, either grab a =Emacs= that has =XWIDGETS= support built in.  If you who are willing to build a custom Emacs, let me leave a hint.  If you are on Debian Unstable and building =Emacs 26.1=, you need =libwebkit2gtk-4.0= and =libwebkit2gtk-4.0=^{[[https://packages.debian.org/search?suite=all&searchon=names&keywords=libwebkit2gtk-4.0][1]]}.
现在，获取一个内建了=XWIDGETS=支持的=Emacs=。如果您愿意构建自定义Emacs，让我给您一个提示。如果您的Debian不稳定，并且正在构建=Emacs 26.1=，那么您需要=libwebkit2gtk-4.0=和=libwebkit2gtk-4.0=^{[[https://packages.debian.org/search?suite=all&searchon=names&keywords=libwebkit2gtk-4.0][1]]}}。

* Step 3: Install a custom menu for =Xwidget Webkit=
*步骤3:为=Xwidget Webkit=安装自定义菜单

Now, install a custom menu for =Xwidget Webkit=.
现在，为=Xwidget Webkit=安装一个自定义菜单。

Copy the =Emacs Lisp= snippet^{[[https://raw.githubusercontent.com/emacksnotes/emacsnotes.wordpress.com/master/my-xwidget-menu.el][1]]} below to your =.emacs= and restart your =Emacs=.
将下面的=Emacs Lisp= snippet^{[[https://raw.githubusercontent.com/emacksnotes/emacsnotes.wordpress.com/master/my- xwidgemenu.el][1]]}复制到您的=。并重新启动您的= emacs=。

#+BEGIN_SRC elisp
# + BEGIN_SRC elisp
;; https://raw.githubusercontent.com/emacksnotes/emacsnotes.wordpress.com/master/my-xwidget-menu.el
;;https://raw.githubusercontent.com/emacksnotes/emacsnotes.wordpress.com/master/my-xwidget-menu.el

(require 'xwidget)
(需要的xwidget)

(when
(当
(featurep 'xwidget-internal)
(featurep ' xwidget-internal)
(easy-menu-define my-xwidget-tools-menu nil "Menu for Xwidget Webkit."
(easy-menu-define my-xwidget-tools-menu nil)
`("Xwidget Webkit" :visible
”(“Xwidget Webkit”:可见
(featurep 'xwidget-internal)
(featurep ' xwidget-internal)
["Browse Url ..." xwidget-webkit-browse-url :help "Ask xwidget-webkit to browse URL"]
["Browse Url…" xwidget-webkit- browseurl:help "Ask xwidget-webkit to Browse Url "]
["End Edit Textarea" xwidget-webkit-end-edit-textarea :help "End editing of a webkit text area"]))
["End Edit Textarea" xwidget-webkit-end-edit-textarea:帮助"End editing of a webkit textarea "])
(easy-menu-add-item menu-bar-tools-menu nil my-xwidget-tools-menu 'separator-net)
(easy-menu-add-item menu-bar-tools-menu nil my-xwidget-tools-menu '分离器-net)
(easy-menu-define my-xwidget-menu xwidget-webkit-mode-map "Menu for Xwidget Webkit."
(easy-menu-define my-xwidget-menu Xwidget - Webkit -mode-map“Xwidget Webkit菜单”。)
'("Xwidget Webkit"
”(“Xwidget Webkit”
["Browse Url" xwidget-webkit-browse-url :help "Ask xwidget-webkit to browse URL"]
["Browse Url" xwidget-webkit- browseurl:help "Ask xwidget-webkit to Browse Url"]
["Reload" xwidget-webkit-reload :help "Reload current url"]
["Reload" xwidget-webkit-reload:帮助"Reload当前url"]
["Back" xwidget-webkit-back :help "Go back in history"]
["Back" xwidget-webkit-back:帮助"回到历史"]
"--"
["Insert String" xwidget-webkit-insert-string :help "current webkit widget"]
["Insert String" xwidget-webkit-insert-string:help "current webkit widget"]
["End Edit Textarea" xwidget-webkit-end-edit-textarea :help "End editing of a webkit text area"]
["End Edit Textarea" xwidget-webkit-end-edit-textarea:帮助"End editing of a webkit textarea "]
"--"
["Scroll Forward" xwidget-webkit-scroll-forward :help "Scroll webkit forwards"]
["滚动前进" xwidget-webkit-滚动前进:帮助"滚动webkit前进"]
["Scroll Backward" xwidget-webkit-scroll-backward :help "Scroll webkit backwards"]
[“向后滚动”xwidget-webkit-向后滚动:帮助“向后滚动webkit”]
"--"
["Scroll Up" xwidget-webkit-scroll-up :help "Scroll webkit up"]
[“向上滚动”xwidget-webkit-滚动:帮助“向上滚动webkit”]
["Scroll Down" xwidget-webkit-scroll-down :help "Scroll webkit down"]
["向下滚动" xwidget-webkit-向下滚动:帮助"向下滚动webkit "]
"--"
["Scroll Top" xwidget-webkit-scroll-top :help "Scroll webkit to the very top"]
[“滚动顶部”xwidget-webkit-滚动顶部:帮助“滚动webkit到最顶部”]
["Scroll Bottom" xwidget-webkit-scroll-bottom :help "Scroll webkit to the very bottom"]
["滚动底部" xwidget-webkit-滚动底部:帮助"滚动webkit到最底部"]
"--"
["Zoom In" xwidget-webkit-zoom-in :help "Increase webkit view zoom factor"]
["Zoom In" xwidget-webkit-zoom-in:帮助"Increase webkit view Zoom factor"]
["Zoom Out" xwidget-webkit-zoom-out :help "Decrease webkit view zoom factor"]
["Zoom Out" xwidget-webkit-zoom-out:帮助"Decrease webkit view Zoom factor"]
"--"
["Fit Width" xwidget-webkit-fit-width :help "Adjust width of webkit to window width"]
["Fit Width" xwidget-webkit-fit-width:帮助"将webkit宽度调整为窗口宽度"]
["Adjust Size" xwidget-webkit-adjust-size :help "Manually set webkit size to width W, height H"]
[“调整大小”xwidget-webkit-调整大小:帮助“手动设置webkit大小宽度W，高度H”]
["Adjust Size Dispatch" xwidget-webkit-adjust-size-dispatch :help "Adjust size according to mode"]
[“调整大小调度”xwidget-webkit-调整大小-调度:帮助“根据模式调整大小”]
["Adjust Size To Content" xwidget-webkit-adjust-size-to-content :help "Adjust webkit to content size"]
[“调整大小到内容”xwidget-webkit-调整大小到内容:帮助“调整webkit到内容大小”]
"--"
["Copy Selection As Kill" xwidget-webkit-copy-selection-as-kill :help "Get the webkit selection and put it on the kill-ring"]
["Copy Selection As Kill" xwidget-webkit- Copy -select - As - Kill:help "Get the webkit Selection and put it on the kill-ring"]
["Current Url" xwidget-webkit-current-url :help "Get the webkit url and place it on the kill-ring"]
["Current Url" xwidget-webkit-current-url:帮助"获取webkit Url并将其放置在kill-ring"]
"--"
["Show Element" xwidget-webkit-show-element :help "Make webkit xwidget XW show a named element ELEMENT-SELECTOR"]
["Show Element" xwidget-webkit- Show - Element:帮助"Make webkit xwidget XW Show a named Element Element - selector "]
["Show Id Element" xwidget-webkit-show-id-element :help "Make webkit xwidget XW show an id-element ELEMENT-ID"]
["Show Id Element" xwidget-webkit- Show - Id - Element:帮助"Make webkit xwidget XW Show an Id - Element Element - Id "]
["Show Id Or Named Element" xwidget-webkit-show-id-or-named-element :help "Make webkit xwidget XW show a name or element id ELEMENT-ID"]
["Show Id Or Named Element" xwidget-webkit- Show - Id -name - Element:help "Make webkit xwidget XW Show a name Or Element Id Element - Id "]
["Show Named Element" xwidget-webkit-show-named-element :help "Make webkit xwidget XW show a named element ELEMENT-NAME"]
["Show Named Element" xwidget-webkit- Show -name - Element:help "Make webkit xwidget XW Show a Named Element Element -name "]
"--"
["Cleanup" xwidget-cleanup :help "Delete zombie xwidgets"]
["Cleanup" xwidget-cleanup:帮助"删除僵尸xwidgets"]
["Event Handler" xwidget-event-handler :help "Receive xwidget event"]
["事件处理程序" xwidget- Event - Handler:帮助"接收xwidget事件"]
"--"
["Xwidget Webkit Mode" xwidget-webkit-mode :style toggle :selected xwidget-webkit-mode :help "Xwidget webkit view mode"])))
["Xwidget Webkit模式"Xwidget - Webkit模式:样式切换:选定的Xwidget - Webkit模式:帮助"Xwidget Webkit视图模式"])

#+END_SRC
# + END_SRC

* Step 4: Check  that you have =Xwidget Webkit= in your =Tools= menu
*步骤4:检查您的=Tools=菜单中是否有=Xwidget Webkit=

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-12-35-24.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 12 - 35 - 24. - png?w=740]]

* Step 4: Browse some site, say Google
*第四步:浏览一些网站，比如谷歌

Try using the above menu item, and you will find that it fails to work.  You will see an error report that goes like
尝试使用上面的菜单项，您会发现它无法工作。您将看到一个类似于这样的错误报告

#+BEGIN_EXAMPLE
posn-set-point: Position not in text area of window
#+END_EXAMPLE

This is an intermittent bug, possibly because no one had ever thought of invoking the browser with Menu. Overlook the error. And proceed by invoking the command directly with =M-x xwidget-webkit-browse-url RET https://www.google.com RET=.
这是一个间歇性的bug，可能是因为没有人想过用菜单调用浏览器。忽略错误。然后使用=M-x xwidget-webkit-browse-url直接调用该命令:RET https://www.google.com RET=。

* Step 4: Once you are in your browser, check out the =Xwidget Webkit= menu
*步骤4:进入浏览器后，检查=Xwidget Webkit=菜单

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-12-49-10.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 12 - 49 - 10. - png?w=740]]

* Step 5: Enter a search string, in to the textbox:  /Remember the quirk/
*步骤5:输入一个搜索字符串，在文本框:/记住的怪癖/

Now enter a search string, say =emacs xwidget webkit= in to the search box.
现在输入一个搜索字符串，在搜索框中输入=emacs xwidget webkit= in。

Don't be in a hurry.
不要着急。

There is a specific way in which you need to enter the search text in to the search box.  Here are the steps:
有一种特殊的方式，您需要在搜索框中输入搜索文本。以下是步骤:

1. Double-click your mouse-cursor on  the search box
1. 在搜索框中双击鼠标光标
2. Take help from the =Xwidget Webkit= menu, as you see below or just press enter =RET=
2. 从=Xwidget Webkit=菜单中获得帮助，如下所示，或者直接按enter =RET=
3. At the minbuffer prompt, enter the search string and press =Enter= to submit
3.在minbuffer提示符处，输入搜索字符串并按= enter =提交

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-12-46-32.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 12 - 46 - 32. - png?w=740]]

If everything goes well, you will be welcomed with the following screen.
如果一切顺利，您将受到以下屏幕的欢迎。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-13-04-36.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 13 - 04 - 36. - png?w=740]]

Use the =Xwidget Webkit= menu to scroll the buffer, collect notes for your  personal diary or step back through your web history.
使用=Xwidget Webkit=菜单来滚动缓冲区、收集个人日记的笔记或回顾web历史。

* Step 6:  Editing HTML textareas, say Wiki pages on Github: /Remember the quirk/
*步骤6:编辑HTML文本区域，比如Github上的Wiki页面:/记住这个怪癖/

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-15-32-35.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 15 - 32 - 35. - png?w=740]]

To edit HTML Textareas, proceed as above i.e., Press =RET= on the text area.
编辑HTML文本区域，按照上面的步骤进行。，在文本区按=RET=。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-15-36-43.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 15 - 36 - 43. - png?w=740]]

Once you do that, the browser opens a buffer named =textarea= in =Fundamental Mode=.  The buffer is filled with current text.  Edit the text area to your heart's content.  To submit the content back to the browser, use =End Edit Textarea= as shown below.
这样做之后，浏览器将打开一个名为=textarea= in = basic Mode=的缓冲区。缓冲区用当前文本填充。编辑文本区域到您的心的内容。要将内容提交回浏览器，请使用=End Edit Textarea=，如下所示。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-15-38-01.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 15 - 18 - 38 - 01. - png?w=740]]

Once you end the edit of textarea, the browser wraps around the softbreaks with newline escapes.
一旦你结束了对文本区的编辑，浏览器就会用换行符来包装软中断。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-15-39-07.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 18 - 15 - 39 - 07. - png?w=740]]

Switch to the browser window, and you will see the new contents of text area.
切换到浏览器窗口，您将看到文本区域的新内容。

[[https://emacsnotes.files.wordpress.com/2018/08/screenshot-from-2018-08-18-15-38-47.png?w=740]]
[[https://emacsnotes.files.wordpress.com/2018/08/screenshot -从- 2018 - 08 - 15 - 18 - 38 - 47. - png?w=740]]

That is all.
这是所有。

* Concluding Words
*结束的话

The =Xwidget Webkit= browser, as on the day of writing, has it's drawbacks. Specifically, I noticed the following things:
在撰写本文的当天，=Xwidget Webkit= browser也有它的缺点。具体来说，我注意到了以下几点:

1.  The browser refuses to take commands via the menu.
1. 浏览器拒绝通过菜单接受命令。
2. The browser display flickers as I type text on the minibuffer.
2. 当我在minibuffer上输入文本时，浏览器显示闪烁。
3. Submitting textareas is a hit or a miss affair.
3.提交文本区域是一个成功或失败的事情。
4. The mouse cursor disappears for a brief period, as soon as you submit text i.e.,  The handing over of X events from Emacs to Webkit is a bit tardy.  This behaviour is very disorienting.
4. 鼠标光标消失了一段短暂的时间，只要你提交文本即是。，将X事件从Emacs移交给Webkit有点慢。这种行为很令人迷惑。

Despite all these drawbacks, I am convinced that =Xwidget Webkit= browser is the future of browsing web within Emacs.  Those among you who develop applications for the web, have a lot to cheer about this browser.
尽管有这些缺点，但我相信在Emacs中，=Xwidget Webkit= browser是未来的web浏览方式。那些为web开发应用程序的人，对这个浏览器有很多值得欢呼的地方。
