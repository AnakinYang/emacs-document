#+TITLE: Org-mode and Pandoc as a static site generator
#+URL: https://awarm.space/blog/2018-09-29-org-and-pandoc-static-site.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 10月 19日 星期五 12:50:45 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

I've spent a lot of time looking for the "perfect" static site generator. I want something that's:
我花了很多时间来寻找“完美的”静态站点生成器。我想要的是:

- fast
——快
- simple enough to let me focus on writing
-简单到让我专注于写作
- easy to run on someone else's server
-容易运行在别人的服务器
- extendable if and when I want to
-只要我愿意，随时都可以延长

While there are some awesome site generators out there now (I really enjoyed [[https://gohugo.io/][hugo]] for it's 0 dependencies and speed) most were just too big for me. They had specific templating systems, or required set up and theming that I didn't want to get into.
虽然现在有一些很棒的网站生成器(我真的很喜欢[[https://gohugo])。io/][雨果因为它是0依赖和速度)大多数对我来说太大了。他们有特定的模板系统，或者需要设置和主题，我不想深入讨论。

I settled on using [[https://pandoc.html][pandoc]] to convert a set of markdown files to html, and paired it with a very simple css file. This worked well! I had an ultra-minimal blog generator that I could run on Gitlab Pages super easily.
我决定使用[[https://pandoc。将一组标记文件转换成html，并将其与一个非常简单的css文件配对。这个工作好!我有一个非常小的博客生成器，我可以非常容易地在Gitlab页面上运行。

Eventually though I ran into the limitations. I wanted to generate an index page for the blog, as well as a fancier table of contents for a whitepaper. To handle this I ended up adding cases to what was a pretty small bash script. And of course that became a pain to maintain.
尽管我最终遇到了限制。我想为博客生成一个索引页，以及一个更漂亮的白皮书目录。为了处理这个问题，我最终向一个很小的bash脚本添加了一些情况。当然，这就变成了维持的痛苦。

The main problem was a separation between the writing I wanted to do and the code I had to write to manage it. *What if these could be tied together?* I'd had some exposure to the ideas of [[http://literateprogramming.com/][Literate Programming]] from Donald Knuth, but it had never really clicked for me in a practical way.
主要的问题是我想写的代码和我必须写的代码之间的分离。如果这些能绑在一起会怎么样?*我曾接触过唐纳德•克努斯(Donald Knuth)的[[http://literateprogramming.com/][[读写编程]]，但从未真正接触过。

This changed as I started using the wonder that is org mode. Bear with me, I'll get to blog generation soon.
当我开始使用org模式时，情况发生了变化。耐心听我说，我很快就要进入博客时代了。

* What is Org Mode?
*什么是组织模式?
:PROPERTIES:
属性:
:CUSTOM_ID: what-is-org-mode
:CUSTOM_ID what-is-org-mode
:END:
结束:

#+BEGIN_QUOTE
# + BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
Org模式用于记录、维护待办事项列表、规划项目和使用快速有效的纯文本系统编写文档。
#+END_QUOTE
# + END_QUOTE

Org is a joyful piece of software. It's a simple yet powerful combination of intuitive markup and ergonomic tooling that (most of the time) just works. The key is that the markup is readable at a glance, and the tools provide some pretty neat ways of interacting with and manipulating it.
Org是一个快乐的软件。它是一个简单而强大的组合，结合了直观的标记和符合人体工程学的工具(大多数情况下)。关键是标记一眼就可读，而且这些工具提供了一些与之交互和操作的非常简洁的方法。

It's core components are fairly simple:
它的核心组件相当简单:

- =headings=, lines which start with a number of =*='s, provide top-level structure,
- =标题=，以许多=*=开头的行，提供顶级结构，
- inline markup like =* *= and =/ /= provide styling
-内联标记如=* *=和=/ /=提供样式
- blocks (denoted with =#+=) provide space to do some really cool stuff.
块(用=#+=表示)提供空间来做一些很酷的事情。
- keywords like =TODO= work with specific tools and provide context
-关键字，如=TODO=工作与特定的工具和提供上下文

This all comes together perfectly as a tool for literate programming.
这些都完美地结合在一起，成为文学编程的工具。

** Literate blog generation
**有文化的博客一代
:PROPERTIES:
属性:
:CUSTOM_ID: literate-blog-generation
:CUSTOM_ID literate-blog-generation
:END:
结束:

You may have noticed the source blocks scattered around this site. They define how the content under them is generated. They're just code blocks, but with [[https://orgmode.html/worg/org-contrib/babel/][org-babel]] I can execute them right in my editor to generate those blocks on the fly! For the site I'm using bash, but babel (as the name implies) let's you write in pretty much anything.
您可能已经注意到源块分散在这个站点周围。它们定义了如何生成它们下面的内容。它们只是代码块，但是带有[[https://orgmode。我可以在我的编辑器中执行它们来动态生成那些块!对于这个站点，我使用bash，但是babel(顾名思义)让您可以编写几乎任何内容。

[[https://awarm.space/static/gifs/org-babel.gif]]
[[https://awarm.space/static/gifs/org-babel.gif]]
Build the blog list with bash
使用bash构建博客列表

Is this a little overkill? Yes. But it's way more maintainable than the monster bash script I was using previously.
这是不是有点太过了?是的。但是它比我以前使用的monster bash脚本更容易维护。

It's probably not the static site generator for you if you just want to get to blogging, but it's incredibly fun to put together and a great learning experience.
如果你只是想写博客，它可能不是静态的网站生成器，但是把它放在一起是非常有趣的，也是一个很好的学习经验。

Having the code in the same place as the writing you do encourages you to both maintain it and write more. This could turn into an endless bikeshed, but for me it opens up a ton of possibilities in producing the kind of work I want to.
将代码放在与编写代码相同的位置会鼓励您维护代码并编写更多代码。这可能会变成没完没了的自行车赛，但对我来说，它为我创造出我想要的作品提供了无数的可能性。

** Getting Started
* *开始
:PROPERTIES:
属性:
:CUSTOM_ID: getting-started
:CUSTOM_ID:开始
:END:
结束:

Org-babel's documentation is somewhat scattered but digging through [[https://orgmode.html/manual/][The Org Manual]] eventually got me where I needed be. This article on using it for [[http://howardism.html/Technical/Emacs/literate-devops.html][Literate Dev-Ops]] by Howard Abrams also has a ton of useful information and techniques.
Org-babel的文档有些分散，但是通过[[https://orgmode]进行挖掘。最终把我带到我需要的地方。本文介绍如何将它用于[[http://howardism.html/technical/emacs/literdevops]。还有大量有用的信息和技术。

* How this site is actually built
*本网站的实际建造方式
:PROPERTIES:
属性:
:CUSTOM_ID: how-this-site-is-actually-built
:CUSTOM_ID how-this-site-is-actually-built
:END:
结束:

The rough idea is to have a bunch of code snippets distributed throughout the site in org-babel blocks. Then we use blocks that look something like this at each level up.
大致的想法是将一堆代码片段以org-babel块的形式分布在整个站点中。然后我们在每一层使用看起来像这样的块。

#+BEGIN_EXAMPLE
(find-file "./blog/index.org")
(org-babel-execute-buffer )
(save-buffer)
#+END_EXAMPLE

This will go into a specific file and execute all the org-babel blocks contained within. And if that file includes a similar block, it'll go down into others!
这将进入一个特定的文件，并执行所有的组织巴别塔块包含在。如果该文件包含一个类似的块，它将进入其他块!

And at the top level (the =index.org= file) we have the code that starts it all.
在顶层(=index.org=文件)，我们有启动它的代码。

** Getting some HTML
得到一些HTML
:PROPERTIES:
属性:
:CUSTOM_ID: getting-some-html
:CUSTOM_ID getting-some-html
:END:
结束:

Once all the files are set up, we have a small bash script right at the top to convert all of that markdown to html.
一旦所有的文件都设置好了，我们在顶部有一个小的bash脚本来将所有的标记转换成html。

#+BEGIN_SRC shell
# + BEGIN_SRC壳
#!/bin/bash
# ! / bin / bash

rm -rf _public
rm射频_public
root="$(pwd)"
根= " $ (pwd) "

#emacs --batch -l ./build-assets/build.el
#emacs——批量-l ./build-assets/build.el
for folder in $(find . -type d -not -path '*/.*'); do
在$(查找文件夹。类型d -not -path '*/.*');做
(cd $folder
(cd $文件夹
for file in `find . -maxdepth 1 -name "*.org"`; do
查找文件。-maxdepth 1 -name "*.org" ';做
[ -e "$file" ] || continue
[-e "$file"] ||继续
mkdir -p "$root/_public/${folder#./}"
mkdir - p " $ root / _public / ${文件夹#。/}"

pandoc -f org -t html "$file"                   -o "$root/_public/${folder#./}/`basename "$file" .org`.html"                  --lua-filter $root/scripts/changeLinks.lua                   --lua-filter $root/scripts/task-list.lua                   -B $root/static/html/header.html                   -H $root/static/html/includes.html                   -c "/static/styles.css"                   -s
“$file”-o“$root/_public/${folder#”。/}/ ' basename "$file" .org ' .html"——lua-filter $root/scripts/changeLinks。lua - lua-filter $ root /脚本/任务列表。/html/header.html -H $root/static/html/include .html -c "/static/styles。css“- s
done)
完成)
done
完成

cp -r static _public/
cp -r static _public/
#+END_SRC
# + END_SRC

It's pretty small as the heavy lifting is done by [[https://pandoc.html][pandoc]]. This time however, this script can stay small as we're letting org-babel take the weight.
它非常小，因为繁重的工作是由[[https://pandoc.html][pandoc]]完成的。但是这一次，这个脚本可以保持较小的规模，因为我们让org-babel来承担它的重量。

* What's next?
*接下来是什么?
:PROPERTIES:
属性:
:CUSTOM_ID: whats-next
:CUSTOM_ID whats-next
:END:
结束:

Well actually writing for one. I've got the infrastructure in place and now it's time to start using it!
实际上是为一个人写的。我已经有了基础设施，现在是时候开始使用它了!

Well, there's also some additional infrastructure I'd like to get in of course :)
嗯，还有一些额外的基础设施，我想进入当然:)

- Get a git-hook in place to run the top level script whenever I commit
-得到一个git-hook在适当的地方运行顶层脚本时，我提交
- Figure out how to handle comments or replies
-弄清楚如何处理评论或回复
- [0/2] Tie my other org files to the site:
-[0/2]把我的其他组织文件:

- TODOS,
-大家,
- Links
——链接
