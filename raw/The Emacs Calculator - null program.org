#+TITLE: The Emacs Calculator « null program
#+URL: https://nullprogram.com/blog/2009/06/23/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 11月 01日 星期四 12:04:06 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Did you know that [[http://www.gnu.org/software/emacs/calc.html][Emacs comes with a
你知道[[http://www.gnu.org/software/emacs/calc.html][Emacs有一个
calculator]]? Woop-dee-doo! Call the presses! Wow, a whole
计算器]]吗?Woop-dee-doo !电话按!哇,一个整体
calculator! Sounds a bit lame, right?
计算器!听起来有点扯，对吧?

Actually, it's much more than just a simple calculator. It's a [[http://en.wikipedia.org/wiki/Computer_algebra_system][computer
实际上，它不仅仅是一个简单的计算器。这是一个[[http://en.wikipedia.org/wiki/Computer_algebra_system][计算机
algebra system]]! It is officially called a calculator, which isn't
代数系统]]!它的正式名称是计算器，但它不是
fair. It's an understatement, and I am sure has caused many people to
公平的。这是一种保守的说法，我相信很多人都这么认为
overlook it. I finally ran into it during a thorough (re)reading of
忽略它。我终于在一次彻底的(重新)阅读中遇到了它
the Emacs manuals and almost skipped over it myself.
Emacs手册，我差点就跳过了。

Ever see that demonstration by Will Wright for the game /Spore/
曾经看过Will Wright为游戏/Spore/所做的演示吗
several years ago? The player starts as a single-cell organism and
几年前?玩家从单细胞有机体开始
evolves into a civilization with interstellar presence. When he
进化成一个有星际存在的文明。当他
started the demo he showed a cell through what looked like a
开始演示时，他展示了一个细胞，通过一个看起来像
microscope. No one had any idea yet what the game was about, so every
显微镜。没有人知道这个游戏是关于什么的，所以每个人
time he increased the scope, from bacteria to animal, animal to
他把时间的范围扩大了，从细菌到动物，再到动物
civilization, civilization to space travel, interplanetary travel to
文明，文明到太空旅行，文明到星际旅行
interstellar travel, there was a huge reaction from the audience. It
《星际穿越》在观众中引起了巨大反响。它
was like those infomercials: "But that's not all!!!"
就像电视广告里说的:“但这还不是全部!!”

As I made my way through the Emacs calc manual I was continually
当我通过Emacs calc手册时，我一直在做
amazed by its power, with a similar constant increase in scope. Each
它的力量令人惊叹，与之相似的范围不断扩大。每一个
new page was almost saying, "But that's not all!!!"
新页面几乎是在说，“但这还不是全部!!”

Like an infomercial I'm going to run through some of its features. See
就像电视购物一样，我将快速浏览它的一些功能。看到
the calc manual for a real thorough introduction. It has practice
calc手册为一个真正彻底的介绍。它有实践
exercises that shows some gotchas and interesting feature
这些练习展示了一些陷阱和有趣的特性
interactions.
交互。

Fire it up with =C-x 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh c= or =M-x calc=. There
火用= cx 0 _sync_master.sh 1 _add_new_article_manual.sh 1 _add_new_article_newspaper.sh 2 _start_translating.sh 3 _continue_the_work.sh 4 _finish.sh 5 _pause.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh c =和= m x calc =。在那里
will be two new windows (Emacs windows, that is), one with the
将会有两个新窗口(即Emacs窗口)，一个带有
calculator and the other with usage history (the "trail").
计算器和其他与使用历史(“踪迹”)。

First of all, the calculator operates on a stack and so its basic use
首先，计算器是在堆栈上操作的，所以它的基本用途是
is done with RPN. The stack builds vertically, downwards. Type in
用RPN完成。堆栈垂直向下构建。输入
numbers and hit enter to push them onto the stack. Operators can be
数字并按回车键将它们推到堆栈上。运营商可以
typed right after the number, so no need to hit enter all the
在数字后面输入，所以不需要按回车键
time. Because negative (=-=) is reserved for subtraction an
时间。因为负数(=-=)是为减法保留的
underscore =_= is used to type a negative number. An
下划线=_=用于键入一个负数。一个
example stack with 3, 4, and 10,
3、4和10的堆栈示例，

#+BEGIN_EXAMPLE
3: 3
2: 4
1: 10
.
#+END_EXAMPLE

10 is at the "top" of the stack (indicated by the "1:"), so if we type
10在堆栈的“顶部”(由“1:”表示)，因此如果我们键入
a =*= the top two elements are multiplied. Like so,
a =*=前两个元素相乘。像这样,

#+BEGIN_EXAMPLE
2: 3
1: 40
.
#+END_EXAMPLE

The calculator has no limitations on the size of integers, so you work
计算器对整数的大小没有限制，所以您可以使用它
with large numbers without losing precision. For example, we'll
在不丢失精度的情况下使用较大的数字。例如,我们会
take =2^200=.
= 2 ^ 200 =。

#+BEGIN_EXAMPLE
2: 2
1: 200
.
#+END_EXAMPLE

Apply the =^= operator,
应用=^=运算符，

#+BEGIN_EXAMPLE
1: 1606938044258990275541962092341162602522202993782792835301376
.
#+END_EXAMPLE

But that's not all!!! It has a complex number type, which is entered
但这还不是全部!!它有一个被输入的复数类型
in pairs (real, imaginary) with parenthesis. They can be operated on
用括号对(实的，虚的)。可以进行手术
like any other number. Take =-1 + 2i= minus =4 + 2i=,
和其他数字一样。取=-1 + 2i= - 4 + 2i=，

#+BEGIN_EXAMPLE
2: (-1, 2)
1: (4, 2)
.
#+END_EXAMPLE

Subtract with =-=,
减去= - =,

#+BEGIN_EXAMPLE
1: -5
.
#+END_EXAMPLE

Then take the square root of that using =Q=, the square
然后取它的平方根，用Q=，平方
root function.
根的功能。

#+BEGIN_EXAMPLE
1: (0., 2.2360679775)
.
#+END_EXAMPLE

We can set the calculator's precision with =p=. The default
我们可以用=p=来设置计算器的精度。默认的
is 12 places, showing here =1 / 7=.
是12个位置，这里显示=1 / 7=。

#+BEGIN_EXAMPLE
1: 0.142857142857
.
#+END_EXAMPLE

If we adjust the precision to 50 and do it again,
如果我们把精度调整到50，再做一次，

#+BEGIN_EXAMPLE
2: 0.142857142857
1: 0.14285714285714285714285714285714285714285714285714
.
#+END_EXAMPLE

Numbers can be displayed in various notations, too, like fixed-point,
数字也可以用不同的符号来表示，比如定点，
scientific notation, and engineering notation. It will switch between
科学符号和工程符号。它会在
these without losing any information (the stored form is separate from
在不丢失任何信息的情况下(存储的表单是独立的)
the displayed form).
显示的形式)。

But that's not all!!! We can represent rational numbers precisely with
但这还不是全部!!我们可以用它来精确地表示有理数
ratios. These are entered with a =:=. Push
比率。这些是用a =:=输入的。推
on =1/7=, =3/14=, and =17/29=,
on =1/7=， =3/14=， =17/29=，

#+BEGIN_EXAMPLE
3: 1:7
2: 3:13
1: 17:29
.
#+END_EXAMPLE

And multiply them all together, which displays in the lowest form,
把它们相乘，得到最低的形式，

#+BEGIN_EXAMPLE
1: 51:2842
.
#+END_EXAMPLE

There is a mode for working in these automatically.
有一个自动工作模式。

But that's not all!!! We can change the radix. To enter a number with
但这还不是全部!!我们可以改变基数。输入一个数字
a different radix, which prefix it with the radix and a
不同的基数，前面加上基数和a
=#=. Here is how we enter 29 in base-2,
= # =。这是我们在base-2中输入29的方法，

#+BEGIN_EXAMPLE
2#11101
#+END_EXAMPLE

We can change the display radix with =d r=. With 29 on the
我们可以用=d r=改变显示基数。有29个
stack, here's base-4,
堆栈,这是4进制,

#+BEGIN_EXAMPLE
1: 4#131
.
#+END_EXAMPLE

Base-16,
Base-16,

#+BEGIN_EXAMPLE
1: 16#1D
.
#+END_EXAMPLE

Base-36,
Base-36,

#+BEGIN_EXAMPLE
1: 36#T
.
#+END_EXAMPLE

But that's not all!!! We can enter algebraic expressions onto the
但这还不是全部!!我们可以把代数表达式输入到
stack with apostrophe, ='=. Symbols can be entered as part
堆栈与撇号，='=。符号可以作为一部分输入
of the expression. Note: these expressions are not entered in RPN.
的表达式。注意:RPN中没有输入这些表达式。

#+BEGIN_EXAMPLE
1: a^3 + a^2 b / c d - a / b
.
#+END_EXAMPLE

There is a "big" mode (=d B=) for easier reading,
有一个“大”模式(=d B=)，便于阅读，

#+BEGIN_EXAMPLE
2
3 a b a
1: a + ---- - -
c d b

.
#+END_EXAMPLE

We can assign values to variables to have the expression evaluated. If
我们可以给变量赋值来计算表达式。如果
we assign =a= to 10 and use the "evaluates-to" operator,
我们将=a=赋值给10，并使用"evaluates-to"操作符，

#+BEGIN_EXAMPLE
2
3 a b a 100 b 10
1: a + ---- - - => 1000 + ----- - --
c d b c d b

.
#+END_EXAMPLE

But that's not all!!! There is a vector type for working with vectors
但这还不是全部!!有一个向量类型用于处理向量
and matrices and doing linear algebra. They are entered with
还有矩阵和线性代数。它们是带着
brackets, =[]=.
括号,= []=。

#+BEGIN_EXAMPLE
2: [4, 1, 5]
1: [ [ 1, 2, 3 ]
[ 4, 5, 6 ]
[ 6, 7, 8 ] ]
.
#+END_EXAMPLE

And take the dot product, then take cross product of this vector and matrix,
然后取点积，然后取这个向量和矩阵的外积，

#+BEGIN_EXAMPLE
2: [38, 48, 58]
1: [ [ -14, -18, -22 ]
[ -19, -18, -17 ]
[ 15, 18, 21 ] ]
.
#+END_EXAMPLE

Any matrix and vector operator you could probably think of is
你能想到的任何矩阵和向量算子都是
available, including map and reduce (and you can define your own
可用，包括map和reduce(您可以定义自己的
expression to apply).
表达式应用)。

We can use this to solve a linear system. Find =x=
我们可以用它来解线性方程组。找到= x =
and =y= in terms of =a= and =b=,
和=y=分别表示为=a=和=b=，

#+BEGIN_EXAMPLE
x + a y = 6
x + b y = 10
#+END_EXAMPLE

Enter it (note we are using symbols),
输入(注意我们使用的是符号)，

#+BEGIN_EXAMPLE
2: [6, 10]
1: [ [ 1, a ]
[ 1, b ] ]
.
#+END_EXAMPLE

And divide,
和分裂,

#+BEGIN_EXAMPLE
4 a 4
1: [6 + -----, -----]
a - b b - a

.
#+END_EXAMPLE

But that's not all!!! We can create graphs if gnuplot is installed. We
但这还不是全部!!如果安装了gnuplot，我们可以创建图形。我们
can give it two vectors, or an algebraic expression. This plot
可以给它两个向量，或者一个代数表达式。这个情节
of =sin(x)= and =x cos(x)= was made with just a
而=sin(x)=和=x cos(x)=是由a构成的
few keystrokes,
几个按键,

[[/img/emacs/calc-plot.png]]
[[/ img / emacs /钙-plot.png]]

But that's not all!!! There is an HMS type for handling times and
但这还不是全部!!有一个HMS类型用于处理时间和
angles. For 2 hours, 30 minutes, and 4 seconds, and some others,
角度。2小时，30分钟，4秒，以及其他一些时间，

#+BEGIN_EXAMPLE
3: 2@ 30' 4"
2: 4@ 22' 13"
1: 1@ 2' 56"
.
#+END_EXAMPLE

Of course, the normal operators work as expected. We can add them all up,
当然，正常的操作符可以正常工作。我们可以把它们都加起来，

#+BEGIN_EXAMPLE
1: 7@ 55' 13"
.
#+END_EXAMPLE

We can convert between this and radians, and degrees, and so on.
我们可以在它和弧度，角度等之间进行转换。

But that's not all!!! The calculator also has a date type, entered
但这还不是全部!!计算器还有一个日期类型，已输入
inside angled brackets, =<>= (in algebra entry
在尖括号内，=<>=(在代数条目中
mode). It is really flexible on input dates. We can insert the current
模式)。它在输入日期上非常灵活。我们可以插入电流
date with =t N=.
日期=t N=。

#+BEGIN_EXAMPLE
1: <6:59:34pm Tue Jun 23, 2009>
.
#+END_EXAMPLE

If we add numbers they are treated as days. Add 4,
如果我们把数字相加，它们就被当作天数。添加4,

#+BEGIN_EXAMPLE
1: <6:59:34pm Sat Jun 27, 2009>
.
#+END_EXAMPLE

It works with the HMS format from before too. Subtract =2@ 3' 15"=.
它也适用于以前的HMS格式。减去=2@ 3' 15"=。

#+BEGIN_EXAMPLE
1: <4:56:32pm Sat Jun 27, 2009>
.
#+END_EXAMPLE

But that's not all!!! There is a modulo form for performing modulo
但这还不是全部!!有一个模数形式用于执行模数
arithmetic. For example, 17 mod 24,
算术。例如，17 mod 24，

#+BEGIN_EXAMPLE
1: 17 mod 24
.
#+END_EXAMPLE

Add 10,
加10,

#+BEGIN_EXAMPLE
1: 3 mod 24
.
#+END_EXAMPLE

This is most useful for forms such as =n^p mod M=, which
这对于=n^p mod M=这样的形式非常有用
this will handle efficiently. For example, =3^100000 mod 24=. The naive way would be to find =3^100000= first,
这将有效地处理。例如=3^100000 mod 24=。最简单的方法是先求出=3^100000=，
then take the modulus. This involves a computationally expensive
然后取模。这涉及到计算上的开销
middle step of calculating =3^100000=, a huge number. The
计算的中间步骤=3^100000=，一个很大的数。的
modulo form does it smarter.
模块化形式更聪明。

But that's not all!!! The calculator can do unit conversions. The
但这还不是全部!!计算器可以进行单位转换。的
version of Emacs (22.3.1) I am typing in right now knows about 159
我现在输入的Emacs版本(22.3.1)知道有159个
different units. For example, I push 65 mph onto the stack,
不同的单位。例如，我把65英里每小时推到堆栈上，

#+BEGIN_EXAMPLE
1: 65 mph
.
#+END_EXAMPLE

Convert to meters per second with =u c=,
换算成米每秒=u c=，

#+BEGIN_EXAMPLE
1: 29.0576 m / s
.
#+END_EXAMPLE

It is flexible about mixing type of units. For example, I enter 3
它是灵活的混合类型的单位。例如，我输入3
cubic meters,
立方米,

#+BEGIN_EXAMPLE
3
1: 3 m

.
#+END_EXAMPLE

I can convert to gallons,
我可以换算成加仑，

#+BEGIN_EXAMPLE
1: 792.516157074 gal
.
#+END_EXAMPLE

I work in a lab without Internet access during the day, so when I need
我在一个没有互联网的实验室工作，所以当我需要的时候
to do various conversions Emacs is indispensable.
要进行各种转换，Emacs是必不可少的。

The speed of light is also a unit. I can enter =1 c= and
光速也是一个单位。我可以输入= 1c =和
convert to meters per second,
换算成米每秒，

#+BEGIN_EXAMPLE
1: 299792458 m / s
.
#+END_EXAMPLE

But that's not all!!! As I said, it's a computer algebra system so it
但这还不是全部!!就像我说的，这是一个计算机代数系统
understands symbolic math. Remember those algebraic expressions from
理解符号数学。记住那些代数表达式
before? I can operate on those. Let's push some expressions onto the
过吗?我可以给他们做手术。让我们把一些表达式推到
stack,
堆栈,

#+BEGIN_EXAMPLE
3: ln(x)

2 a x
2: a x + --- + c
b

1: y + c

.
#+END_EXAMPLE

Multiply the top two, then add the third,
前两项相乘，然后加上第三项，

#+BEGIN_EXAMPLE
2 a x
1: ln(x) + (a x + --- + c) (y + c)
b

.
#+END_EXAMPLE

Expand with =a x=, then simplify with =a s=,
用=a x=展开，然后用=a s=简化，

#+BEGIN_EXAMPLE
2 a x y 2 a c x 2
1: ln(x) + a y x + ----- + c y + a c x + ----- + c
b b

.
#+END_EXAMPLE

Now, one of the coolest features: calculus. Differentiate with respect
现在，最酷的功能之一:微积分。微分
to x, with =a d=,
令x =a d=，

#+BEGIN_EXAMPLE
1 a y a c
1: - + 2 a y x + --- + 2 a c x + ---
x b b

.
#+END_EXAMPLE

Or undo that and integrate it,
或者撤销并整合它，

#+BEGIN_EXAMPLE
3 2 3 2
a y x a x y a c x a c x 2
1: x ln(x) - x + ------ + ------ + c x y + ------ + ------ + x c
3 2 b 3 2 b

.
#+END_EXAMPLE

That's just awesome! That's a text editor ... doing calculus!
这是太棒了!这是一个文本编辑器…做微积分!

So, that was most of the main features. It was kind of exhausting
这就是它的主要特点。有点累了
going through all of that, and I am only scratching the surface of
经历了这一切，而我仅仅是冰山一角
what the calculator can do.
计算器能做什么。

Naturally, it can be extended with some elisp. It provides a
当然，它可以通过一些elisp扩展。它提供了一个
=defmath= macro specifically for this.
=defmath=宏。

I bet (hope?) someday it will have a functions for doing Laplace and
我打赌(希望?)有一天它会有一个做拉普拉斯变换的函数
Fourier transforms.
傅里叶变换。
