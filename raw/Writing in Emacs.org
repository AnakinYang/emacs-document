#+TITLE: Writing in Emacs
#+URL: http://www.johnborwick.com/2019/02/24/emacs-writing.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2019年 03月 20日 星期三 11:17:39 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
The excellent YouTube video called "[[https://www.youtube.com/watch?v=FtieBc3KptU][Emacs for Writers]]" tells the story of how a writer learned about Emacs because he wanted a simple writing tool that helped him focus on what he was writing.
这段优秀的YouTube视频名为“[[https://www.youtube.com/watch?“讲述了一个作家如何了解Emacs，因为他想要一个简单的写作工具，帮助他专注于他所写的东西。

I have (barely) used Scrivener and other tools (including just a set of LaTeX files) to write larger texts. However, I wanted to set something up more along the lines of what the Jay Dixit in the above video has set up.
我几乎不用Scrivener和其他工具(包括一套乳胶文件)来写大段文字。然而，我想建立更多的东西沿着杰伊迪克西特在上面的视频已经建立的路线。

Here's what I've got so far.
这是我目前得到的。

** Background
* *背景
:PROPERTIES:
属性:
:CUSTOM_ID: org5944504
:CUSTOM_ID org5944504
:END:
结束:

All of this is designed for writing in .org files using org-mode. Org-mode is great for writing because you can show/hide your text vs. the headers/outline of your text. There are lots of other things that org-mode /could/ do, such as tracking to-do's, but at its most basic you're writing text inside headings.
所有这些都是为使用org模式在。org文件中编写而设计的。org模式非常适合写作，因为你可以显示/隐藏你的文本，而不是文本的标题/大纲。还有很多其他的组织模式可以做的事情，比如跟踪待办事项，但最基本的是你在标题里写文字。

Some quick things that you get "for free" with org-mode include:
一些快速的事情，你得到“免费”与组织模式包括:

- export options built in for HTML, PDF, text, or other formats
-导出选项内建的HTML, PDF，文本，或其他格式
- comments that aren't rendered in your final version, e.g. you can have notes to yourself that people don't see when you export your writing
-在你的最终版本中没有呈现的注释，例如，你可以在自己的笔记中添加别人在你导出文章时看不到的注释
- contents are all text so it's easy to make large-scale changes with tools as simple as find and replace
-内容都是文本，所以很容易作出大规模的变化与工具，简单的找到和替换

** org-panes
* * org-panes
:PROPERTIES:
属性:
:CUSTOM_ID: org248a0a5
:CUSTOM_ID org248a0a5
:END:
结束:

#+BEGIN_EXAMPLE
(use-package org-panes
:ensure nil
:config (setq org-panes-split-overview-horizontally t)
(setq org-panes-main-size 70))
#+END_EXAMPLE

[[https://github.com/knupfer/org-panes][org-panes]] is a module to give you a three-pane view:
[[https://github.com/knupfer/org-panes]]是一个模块，给你一个三窗格视图:

1. The top-level headings of your document
1. 文档的顶级标题
2. All headings of your document
2. 文档的所有标题
3. The actual text of your document (the main pane)
3.文档的实际文本(主窗格)

If you select a different heading in the summary panes, you're taken to the relevant section in the main pane.
如果在摘要窗格中选择不同的标题，则会转到主窗格中的相关部分。

** Olivetti
* *奥利维蒂
:PROPERTIES:
属性:
:CUSTOM_ID: org0c2a98c
:CUSTOM_ID org0c2a98c
:END:
结束:

[[https://github.com/rnkn/olivetti][Olivetti]] will narrow the window so that you have larger margins rather than writing right up to the edges of the window. I like how this helps me focus on what I'm writing.
[[https://github.com/rnkn/olivetti][Olivetti]]将缩小窗口，使您有更大的空白，而不是直接写到窗口的边缘。我喜欢这样帮助我专注于我所写的东西。

** Word count goal mode
**字数目标模式
:PROPERTIES:
属性:
:CUSTOM_ID: orgb364e84
:CUSTOM_ID orgb364e84
:END:
结束:

#+BEGIN_EXAMPLE
(use-package wc-goal-mode)
#+END_EXAMPLE

This minor mode shows you how many words are in the buffer vs. when you first opened the buffer, in the form =3500+120=3750=.
这个次要模式显示了与第一次打开缓冲区时相比，缓冲区中有多少单词，其形式为=3500+120=3750=。

I am therefore looking at the mode line more. So, I also learned about =diminish=, which is a tool to hide things from your mode line. This tool is supported by use-package. For example, I know I'm using Helm so I don't need to see it in my mode line anymore:
因此，我更关注模式行。因此，我还学习了= reduction =，这是一个工具，以隐藏的东西，从您的模式行。use-package支持这个工具。例如，我知道我正在使用Helm，所以我不需要在我的模式行中看到它:

#+BEGIN_EXAMPLE
(use-package helm
:diminish
; ...
)
#+END_EXAMPLE

** keybindings
* *快捷键
:PROPERTIES:
属性:
:CUSTOM_ID: orga171d6b
:CUSTOM_ID orga171d6b
:END:
结束:

#+BEGIN_EXAMPLE
; "C-c f" turns olivetti on/off, globally.
(use-package olivetti-mode
:ensure nil
:bind ("C-c f" . olivetti-mode))

; org-panes and olivetti don't play well together
; because they both change window sizes. this function
; turns olivetti-mode off first if it's on, so that
; org-panes doesn't get confused about the window size
(defun org-panes-check-olivetti ()
(interactive)
(if (bound-and-true-p olivetti-mode)
(progn (olivetti-mode -1)
(org-panes)
(olivetti-mode))
(org-panes)))

(use-package org
; bunch of other stuff goes here
:bind (; other bindings go here
:map org-mode-map
("C-c p" . org-panes-check-olivetti)
; etc
#+END_EXAMPLE

I wanted two key bindings:
我想要两个键绑定:

1. =C-c f=, set globally, for "focus." This turns Olivetti on and off.
1. =C-c f=，全局设置，表示“焦点”。这就开启和关闭了Olivetti。
2. =C-c p=, set within org-mode buffers, for "panes." This turns org-panes on and off.
2. =C-c p=，设置在组织模式缓冲区，为“窗格”。这将打开和关闭组织窗格。

** file mode lines
文件模式行
:PROPERTIES:
属性:
:CUSTOM_ID: org8525ab2
:CUSTOM_ID org8525ab2
:END:
结束:

#+BEGIN_EXAMPLE
# -*- mode: org; eval: (wc-goal-mode); -*-
#+END_EXAMPLE

I am still experimenting with file-specific mode lines. For the one larger file I am writing in, I turn on wc-goal-mode by default using the above "eval" line.
我仍然在尝试特定于文件的模式行。对于我正在编写的一个较大的文件，我使用上面的“eval”行默认打开了wc-goal-mode。

** Lessons learned and next steps
**经验教训和下一步
:PROPERTIES:
属性:
:CUSTOM_ID: org571f252
:CUSTOM_ID org571f252
:END:
结束:

I am weighing whether it's a good idea to create a specific frame layout for writing--one that not only has org-panes but specifies specific fonts/sizes for each window.
我正在权衡为写作创建一个特定的框架布局是否是一个好主意——它不仅有组织窗格，而且为每个窗口指定特定的字体/大小。

I'm also potentially interested in capturing word count by day, maybe with an external script. Right now I'm doing this manually via a Makefile (of course):
我还可能对用外部脚本记录每天的字数很感兴趣。现在我正在通过Makefile(当然)手工做这个:

#+BEGIN_EXAMPLE
word-count:
(/bin/echo -n $$(date); pandoc file.org -w plain | wc -w ) >> file-word-count.txt
#+END_EXAMPLE

This adds a line to the file =file-word-count.txt= whenever you run it, showing the date, time, and current word count according to [[https://pandoc.org/][pandoc]]'s conversion of the file into plaintext.
这将向file =file-word-count添加一行。txt=每当运行它时，根据[[https://pandoc.org/][pandoc]]将文件转换为明文，显示日期、时间和当前字数。

#+BEGIN_EXAMPLE
Sun Feb 24 13:05:25 PST 2019 2152
Sun Feb 24 17:02:08 PST 2019 3245
#+END_EXAMPLE
