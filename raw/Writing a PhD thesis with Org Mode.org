#+TITLE: Writing a PhD thesis with Org Mode
#+URL: https://write.as/dani/writing-a-phd-thesis-with-org-mode
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 12月 24日 星期一 17:32:39 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
*TLDR: I started using Emacs about 3 years ago. I couldn't be more grateful to have seen the light, and to have been rescued from the darkness of Windoze, Goggle and/or friends. After enlightenment, I've taken upon myself the task of customising an environment to write my PhD thesis with Org Mode.*
*TLDR:我大约3年前开始使用Emacs。看到光明，从Windoze、Goggle和/或朋友们的黑暗中被救出来，我感激不尽。在受到启发之后，我承担起了用Org模式自定义一个环境来写我的博士论文的任务。*

* Why
*为什么
:PROPERTIES:
属性:
:CUSTOM_ID: why
:CUSTOM_ID:为什么
:END:
结束:

Post created in response to the [[https://www.reddit.com/r/emacs/comments/9ynsvc/write_a_thesis_using_emacs_and_orgmode/][current thread]] in r/emacs on thesis writing with Org Mode.\
I see most people's reason to avoid Org mode for scientific writing is the fact that supervisors or co-authors use Mic. Word. I'll try to argue that that's not enough reason to accept subpar tools.
我认为大多数人避免科学写作的组织模式的原因是他们的导师或合作者使用了Mic。词。我想说的是，这并不是接受低质量工具的充分理由。

* What I'll talk about
我要说的是
:PROPERTIES:
属性:
:CUSTOM_ID: what-i-ll-talk-about
:CUSTOM_ID what-i-ll-talk-about
:END:
结束:

I'll mention a bit of my motivations, and then I'll discuss how to make use of (mostly) built in Org functionality such as tagging, export, [[https://orgmode.org/manual/In_002dbuffer-settings.html][setupfiles]] and includes, reference management, keyboard shortcuts and advanced searching; all with the purpose of building a useful thesis writing environment. Readers should have a minimum knowledge of Org mode, the Org export system and LaTeX.
我将提到一些我的动机，然后我将讨论如何使用(主要是)构建在Org中的功能，如标签，导出，[[https://orgmode.org/manual/in_002dbuffersettings.html][setupfiles]]，包括，引用管理，键盘快捷键和高级搜索;所有的目的都是为了建立一个有用的论文写作环境。读者应该对Org模式、Org导出系统和LaTeX有一定的了解。

* My requirements
*我的需求
:PROPERTIES:
属性:
:CUSTOM_ID: my-requirements
:CUSTOM_ID:我的需求
:END:
结束:

Here in the Netherlands, most PhD thesis consist of an introduction, 3 to 4 research chapters (as submitted for publication), a summary, bibliography and appendices. What this means for me is that my writing environment has to necessarily satisfy the following *minimum requirements*:
在荷兰，大多数博士论文都包括引言、3至4个研究章节(已提交出版)、摘要、参考书目和附录。这对我来说意味着我的写作环境必须满足以下*最低要求*:

- Inclusion of (parts of) external files
-包括(部分)外部文件
- Keeping track of references
-记录参考资料
- Include and reference figures
-包括和参考数字
- Version control documents
-版本控制文件
- Support for sharing with my supervisor in whatever format he wants
-支持与我的主管分享任何他想要的格式

Failure to comply with any of these means the editor is unfit for purpose .1”>1. Unfortunately, this set of requirements are not seamlessly satisfied by likes of Mic. Word or G. Docs. I reckon they can probably be configured to satisfy them, but why bother.
不遵守上述任何一条，就意味着该编辑不适合用于任何目的。不幸的是，这组需求不能被Mic之类的设备无缝地满足。Word或g文档。我估计它们可以被配置成满足这些要求，但何必麻烦呢。

Additionally, a PhD thesis writing environment should also provide the following features:
博士论文的写作环境还应具备以下特点:

- Extended searching facilities for both text and references
-扩展了文本和参考文献的搜索功能
- Simple syntax for tables and equations
-表和方程的简单语法
- Support within a proper text editor
-支持在一个适当的文本编辑器
- Shortcuts to reach my files and build the thesis
-快捷方式，以达到我的文件和建立论文

To the best of my knowledge, only Emacs with Org Mode + ox-latex provide all of these out of the box.
据我所知，只有具有Org模式+ ox-latex的Emacs提供了所有这些开箱即用的功能。

* Moulding Org Mode for thesis writing
*塑造论文写作的组织模式
:PROPERTIES:
属性:
:CUSTOM_ID: moulding-org-mode-for-thesis-writing
:CUSTOM_ID moulding-org-mode-for-thesis-writing
:END:
结束:

Most of my inspiration comes from reading Kitchin's blogs and code, and reading the Org Mode documentation, mailing list and Emacs Stack Exchange. Here' I'll go one by one through all of the requirements listed above, and how to deal with them.
我的大部分灵感来自于阅读Kitchin的博客和代码，以及阅读Org模式文档、邮件列表和Emacs堆栈交换。在这里，我将逐一介绍上面列出的所有需求，以及如何处理它们。

** Prelude: File structure
序曲:文件结构
:PROPERTIES:
属性:
:CUSTOM_ID: prelude-file-structure
:CUSTOM_ID prelude-file-structure
:END:
结束:

I have a main thesis.org document, with latex heading declarations and a commented setup file. I also have research.org files, in different directories, with their own latex heading declarations and commented setup files.
我有一个主要的thesis.org文档，其中有latex标题声明和一个注释的安装文件。我也有research.org文件，在不同的目录中，有他们自己的latex标题声明和注释设置文件。

The first lines of thesis.org look like the following:
thesis.org的第一行如下:

#+BEGIN_EXAMPLE
# -*- mode: org; org-latex-title-command: ""; org-latex-toc-command: "" -*-
#+TITLE: Thesis Title
#+LATEX_CLASS: mimosis
# Setupfile with #+LATEX_HEADER, #+OPTIONS and explanations
#+SETUPFILE: thesis.setup
#+LATEX_HEADER: KOMAoptions{fontsize=12pt,headings=small}
#+LATEX_HEADER: bibliography{~/Papers/bibtex/Publications}
#+EXCLUDE_TAGS: journal noexport

* Frontmatter :ignore:
#+LATEX: frontmatter
#+INCLUDE: ./Title.org
#+LATEX: tableofcontents

* Mainmatter :ignore:
#+LATEX: mainmatter

* Introduction
* Research 1
#+INCLUDE: "../research1/research.org::*Abstract" :only-contents t
Some stuff.
#+INCLUDE: "../research1/research.org" :lines "5-"

* Research 2
...
#+END_EXAMPLE

And the first lines and structure overview of the multiple research.org files:
多个research.org文件的第一行和结构概述:

#+BEGIN_EXAMPLE
#+TITLE: Research
#+LATEX_CLASS: elsarticle
#+LATEX_CLASS_OPTIONS: [authoryear,preprint,11pt]
#+SETUPFILE: paper.setup
#+LATEX_HEADER:bibliography{./ref/Publications-research}
#+EXCLUDE_TAGS: thesis noexport

* Frontmatter :ignore:journal:
#+LATEX: begin{frontmatter}
** Author List :ignore:
** Abstract :ignore:
** Keywords :ignore:
#+LATEX: end{frontmatter}
* Introduction
...
#+END_EXAMPLE

** Inserting (parts of) external files
**插入(部分)外部文件
:PROPERTIES:
属性:
:CUSTOM_ID: inserting-parts-of-external-files
:CUSTOM_ID inserting-parts-of-external-files
:END:
结束:

I write my research chapters with LaTeX classes targeting the journal's format. That means that a research chapter may be written with the =elsarticle= class, whereas the thesis as a whole is written with the =mimosis= [[https://github.com/Submanifold/latex-mimosis][class]], a derivative of KOMA =scrbook=. Here's the class configuration for both:
我写研究章节的乳胶类针对的期刊的格式。这意味着一个研究章节可以用=elsarticle= class来写，而整个论文可以用=mimosis= [[https://github.com/Submanifold/latex-mimosis][class]]来写，这是KOMA =scrbook=的一个派生。下面是这两个类的配置:

#+BEGIN_EXAMPLE
(add-to-list 'org-latex-classes
'("elsarticle"
"\documentclass{elsarticle}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
("\section{%s}" . "\section*{%s}")
("\subsection{%s}" . "\subsection*{%s}")
("\subsubsection{%s}" . "\subsubsection*{%s}")
("\paragraph{%s}" . "\paragraph*{%s}")
("\subparagraph{%s}" . "\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
'("mimosis"
"\documentclass{mimosis}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]
\newcommand{\mboxparagraph}[1]{\paragraph{#1}\mbox{}\\}
\newcommand{\mboxsubparagraph}[1]{\subparagraph{#1}\mbox{}\\}"
("\chapter{%s}" . "\chapter*{%s}")
("\section{%s}" . "\section*{%s}")
("\subsection{%s}" . "\subsection*{%s}")
("\subsubsection{%s}" . "\subsubsection*{%s}")
("\mboxparagraph{%s}" . "\mboxparagraph*{%s}")
("\mboxsubparagraph{%s}" . "\mboxsubparagraph*{%s}")))
#+END_EXAMPLE

Research chapters print the bibliography on their own, and they may contain acknowledgements that shouldn't be present in the middle of the thesis, so they should be excluded. In other to insert research chapters into my thesis, I use Org's =#+INCLUDE= derivative:
研究章节自己打印参考书目，它们可能包含不应该出现在论文中间的致谢，所以它们应该被排除在外。在其他插入研究章节到我的论文中，我使用Org的=#+INCLUDE=导数:

#+BEGIN_EXAMPLE
#+INCLUDE: file.org
#+END_EXAMPLE

In order to not include the some parts of the file, i.e., to exclude the title, setupfile and headers, I narrow down the lines:
为了不包括文件的某些部分，即。，为了排除标题、setupfile和header，我缩小了行数:

#+BEGIN_EXAMPLE
# Include line 5 until the end of the file
#+INCLUDE: file.org :lines 5-
#+END_EXAMPLE

In order to exclude parts of the file, I tag research chapter headings that are only meant for publication with a =:journal:= tag (such as the bibliography or acknowledgements). This way they are automatically excluded from the thesis (see the =#+EXCLUDE_TAGS:= derivative in the thesis.org file). Also, I could have thesis specific content in the research.org document tagged with =:thesis:=, and it would be excluded in the research.org export, but I currently don't have any.
为了排除文件的某些部分，我使用=:journal:= tag(例如参考书目或致谢)来标记只用于发布的研究章节标题。这样，它们就自动被排除在论文之外(参见thesis.org文件中的=#+EXCLUDE_TAGS:= derivative)。另外，我还可以在research.org文档中标记为=:thesis:=的论文特定内容，它将被排除在research.org导出中，但我目前没有这样做。

Now, the most important piece of advice I can give anyone is to *learn how to use tags*, =EXCLUDE_TAGS= and the org-plus-contributions =ignore= tag. With the =ignore= tag we separate the structuring of the text as a physical document from the structuring of the text as a semantic unity. This allows an extremely fine control over pieces of text to include into another document. For example, in a research chapter written with the =elsarticle= class, the abstract has to be included in the Frontmatter. By tagging a headline as follows:
现在，我能给大家的最重要的建议是*学习如何使用标签*，=EXCLUDE_TAGS=和org-plus-contribution =ignore= tag。通过=ignore=标记，我们将文本作为物理文档的结构与作为语义统一的文本结构分离开来。这允许对包含到另一个文档中的文本片段进行非常精细的控制。例如，在使用=elsarticle= class编写的研究章节中，必须在前面的内容中包含摘要。为标题加上以下标签:

#+BEGIN_EXAMPLE
** Abstract :ignore:
#+END_EXAMPLE

I can write the research abstract in it's own heading, pretend that the heading itself does not exist (so it does not trigger =/begin{document}=) .2”>2, only its contents, and then include the contents in the thesis in an arbitrary location:
我可以把研究摘要写在它自己的标题中，假装标题本身不存在(这样它就不会触发=/begin{document}=) .2”>2，只有它的内容，然后在任意位置包含论文的内容:

#+BEGIN_EXAMPLE
# in thesis.org
#+INCLUDE: "research.org::*Abstract" :only-contents t
#+END_EXAMPLE

The =:ignore:= tag is one of the best Org mode features, in my opinion. It's key to my workflow, and a shame to see it's not a part of Org core, but rather a contribution to be found in ox-extra.el. To activate it, add the following to your init:
在我看来，=:ignore:=标记是最好的组织模式特性之一。它是我的工作流程的关键，很遗憾它不是Org核心的一部分，而是在ox-extra.el中可以找到的贡献。要激活它，请在init中添加以下内容:

#+BEGIN_EXAMPLE
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+END_EXAMPLE

The realisation that it's possible to have such fine control over where to include or exclude pieces of text opens the door to all sort of interesting experiments: putting figures and captions directly into beamer or org-reveal presentations, creating conference posters, writing blog posts, etc.
意识到在哪里包含或排除文本片段是有可能的，这为所有有趣的实验打开了大门:将图形和说明直接放到beamer或org-reveal演示中，创建会议海报，撰写博客帖子，等等。

** Keep track of references
**记录参考文献
:PROPERTIES:
属性:
:CUSTOM_ID: keep-track-of-references
:CUSTOM_ID keep-track-of-references
:END:
结束:

For backwards compatibility I still use Mendeley to track literature. I export bibtex files for each research project individually, and also a master bibtex for use in the thesis. These documents are saved to =~/Papers/bibtex/=, but for the research chapters, I keep local copies under =./ref/Publications-research.bib=.\
To insert citations, I use [[https://github.com/jkitchin/org-ref][org-ref.]] It's documentation says it all. After setting up local bibliography files with the derivative =#+BIBLIOGRAPHY=, press =C-c ]= to see a list of publications and insert them in place. I also prefer to have =parencite= citations instead of =cite=, because they work nicely with BibLaTeX. My setup for org-ref:
要插入引用，我使用[[https://github.com/jkitchin/org-ref][org-ref.]]它的文档说明了一切。在使用导数=#+ bibliography =设置本地书目文件之后，press =C-c]=查看出版物列表并将其插入。我也更喜欢使用=parencite= citations而不是=cite=，因为它们与BibLaTeX配合得很好。我的组织设置:

#+BEGIN_EXAMPLE
(with-eval-after-load 'org-ref
;; see org-ref for use of these variables
(setq org-ref-default-bibliography '("~/Papers/bibtex/Publications.bib")
org-ref-pdf-directory "~/Papers/MendeleyDesktop/"
org-ref-get-pdf-filename-function 'org-ref-get-mendeley-filename
bibtex-completion-pdf-field "file"
org-latex-prefer-user-labels t
org-ref-default-citation-link "parencite"
;; bibtex-dialect 'biblatex
)

(defun org-ref-open-pdf-at-point-in-emacs ()
"Open the pdf for bibtex key under point if it exists."
(interactive)
(let* ((results (org-ref-get-bibtex-key-and-file))
(key (car results))
(pdf-file (funcall org-ref-get-pdf-filename-function key)))
(if (file-exists-p pdf-file)
(find-file-other-window pdf-file)
(message "no pdf found for %s" key))))

;; https://github.com/jkitchin/org-ref/issues/597
(defun org-ref-grep-pdf (&optional _candidate)
"Search pdf files of marked CANDIDATEs."
(interactive)
(let ((keys (helm-marked-candidates))
(get-pdf-function org-ref-get-pdf-filename-function))
(helm-do-pdfgrep-1
(-remove (lambda (pdf)
(string= pdf ""))
(mapcar (lambda (key)
(funcall get-pdf-function key))
keys)))))

(helm-add-action-to-source "Grep PDF" 'org-ref-grep-pdf helm-source-bibtex 1)

(setq helm-bibtex-map
(let ((map (make-sparse-keymap)))
(set-keymap-parent map helm-map)
(define-key map (kbd "C-s") (lambda () (interactive)
(helm-run-after-exit 'org-ref-grep-pdf)))
map))
(push `(keymap . ,helm-bibtex-map) helm-source-bibtex)

(setq org-ref-helm-user-candidates
'(("Open in Emacs" . org-ref-open-pdf-at-point-in-emacs))))
#+END_EXAMPLE

** Include and reference figures
**包括和参考数字
:PROPERTIES:
属性:
:CUSTOM_ID: include-and-reference-figures
:CUSTOM_ID include-and-reference-figures
:END:
结束:

For each research project I keep a =./media= directory, where all my figures live. You can include figures in Org mode by using the following syntax:
对于每个研究项目，我保持a =。/media=目录，我所有的数字都在这里。你可以使用以下语法在组织模式中包括数字:

#+BEGIN_EXAMPLE
#+NAME: figurename
#+CAPTION: This is a figure caption
[[path_to_figure][link_description]]
#+END_EXAMPLE

Currently there is a bug in the ELPA version of Org mode, such that relative paths to figures in =#+INCLUDE= 'd files aren't adapted with respect to the including file, so the latex export cannot find them. I've [[https://code.orgmode.org/bzg/org-mode/commit/d81a1d088c74e605c99e90a2835c55df5144f43e][submitted a fix]] which should land in the next release of Org.
目前，在Org模式的ELPA版本中有一个bug，例如，到=#+INCLUDE= 'd文件中的图形的相对路径没有根据包含文件进行调整，所以latex导出无法找到它们。我已经[[https://code.orgmode.org/bzg/org-mode/commit/d81a1d088c74e605c99e90a2835c55df5144f43e][提交了一个修复]]，应该在Org的下一个版本中。

** Version control documents
**版本控制文档
:PROPERTIES:
属性:
:CUSTOM_ID: version-control-documents
:CUSTOM_ID version-control-documents
:END:
结束:

[[https://magit.vc/][Magit]]. I thought about having the research chapters as git submodules in a thesis git project directory, but I currently don't. This would allow me to always have the thesis code in a saved state, even if I further work on my research chapters to answer to reviewers questions.
[[https://magit.vc/] [Magit]]。我曾想过将研究章节作为git子模块放在论文git项目目录中，但目前还没有。这将允许我始终保持论文代码处于保存状态，即使我进一步研究章节以回答审稿人的问题。

** Support for sharing with my supervisor
**支持与主管共享
:PROPERTIES:
属性:
:CUSTOM_ID: support-for-sharing-with-my-supervisor
:CUSTOM_ID support-for-sharing-with-my-supervisor
:END:
结束:

Unfortunately, my supervisor likes to write comments in Mic. Word. I give in that sharing your writing with colleagues is a fundamental part of research.\
Fortunately, [[https://github.com/jkitchin/scimax/blob/master/ox-word.el][ox-word]] export via Pandoc & LaTeX is capable of creating nice looking, structured Word files which I send to my supervisor. I then manually work through each comment step by step, though I'm looking for a way to improve this part of my workflow. I think the Emacs community is missing a minor mode to track Word document changes from within Org Mode. There are some ideas laying around on how to implement it [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00246.html][hidden deep in the mailing list]], or in [[https://emacs.stackexchange.com/questions/34923/merging-changes-to-from-docx-files-into-org-files][this Emacs Exchange thread]].
幸运的是，[[https://github.com/jkitchin/scimax/blob/master/ox-word.el][ox-word]]出口通过Pandoc & LaTeX能够创建漂亮的，结构化的Word文件，我发送给我的主管。然后，我一步一步地手动完成每条注释，尽管我正在寻找改进这部分工作流程的方法。我认为Emacs社区缺少一个小的模式来跟踪Word文档在Org模式中的变化。有一些想法如何实现它[[https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00246.html][深藏在邮件列表]],或在[[https://emacs.stackexchange.com/questions/34923/merging-changes-to-from-docx-files-into-org-files][这Emacs交换线程]]。

I may update this post with more information later.
稍后我可能会更新更多的信息。

** Extended search facilities
**扩展搜寻设施
:PROPERTIES:
属性:
:CUSTOM_ID: extended-search-facilities
:CUSTOM_ID extended-search-facilities
:END:
结束:

By extended search facilities I mean the ability to quickly search for information in references, and to keep notes linked to the literature. For searching I make use of [[https://github.com/jkitchin/org-ref/issues/597][org-ref + pdfgrep]], as shown in my org-ref setup. For notes linked to documents I've recently started to use [[https://github.com/weirdNox/org-noter][Org-noter.]]
我所说的扩展搜索功能是指在参考文献中快速搜索信息和保持与文献链接的注释的能力。为了搜索，我使用了[[https://github.com/jkitchin/org-ref/issues/597][org-ref + pdfgrep]]，如我的org-ref设置所示。对于链接到文档的注释，我最近开始使用[[https://github.com/dnox/org-noter][Org-noter]]

** Simple syntax for tables and equations
**表和方程的简单语法
:PROPERTIES:
属性:
:CUSTOM_ID: simple-syntax-for-tables-and-equations
:CUSTOM_ID simple-syntax-for-tables-and-equations
:END:
结束:

Org tables are a pleasure to work with. The following:
组织表是一个愉快的工作。以下几点:

#+BEGIN_EXAMPLE
| a | b | c |
|---+---+---|
| 1 | 2 | 3 |
#+END_EXAMPLE

Turns into:
变成:

a
一个
b
b
c
c
1
2
3

Equations can be written in LaTeX:
方程可以用LaTeX来写:

#+BEGIN_EXAMPLE
frac{d vec{M} (t)}{dt} = vec{M} (t) times gamma vec{B} (t)
#+END_EXAMPLE

will become:
将成为:

$ frac{d vec{M} (t)}{dt} = vec{M} (t) × γ vec{B} (t) $
$ frac {d vec {M (t)前往dt = vec {M (t)×γvec {B (t)美元

** Support within a proper text editor
**支持在一个适当的文本编辑器
:PROPERTIES:
属性:
:CUSTOM_ID: support-within-a-proper-text-editor
:CUSTOM_ID support-within-a-proper-text-editor
:END:
结束:

No need to talk about the synergy of using Emacs to edit text. I personally started using Spacemacs without Evil mode, because I find it aesthetically pleasing and because it offers great support for the languages I use the most, and excellent integration with Helm and Org.\
The following configurations make the Org editing experience a bit nicer, in my opinion:
在我看来，以下配置使组织编辑体验更好:

#+BEGIN_EXAMPLE
;; Writegood https://github.com/bnbeckwith/writegood-mode
(add-hook 'org-mode-hook 'writegood-mode)

;; https://github.com/cadadr/elisp/blob/master/org-variable-pitch.el
(use-package org-variable-pitch
:load-path "~/Elisp")
(add-hook 'org-mode-hook 'org-variable-pitch-minor-mode)

(setq visual-fill-column-width 120
visual-fill-column-center-text t)
(add-hook 'org-mode-hook 'visual-line-mode)

;; https://github.com/joostkremers/visual-fill-column
(add-hook 'org-mode-hook 'visual-fill-column-mode)
(add-hook 'org-mode-hook 'org-display-inline-images)

;; I have a modified version of the following:
;; https://github.com/lepisma/rogue/blob/master/config.el
(load-file "~/Projects/rogue/config.el")
(add-hook 'org-mode-hook '(lambda () (setq-local line-spacing 5)))

;; Aesthetical enhancements.
(setq org-fontify-quote-and-verse-blocks t
org-hide-macro-markers t
org-fontify-whole-heading-line t
org-fontify-done-headline t
org-hide-emphasis-markers t)
#+END_EXAMPLE

** Shortcuts to reach my files and build the thesis
**快捷方式，以达到我的文件和建立论文
:PROPERTIES:
属性:
:CUSTOM_ID: shortcuts-to-reach-my-files-and-build-the-thesis
:CUSTOM_ID shortcuts-to-reach-my-files-and-build-the-thesis
:END:
结束:

I have a hydra (defined in Spacemacs as a transient-state) to move between my Thesis files:
我有一个hydra(在Spacemacs中定义为过渡状态)在我的论文文件之间移动:

#+BEGIN_EXAMPLE
;; Spacemacs hydra.
(spacemacs|define-transient-state thesis-menu
:title "Ph.D. Thesis Menu"
:doc
"
^Main Files^ ^Chapters^ ^Actions^
^^^^^^^^-------------------------------------------
_m_: Thesis _1_: Research 1 _o_: Open Thesis.pdf externally
_t_: Title page _2_: Research 2 _c_: Async compile file
_i_: Introduction _3_: Research 3 _a_: things
_s_: thesis.setup _4_: Research 4 ^ ^
"
:bindings
("a" things :exit t)
("m" (find-file "~/thesis/thesis.org") :exit t)
("t" (find-file "~/thesis/titlepage.org") :exit t)
("s" (find-file "~/thesis/thesis.setup") :exit t)
("i" (find-file "~/thesis/intro/intro.org") :exit t)
("1" (find-file "~/thesis/ch1/research.org") :exit t)
("2" (find-file "~/thesis/ch2/research.org") :exit t)
("3" (find-file "~/thesis/ch3/research.org") :exit t)
("4" (find-file "~/thesis/ch4/research.org") :exit t)
("o" (shell-command "open ~/thesis/thesis.pdf" :exit t))
("c" (org-latex-export-to-pdf :async t) :exit t))

(global-set-key (kbd "H-t") 'spacemacs/thesis-menu-transient-state/body)
#+END_EXAMPLE

I'm considering writing a thesis template repository. I might do it when I finish my Ph.D.
我正在考虑写一个论文模板库。我博士毕业后可能会做。

This post was generated with a library I've talked about in a [[https://write.as/dani/an-emacs-library-for-frictionless-blogging][previous post]].
这篇文章是我在[[https://write]中提到的一个库生成的。/达尼/ an-emacs-library-for-frictionless-blogging][以前的文章]]。

.1”>1 See item 9 [[https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/][from this blogpost.]]
1“>1见项目9 [[https://www.joelonsoftware.com/2000/08/09/joel-test -12-step -to-better-code/][来自这篇博文]。]

.2”>2 Headlines will tell ox-latex to start the document sectioning, and therefore trigger the beginning of the document environment
.2”>2标题将告诉ox-latex开始文档分区，从而触发文档环境的开始
